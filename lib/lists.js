// Generated by CoffeeScript 1.3.3
(function() {
  var INVITES, IS_NODE, List, SHARES, TAGS_PATH, getFolderName, intermine, invoke, isFolder, _, __root__,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  IS_NODE = typeof exports !== 'undefined';

  __root__ = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (IS_NODE) {
    _ = require('underscore')._;
    invoke = require('./util').invoke;
    intermine = __root__;
  } else {
    _ = __root__._, intermine = __root__.intermine;
    invoke = intermine.funcutils.invoke;
  }

  TAGS_PATH = "list/tags";

  SHARES = "lists/shares";

  INVITES = "lists/invitations";

  isFolder = function(t) {
    return t.substr(0, t.indexOf(':')) === '__folder__';
  };

  getFolderName = function(t) {
    return s.substr(t.indexOf(':') + 1);
  };

  List = (function() {

    function List(properties, service) {
      var k, v;
      this.service = service;
      for (k in properties) {
        if (!__hasProp.call(properties, k)) continue;
        v = properties[k];
        this[k] = v;
      }
      this.dateCreated = (this.dateCreated != null) ? new Date(this.dateCreated) : null;
      this.folders = this.tags.filter(isFolder).map(getFolderName);
    }

    List.prototype.hasTag = function(t) {
      return __indexOf.call(this.tags, t) >= 0;
    };

    List.prototype.del = function(cb) {
      return this.service.makeRequest('DELETE', 'lists', {
        name: this.name
      }, cb);
    };

    List.prototype.contents = function(cb) {
      return this.service.query({
        select: ['*'],
        from: this.type,
        where: [[this.type, 'IN', this.name]]
      }).pipe(invoke('records')).done(cb);
    };

    List.prototype.enrichment = function(opts, cb) {
      return this.service.enrichment((set({
        list: this.name
      }))(opts, cb));
    };

    List.prototype.shareWithUser = function(recipient, cb) {
      return this.service.post(SHARES, {
        list: this.name,
        "with": recipient
      }).done(cb);
    };

    List.prototype.inviteUserToShare = function(recipient, notify, cb) {
      return this.service.post(INVITES, {
        list: this.name,
        to: recipient,
        notify: !!notify
      }).done(cb);
    };

    return List;

  })();

  intermine.List = List;

}).call(this);
