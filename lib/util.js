// Generated by CoffeeScript 1.3.3
(function() {
  var Deferred, IS_NODE, id, root, _base, _ref, _ref1,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  IS_NODE = typeof exports !== 'undefined';

  root = typeof exports !== "undefined" && exports !== null ? exports : this;

  if (IS_NODE) {
    Deferred = require('underscore.deferred').Deferred;
  } else {
    Deferred = root.jQuery.Deferred;
    if ((_ref = root.intermine) == null) {
      root.intermine = {};
    }
    if ((_ref1 = (_base = root.intermine).funcutils) == null) {
      _base.funcutils = {};
    }
    root = root.intermine.funcutils;
  }

  root.error = function(e) {
    return Deferred(function() {
      return this.reject(new Error(e));
    }).promise();
  };

  root.success = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return Deferred(function() {
      return this.resolve.apply(this, args);
    }).promise();
  };

  root.fold = function(init, f) {
    return function(xs) {
      var k, ret, v;
      if (xs.reduce != null) {
        return xs.reduce(f, init);
      } else {
        ret = init;
        for (k in xs) {
          v = xs[k];
          ret = ret != null ? f(ret, k, v) : {
            k: v
          };
        }
        return ret;
      }
    };
  };

  root.take = function(n) {
    return function(xs) {
      if (n != null) {
        return xs.slice(0, (n - 1) + 1 || 9e9);
      } else {
        return xs;
      }
    };
  };

  root.omap = function(f) {
    return function(xs) {
      var merger;
      merger = function(a, oldk, oldv) {
        var newk, newv, _ref2;
        _ref2 = f(oldk, oldv), newk = _ref2[0], newv = _ref2[1];
        a[newk] = newv;
        return a;
      };
      return (exports.fold({}, merger))(xs);
    };
  };

  root.copy = root.omap(function(k, v) {
    return [k, v];
  });

  root.partition = function(f) {
    return function(xs) {
      var falses, trues, x, _i, _len;
      trues = [];
      falses = [];
      for (_i = 0, _len = xs.length; _i < _len; _i++) {
        x = xs[_i];
        if (f(x)) {
          trues.push(x);
        } else {
          falses.push(x);
        }
      }
      return [trues, falses];
    };
  };

  root.concatMap = function(f) {
    return function(xs) {
      var fx, k, ret, v, x, _i, _len;
      ret = void 0;
      for (_i = 0, _len = xs.length; _i < _len; _i++) {
        x = xs[_i];
        fx = f(x);
        ret = (function() {
          var _ref2;
          if (ret === void 0) {
            return fx;
          } else if ((_ref2 = typeof fx) === 'string' || _ref2 === 'number') {
            return ret + fx;
          } else if (fx.slice != null) {
            return ret.concat(fx);
          } else {
            for (k in fx) {
              v = fx[k];
              ret[k] = v;
            }
            return ret;
          }
        })();
      }
      return ret;
    };
  };

  root.flatMap = root.concatMap;

  root.sum = root.concatMap(function() {});

  root.AND = function(a, b) {
    return a && b;
  };

  root.OR = function(a, b) {
    return a || b;
  };

  root.NOT = function(x) {
    return !x;
  };

  root.id = id = function(x) {
    return x;
  };

  root.any = function(xs, f) {
    var x, _i, _len;
    if (f == null) {
      f = id;
    }
    for (_i = 0, _len = xs.length; _i < _len; _i++) {
      x = xs[_i];
      if (f(x)) {
        return true;
      }
    }
  };

  root.invoke = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function(obj) {
      var _ref2;
      if ((_ref2 = obj[name]) != null ? _ref2.apply : void 0) {
        return obj[name].apply(obj, args);
      } else {
        return Deferred().reject("No method: " + name).promise();
      }
    };
  };

  root.invokeWith = function(name, args, ctx) {
    if (args == null) {
      args = [];
    }
    if (ctx == null) {
      ctx = null;
    }
    return function(o) {
      return o[name].apply(ctx || o, args);
    };
  };

  root.get = function(name) {
    return function(obj) {
      return obj[name];
    };
  };

  root.set = function(name, value) {
    return function(obj) {
      var k, v;
      if (arguments.length === 2) {
        obj[name] = value;
      } else {
        for (k in name) {
          if (!__hasProp.call(name, k)) continue;
          v = name[k];
          obj[k] = v;
        }
      }
      return obj;
    };
  };

}).call(this);
