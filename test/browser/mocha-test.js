require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['base64.js']) {
  _$jscoverage['base64.js'] = [];
  _$jscoverage['base64.js'][8] = 0;
  _$jscoverage['base64.js'][9] = 0;
  _$jscoverage['base64.js'][11] = 0;
  _$jscoverage['base64.js'][13] = 0;
  _$jscoverage['base64.js'][15] = 0;
  _$jscoverage['base64.js'][16] = 0;
  _$jscoverage['base64.js'][19] = 0;
  _$jscoverage['base64.js'][20] = 0;
  _$jscoverage['base64.js'][21] = 0;
  _$jscoverage['base64.js'][22] = 0;
  _$jscoverage['base64.js'][23] = 0;
  _$jscoverage['base64.js'][24] = 0;
  _$jscoverage['base64.js'][25] = 0;
  _$jscoverage['base64.js'][26] = 0;
  _$jscoverage['base64.js'][27] = 0;
  _$jscoverage['base64.js'][28] = 0;
  _$jscoverage['base64.js'][29] = 0;
  _$jscoverage['base64.js'][30] = 0;
  _$jscoverage['base64.js'][31] = 0;
  _$jscoverage['base64.js'][33] = 0;
  _$jscoverage['base64.js'][36] = 0;
  _$jscoverage['base64.js'][38] = 0;
  _$jscoverage['base64.js'][41] = 0;
  _$jscoverage['base64.js'][42] = 0;
  _$jscoverage['base64.js'][43] = 0;
  _$jscoverage['base64.js'][44] = 0;
  _$jscoverage['base64.js'][45] = 0;
  _$jscoverage['base64.js'][46] = 0;
  _$jscoverage['base64.js'][47] = 0;
  _$jscoverage['base64.js'][48] = 0;
  _$jscoverage['base64.js'][49] = 0;
  _$jscoverage['base64.js'][50] = 0;
  _$jscoverage['base64.js'][51] = 0;
  _$jscoverage['base64.js'][52] = 0;
  _$jscoverage['base64.js'][53] = 0;
  _$jscoverage['base64.js'][54] = 0;
  _$jscoverage['base64.js'][55] = 0;
  _$jscoverage['base64.js'][56] = 0;
  _$jscoverage['base64.js'][57] = 0;
  _$jscoverage['base64.js'][59] = 0;
  _$jscoverage['base64.js'][61] = 0;
}
_$jscoverage['base64.js'].source = ["","/*","*  Base64 encode / decode","*  http://www.webtoolkit.info/","*/","","","(function() {","  var char, keyChar, keyStr, utf8_encode;","","  keyStr = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";","","  char = String.fromCharCode;","","  keyChar = function(idx) {","    return keyStr.charAt(idx);","  };","","  utf8_encode = function(string) {","    var c, chars, code, i;","    string = string.replace(/\\r\\n/g, '\\n');","    chars = (function() {","      var _i, _len, _results;","      _results = [];","      for (i = _i = 0, _len = string.length; _i &lt; _len; i = ++_i) {","        c = string[i];","        code = string.charCodeAt(i);","        if (code &lt; 128) {","          _results.push(c);","        } else if (code &lt; 2048) {","          _results.push(char((code &gt;&gt; 6) | 192) + char((code &amp; 63) | 128));","        } else {","          _results.push(char((code &gt;&gt; 12) | 224) + char(((char &gt;&gt; 6) &amp; 63) | 128) + char((code &amp; 63) | 128));","        }","      }","      return _results;","    })();","    return chars.join('');","  };","","  exports.encode = function(input) {","    var chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, output;","    output = \"\";","    i = 0;","    input = utf8_encode(input);","    while (i &lt; input.length) {","      chr1 = input.charCodeAt(i++);","      chr2 = input.charCodeAt(i++);","      chr3 = input.charCodeAt(i++);","      enc1 = chr1 &gt;&gt; 2;","      enc2 = ((chr1 &amp; 3) &lt;&lt; 4) | (chr2 &gt;&gt; 4);","      enc3 = ((chr2 &amp; 15) &lt;&lt; 2) | (chr3 &gt;&gt; 6);","      enc4 = chr3 &amp; 63;","      if (isNaN(chr2)) {","        enc3 = enc4 = 64;","      } else if (isNaN(chr3)) {","        enc4 = 64;","      }","      output += [enc1, enc2, enc3, enc4].map(keyChar).join('');","    }","    return output;","  };","","}).call(this);"];
_$jscoverage['base64.js'][8]++;
(function () {
  _$jscoverage['base64.js'][9]++;
  var char, keyChar, keyStr, utf8_encode;
  _$jscoverage['base64.js'][11]++;
  keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  _$jscoverage['base64.js'][13]++;
  char = String.fromCharCode;
  _$jscoverage['base64.js'][15]++;
  keyChar = (function (idx) {
  _$jscoverage['base64.js'][16]++;
  return keyStr.charAt(idx);
});
  _$jscoverage['base64.js'][19]++;
  utf8_encode = (function (string) {
  _$jscoverage['base64.js'][20]++;
  var c, chars, code, i;
  _$jscoverage['base64.js'][21]++;
  string = string.replace(/\r\n/g, "\n");
  _$jscoverage['base64.js'][22]++;
  chars = (function () {
  _$jscoverage['base64.js'][23]++;
  var _i, _len, _results;
  _$jscoverage['base64.js'][24]++;
  _results = [];
  _$jscoverage['base64.js'][25]++;
  for (((i = (_i = 0)), (_len = string.length)); (_i < _len); (i = (++_i))) {
    _$jscoverage['base64.js'][26]++;
    c = string[i];
    _$jscoverage['base64.js'][27]++;
    code = string.charCodeAt(i);
    _$jscoverage['base64.js'][28]++;
    if ((code < 128)) {
      _$jscoverage['base64.js'][29]++;
      _results.push(c);
    }
    else {
      _$jscoverage['base64.js'][30]++;
      if ((code < 2048)) {
        _$jscoverage['base64.js'][31]++;
        _results.push((char(((code >> 6) | 192)) + char(((code & 63) | 128))));
      }
      else {
        _$jscoverage['base64.js'][33]++;
        _results.push((char(((code >> 12) | 224)) + char((((char >> 6) & 63) | 128)) + char(((code & 63) | 128))));
      }
    }
}
  _$jscoverage['base64.js'][36]++;
  return _results;
})();
  _$jscoverage['base64.js'][38]++;
  return chars.join("");
});
  _$jscoverage['base64.js'][41]++;
  exports.encode = (function (input) {
  _$jscoverage['base64.js'][42]++;
  var chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, output;
  _$jscoverage['base64.js'][43]++;
  output = "";
  _$jscoverage['base64.js'][44]++;
  i = 0;
  _$jscoverage['base64.js'][45]++;
  input = utf8_encode(input);
  _$jscoverage['base64.js'][46]++;
  while ((i < input.length)) {
    _$jscoverage['base64.js'][47]++;
    chr1 = input.charCodeAt((i++));
    _$jscoverage['base64.js'][48]++;
    chr2 = input.charCodeAt((i++));
    _$jscoverage['base64.js'][49]++;
    chr3 = input.charCodeAt((i++));
    _$jscoverage['base64.js'][50]++;
    enc1 = (chr1 >> 2);
    _$jscoverage['base64.js'][51]++;
    enc2 = (((chr1 & 3) << 4) | (chr2 >> 4));
    _$jscoverage['base64.js'][52]++;
    enc3 = (((chr2 & 15) << 2) | (chr3 >> 6));
    _$jscoverage['base64.js'][53]++;
    enc4 = (chr3 & 63);
    _$jscoverage['base64.js'][54]++;
    if (isNaN(chr2)) {
      _$jscoverage['base64.js'][55]++;
      enc3 = (enc4 = 64);
    }
    else {
      _$jscoverage['base64.js'][56]++;
      if (isNaN(chr3)) {
        _$jscoverage['base64.js'][57]++;
        enc4 = 64;
      }
    }
    _$jscoverage['base64.js'][59]++;
    output += [enc1, enc2, enc3, enc4].map(keyChar).join("");
}
  _$jscoverage['base64.js'][61]++;
  return output;
});
}).call(this);

},{}],2:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['id-resolution-job.js']) {
  _$jscoverage['id-resolution-job.js'] = [];
  _$jscoverage['id-resolution-job.js'][1] = 0;
  _$jscoverage['id-resolution-job.js'][2] = 0;
  _$jscoverage['id-resolution-job.js'][4] = 0;
  _$jscoverage['id-resolution-job.js'][5] = 0;
  _$jscoverage['id-resolution-job.js'][7] = 0;
  _$jscoverage['id-resolution-job.js'][9] = 0;
  _$jscoverage['id-resolution-job.js'][11] = 0;
  _$jscoverage['id-resolution-job.js'][13] = 0;
  _$jscoverage['id-resolution-job.js'][15] = 0;
  _$jscoverage['id-resolution-job.js'][16] = 0;
  _$jscoverage['id-resolution-job.js'][18] = 0;
  _$jscoverage['id-resolution-job.js'][19] = 0;
  _$jscoverage['id-resolution-job.js'][20] = 0;
  _$jscoverage['id-resolution-job.js'][21] = 0;
  _$jscoverage['id-resolution-job.js'][22] = 0;
  _$jscoverage['id-resolution-job.js'][23] = 0;
  _$jscoverage['id-resolution-job.js'][27] = 0;
  _$jscoverage['id-resolution-job.js'][28] = 0;
  _$jscoverage['id-resolution-job.js'][29] = 0;
  _$jscoverage['id-resolution-job.js'][31] = 0;
  _$jscoverage['id-resolution-job.js'][35] = 0;
  _$jscoverage['id-resolution-job.js'][37] = 0;
  _$jscoverage['id-resolution-job.js'][38] = 0;
  _$jscoverage['id-resolution-job.js'][39] = 0;
  _$jscoverage['id-resolution-job.js'][40] = 0;
  _$jscoverage['id-resolution-job.js'][42] = 0;
  _$jscoverage['id-resolution-job.js'][46] = 0;
  _$jscoverage['id-resolution-job.js'][47] = 0;
  _$jscoverage['id-resolution-job.js'][48] = 0;
  _$jscoverage['id-resolution-job.js'][50] = 0;
  _$jscoverage['id-resolution-job.js'][54] = 0;
  _$jscoverage['id-resolution-job.js'][55] = 0;
  _$jscoverage['id-resolution-job.js'][58] = 0;
  _$jscoverage['id-resolution-job.js'][59] = 0;
  _$jscoverage['id-resolution-job.js'][61] = 0;
  _$jscoverage['id-resolution-job.js'][62] = 0;
  _$jscoverage['id-resolution-job.js'][64] = 0;
  _$jscoverage['id-resolution-job.js'][67] = 0;
  _$jscoverage['id-resolution-job.js'][71] = 0;
  _$jscoverage['id-resolution-job.js'][72] = 0;
  _$jscoverage['id-resolution-job.js'][74] = 0;
  _$jscoverage['id-resolution-job.js'][76] = 0;
  _$jscoverage['id-resolution-job.js'][78] = 0;
  _$jscoverage['id-resolution-job.js'][79] = 0;
  _$jscoverage['id-resolution-job.js'][80] = 0;
  _$jscoverage['id-resolution-job.js'][81] = 0;
  _$jscoverage['id-resolution-job.js'][82] = 0;
  _$jscoverage['id-resolution-job.js'][83] = 0;
  _$jscoverage['id-resolution-job.js'][84] = 0;
  _$jscoverage['id-resolution-job.js'][85] = 0;
  _$jscoverage['id-resolution-job.js'][86] = 0;
  _$jscoverage['id-resolution-job.js'][88] = 0;
  _$jscoverage['id-resolution-job.js'][92] = 0;
  _$jscoverage['id-resolution-job.js'][93] = 0;
  _$jscoverage['id-resolution-job.js'][96] = 0;
  _$jscoverage['id-resolution-job.js'][97] = 0;
  _$jscoverage['id-resolution-job.js'][98] = 0;
  _$jscoverage['id-resolution-job.js'][99] = 0;
  _$jscoverage['id-resolution-job.js'][100] = 0;
  _$jscoverage['id-resolution-job.js'][101] = 0;
  _$jscoverage['id-resolution-job.js'][105] = 0;
  _$jscoverage['id-resolution-job.js'][106] = 0;
  _$jscoverage['id-resolution-job.js'][108] = 0;
  _$jscoverage['id-resolution-job.js'][110] = 0;
  _$jscoverage['id-resolution-job.js'][112] = 0;
  _$jscoverage['id-resolution-job.js'][119] = 0;
  _$jscoverage['id-resolution-job.js'][120] = 0;
  _$jscoverage['id-resolution-job.js'][121] = 0;
  _$jscoverage['id-resolution-job.js'][122] = 0;
  _$jscoverage['id-resolution-job.js'][123] = 0;
  _$jscoverage['id-resolution-job.js'][124] = 0;
  _$jscoverage['id-resolution-job.js'][125] = 0;
  _$jscoverage['id-resolution-job.js'][126] = 0;
  _$jscoverage['id-resolution-job.js'][127] = 0;
  _$jscoverage['id-resolution-job.js'][128] = 0;
  _$jscoverage['id-resolution-job.js'][129] = 0;
  _$jscoverage['id-resolution-job.js'][130] = 0;
  _$jscoverage['id-resolution-job.js'][131] = 0;
  _$jscoverage['id-resolution-job.js'][132] = 0;
  _$jscoverage['id-resolution-job.js'][134] = 0;
  _$jscoverage['id-resolution-job.js'][137] = 0;
  _$jscoverage['id-resolution-job.js'][140] = 0;
  _$jscoverage['id-resolution-job.js'][141] = 0;
  _$jscoverage['id-resolution-job.js'][142] = 0;
  _$jscoverage['id-resolution-job.js'][143] = 0;
  _$jscoverage['id-resolution-job.js'][144] = 0;
  _$jscoverage['id-resolution-job.js'][145] = 0;
  _$jscoverage['id-resolution-job.js'][152] = 0;
  _$jscoverage['id-resolution-job.js'][153] = 0;
  _$jscoverage['id-resolution-job.js'][154] = 0;
  _$jscoverage['id-resolution-job.js'][155] = 0;
  _$jscoverage['id-resolution-job.js'][156] = 0;
  _$jscoverage['id-resolution-job.js'][157] = 0;
  _$jscoverage['id-resolution-job.js'][158] = 0;
  _$jscoverage['id-resolution-job.js'][159] = 0;
  _$jscoverage['id-resolution-job.js'][160] = 0;
  _$jscoverage['id-resolution-job.js'][161] = 0;
  _$jscoverage['id-resolution-job.js'][162] = 0;
  _$jscoverage['id-resolution-job.js'][163] = 0;
  _$jscoverage['id-resolution-job.js'][166] = 0;
  _$jscoverage['id-resolution-job.js'][168] = 0;
  _$jscoverage['id-resolution-job.js'][175] = 0;
  _$jscoverage['id-resolution-job.js'][176] = 0;
  _$jscoverage['id-resolution-job.js'][177] = 0;
  _$jscoverage['id-resolution-job.js'][178] = 0;
  _$jscoverage['id-resolution-job.js'][179] = 0;
  _$jscoverage['id-resolution-job.js'][180] = 0;
  _$jscoverage['id-resolution-job.js'][181] = 0;
  _$jscoverage['id-resolution-job.js'][182] = 0;
  _$jscoverage['id-resolution-job.js'][185] = 0;
  _$jscoverage['id-resolution-job.js'][188] = 0;
  _$jscoverage['id-resolution-job.js'][189] = 0;
  _$jscoverage['id-resolution-job.js'][190] = 0;
  _$jscoverage['id-resolution-job.js'][191] = 0;
  _$jscoverage['id-resolution-job.js'][192] = 0;
  _$jscoverage['id-resolution-job.js'][193] = 0;
  _$jscoverage['id-resolution-job.js'][194] = 0;
  _$jscoverage['id-resolution-job.js'][195] = 0;
  _$jscoverage['id-resolution-job.js'][198] = 0;
  _$jscoverage['id-resolution-job.js'][201] = 0;
  _$jscoverage['id-resolution-job.js'][202] = 0;
  _$jscoverage['id-resolution-job.js'][205] = 0;
  _$jscoverage['id-resolution-job.js'][206] = 0;
  _$jscoverage['id-resolution-job.js'][209] = 0;
  _$jscoverage['id-resolution-job.js'][213] = 0;
  _$jscoverage['id-resolution-job.js'][215] = 0;
  _$jscoverage['id-resolution-job.js'][216] = 0;
  _$jscoverage['id-resolution-job.js'][217] = 0;
  _$jscoverage['id-resolution-job.js'][218] = 0;
  _$jscoverage['id-resolution-job.js'][220] = 0;
  _$jscoverage['id-resolution-job.js'][222] = 0;
  _$jscoverage['id-resolution-job.js'][224] = 0;
  _$jscoverage['id-resolution-job.js'][228] = 0;
  _$jscoverage['id-resolution-job.js'][229] = 0;
  _$jscoverage['id-resolution-job.js'][232] = 0;
  _$jscoverage['id-resolution-job.js'][233] = 0;
  _$jscoverage['id-resolution-job.js'][236] = 0;
  _$jscoverage['id-resolution-job.js'][237] = 0;
  _$jscoverage['id-resolution-job.js'][238] = 0;
  _$jscoverage['id-resolution-job.js'][239] = 0;
  _$jscoverage['id-resolution-job.js'][240] = 0;
  _$jscoverage['id-resolution-job.js'][241] = 0;
  _$jscoverage['id-resolution-job.js'][242] = 0;
  _$jscoverage['id-resolution-job.js'][243] = 0;
  _$jscoverage['id-resolution-job.js'][245] = 0;
  _$jscoverage['id-resolution-job.js'][251] = 0;
  _$jscoverage['id-resolution-job.js'][252] = 0;
  _$jscoverage['id-resolution-job.js'][255] = 0;
  _$jscoverage['id-resolution-job.js'][257] = 0;
  _$jscoverage['id-resolution-job.js'][258] = 0;
  _$jscoverage['id-resolution-job.js'][260] = 0;
  _$jscoverage['id-resolution-job.js'][261] = 0;
  _$jscoverage['id-resolution-job.js'][262] = 0;
  _$jscoverage['id-resolution-job.js'][263] = 0;
  _$jscoverage['id-resolution-job.js'][264] = 0;
  _$jscoverage['id-resolution-job.js'][265] = 0;
  _$jscoverage['id-resolution-job.js'][266] = 0;
  _$jscoverage['id-resolution-job.js'][267] = 0;
  _$jscoverage['id-resolution-job.js'][268] = 0;
  _$jscoverage['id-resolution-job.js'][269] = 0;
  _$jscoverage['id-resolution-job.js'][271] = 0;
  _$jscoverage['id-resolution-job.js'][273] = 0;
  _$jscoverage['id-resolution-job.js'][275] = 0;
  _$jscoverage['id-resolution-job.js'][276] = 0;
  _$jscoverage['id-resolution-job.js'][280] = 0;
  _$jscoverage['id-resolution-job.js'][283] = 0;
  _$jscoverage['id-resolution-job.js'][287] = 0;
  _$jscoverage['id-resolution-job.js'][289] = 0;
  _$jscoverage['id-resolution-job.js'][290] = 0;
  _$jscoverage['id-resolution-job.js'][291] = 0;
  _$jscoverage['id-resolution-job.js'][295] = 0;
  _$jscoverage['id-resolution-job.js'][297] = 0;
  _$jscoverage['id-resolution-job.js'][299] = 0;
}
_$jscoverage['id-resolution-job.js'].source = ["(function() {","  var CategoryResults, IDResolutionJob, IdResults, ONE_MINUTE, concatMap, defer, difference, fold, funcutils, get, id, intermine, uniqBy, withCB,","    __hasProp = {}.hasOwnProperty,","    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i &lt; l; i++) { if (i in this &amp;&amp; this[i] === item) return i; } return -1; },","    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };","","  funcutils = require('./util');","","  intermine = exports;","","  uniqBy = funcutils.uniqBy, difference = funcutils.difference, defer = funcutils.defer, withCB = funcutils.withCB, id = funcutils.id, get = funcutils.get, fold = funcutils.fold, concatMap = funcutils.concatMap;","","  ONE_MINUTE = 60 * 1000;","","  CategoryResults = (function() {","    var getIssueMatches;","","    function CategoryResults(results) {","      var k, v;","      for (k in results) {","        if (!__hasProp.call(results, k)) continue;","        v = results[k];","        this[k] = v;","      }","    }","","    CategoryResults.prototype.getStats = function(type) {","      if (type != null) {","        return this.stats[type];","      } else {","        return this.stats;","      }","    };","","    getIssueMatches = concatMap(get('matches'));","","    CategoryResults.prototype.getMatches = function(k) {","      var _ref;","      if (k === 'MATCH') {","        return this.matches[k];","      } else {","        return (_ref = getIssueMatches(this.matches[k])) != null ? _ref : [];","      }","    };","","    CategoryResults.prototype.getMatchIds = function(k) {","      if (k != null) {","        return this.getMatches(k).map(get('id'));","      } else {","        return this.allMatchIds();","      }","    };","","    CategoryResults.prototype.goodMatchIds = function() {","      return this.getMatchIds('MATCH');","    };","","    CategoryResults.prototype.allMatchIds = function() {","      var combineIds,","        _this = this;","      combineIds = fold(function(res, issueSet) {","        return res.concat(_this.getMatchIds(issueSet));","      });","      return combineIds(this.goodMatchIds(), ['DUPLICATE', 'WILDCARD', 'TYPE_CONVERTED', 'OTHER']);","    };","","    return CategoryResults;","","  })();","","  IdResults = (function() {","    var flatten, getReasons, isGood, unique;","","    unique = uniqBy(id);","","    flatten = concatMap(id);","","    getReasons = function(match) {","      var k, vals;","      return flatten((function() {","        var _ref, _results;","        _ref = match.identifiers;","        _results = [];","        for (k in _ref) {","          vals = _ref[k];","          _results.push(vals);","        }","        return _results;","      })());","    };","","    isGood = function(match, k) {","      return !(k != null) || __indexOf.call(getReasons(match), k) &gt;= 0;","    };","","    function IdResults(results) {","      var k, v;","      for (k in results) {","        if (!__hasProp.call(results, k)) continue;","        v = results[k];","        this[k] = v;","      }","    }","","    IdResults.prototype.getStats = function(type) {","      switch (type) {","        case 'objects':","          return this.getObjectStats();","        case 'identifiers':","          return this.getIdentifierStats();","        default:","          return {","            objects: this.getObjectStats(),","            identifiers: this.getIdentifierStats()","          };","      }","    };","","    IdResults.prototype.getIdentifierStats = function() {","      var all, allIdents, issues, matchIdents, matches, toIdents;","      toIdents = function(ms) {","        var ident, match;","        return unique(flatten((function() {","          var _i, _len, _results;","          _results = [];","          for (_i = 0, _len = ms.length; _i &lt; _len; _i++) {","            match = ms[_i];","            _results.push((function() {","              var _results1;","              _results1 = [];","              for (ident in match != null ? match.identifiers : void 0) {","                _results1.push(ident);","              }","              return _results1;","            })());","          }","          return _results;","        })()));","      };","      matchIdents = toIdents(this.getMatches('MATCH'));","      allIdents = toIdents(this.getMatches());","      matches = matchIdents.length;","      all = allIdents.length;","      issues = (difference(allIdents, matchIdents)).length;","      return {","        matches: matches,","        all: all,","        issues: issues","      };","    };","","    IdResults.prototype.getObjectStats = function() {","      var all, issues, match, matches;","      matches = this.goodMatchIds().length;","      all = this.allMatchIds().length;","      issues = ((function() {","        var _results;","        _results = [];","        for (id in this) {","          if (!__hasProp.call(this, id)) continue;","          match = this[id];","          if (__indexOf.call(getReasons(match), 'MATCH') &lt; 0) {","            _results.push(id);","          }","        }","        return _results;","      }).call(this)).length;","      return {","        matches: matches,","        all: all,","        issues: issues","      };","    };","","    IdResults.prototype.getMatches = function(k) {","      var match, _results;","      _results = [];","      for (id in this) {","        if (!__hasProp.call(this, id)) continue;","        match = this[id];","        if (isGood(match, k)) {","          _results.push(match);","        }","      }","      return _results;","    };","","    IdResults.prototype.getMatchIds = function(k) {","      var match, _results;","      _results = [];","      for (id in this) {","        if (!__hasProp.call(this, id)) continue;","        match = this[id];","        if (isGood(match, k)) {","          _results.push(id);","        }","      }","      return _results;","    };","","    IdResults.prototype.goodMatchIds = function() {","      return this.getMatchIds('MATCH');","    };","","    IdResults.prototype.allMatchIds = function() {","      return this.getMatchIds();","    };","","    return IdResults;","","  })();","","  IDResolutionJob = (function() {","","    function IDResolutionJob(uid, service) {","      this.uid = uid;","      this.service = service;","      this.del = __bind(this.del, this);","","      this.fetchResults = __bind(this.fetchResults, this);","","      this.fetchErrorMessage = __bind(this.fetchErrorMessage, this);","","      this.fetchStatus = __bind(this.fetchStatus, this);","","    }","","    IDResolutionJob.prototype.fetchStatus = function(cb) {","      return withCB(cb, this.service.get(\"ids/\" + this.uid + \"/status\").then(get('status')));","    };","","    IDResolutionJob.prototype.fetchErrorMessage = function(cb) {","      return withCB(cb, this.service.get(\"ids/\" + this.uid + \"/status\").then(get('message')));","    };","","    IDResolutionJob.prototype.fetchResults = function(cb) {","      var gettingRes, gettingVer;","      gettingRes = this.service.get(\"ids/\" + this.uid + \"/result\").then(get('results'));","      gettingVer = this.service.fetchVersion();","      return gettingVer.then(function(v) {","        return gettingRes.then(function(results) {","          if (v &gt;= 16) {","            return new CategoryResults(results);","          } else {","            return new IdResults(results);","          }","        });","      });","    };","","    IDResolutionJob.prototype.del = function(cb) {","      return this.service.makeRequest('DELETE', \"ids/\" + this.uid, {}, cb);","    };","","    IDResolutionJob.prototype.decay = 50;","","    IDResolutionJob.prototype.poll = function(onSuccess, onError, onProgress) {","      var backOff, notify, promise, reject, resolve, resp, _ref,","        _this = this;","      _ref = defer(), promise = _ref.promise, resolve = _ref.resolve, reject = _ref.reject;","      promise.then(onSuccess, onError);","      notify = onProgress != null ? onProgress : (function() {});","      resp = this.fetchStatus();","      resp.then(null, reject);","      backOff = this.decay;","      this.decay = Math.min(ONE_MINUTE, backOff * 1.25);","      resp.then(function(status) {","        notify(status);","        switch (status) {","          case 'SUCCESS':","            return _this.fetchResults().then(resolve, reject);","          case 'ERROR':","            return _this.fetchErrorMessage().then(reject, reject);","          default:","            return setTimeout((function() {","              return _this.poll(resolve, reject, notify);","            }), backOff);","        }","      });","      return promise;","    };","","    return IDResolutionJob;","","  })();","","  IDResolutionJob.prototype.wait = IDResolutionJob.prototype.poll;","","  IDResolutionJob.create = function(service) {","    return function(uid) {","      return new IDResolutionJob(uid, service);","    };","  };","","  intermine.IDResolutionJob = IDResolutionJob;","","  intermine.CategoryResults = CategoryResults;","","  intermine.IdResults = IdResults;","","}).call(this);"];
_$jscoverage['id-resolution-job.js'][1]++;
(function () {
  _$jscoverage['id-resolution-job.js'][2]++;
  var CategoryResults, IDResolutionJob, IdResults, ONE_MINUTE, concatMap, defer, difference, fold, funcutils, get, id, intermine, uniqBy, withCB, __hasProp = ({}).hasOwnProperty, __indexOf = ([].indexOf || (function (item) {
  _$jscoverage['id-resolution-job.js'][4]++;
  for (var i = 0, l = this.length; (i < l); (i++)) {
    _$jscoverage['id-resolution-job.js'][4]++;
    if (((i in this) && (this[i] === item))) {
      _$jscoverage['id-resolution-job.js'][4]++;
      return i;
    }
}
  _$jscoverage['id-resolution-job.js'][4]++;
  return -1;
})), __bind = (function (fn, me) {
  _$jscoverage['id-resolution-job.js'][5]++;
  return (function () {
  _$jscoverage['id-resolution-job.js'][5]++;
  return fn.apply(me, arguments);
});
});
  _$jscoverage['id-resolution-job.js'][7]++;
  funcutils = require("./util");
  _$jscoverage['id-resolution-job.js'][9]++;
  intermine = exports;
  _$jscoverage['id-resolution-job.js'][11]++;
  ((uniqBy = funcutils.uniqBy), (difference = funcutils.difference), (defer = funcutils.defer), (withCB = funcutils.withCB), (id = funcutils.id), (get = funcutils.get), (fold = funcutils.fold), (concatMap = funcutils.concatMap));
  _$jscoverage['id-resolution-job.js'][13]++;
  ONE_MINUTE = 60000;
  _$jscoverage['id-resolution-job.js'][15]++;
  CategoryResults = (function () {
  _$jscoverage['id-resolution-job.js'][16]++;
  var getIssueMatches;
  _$jscoverage['id-resolution-job.js'][18]++;
  function CategoryResults(results) {
    _$jscoverage['id-resolution-job.js'][19]++;
    var k, v;
    _$jscoverage['id-resolution-job.js'][20]++;
    for (k in results) {
      _$jscoverage['id-resolution-job.js'][21]++;
      if ((! __hasProp.call(results, k))) {
        _$jscoverage['id-resolution-job.js'][21]++;
        continue;
      }
      _$jscoverage['id-resolution-job.js'][22]++;
      v = results[k];
      _$jscoverage['id-resolution-job.js'][23]++;
      this[k] = v;
}
}
  _$jscoverage['id-resolution-job.js'][27]++;
  CategoryResults.prototype.getStats = (function (type) {
  _$jscoverage['id-resolution-job.js'][28]++;
  if ((type != null)) {
    _$jscoverage['id-resolution-job.js'][29]++;
    return this.stats[type];
  }
  else {
    _$jscoverage['id-resolution-job.js'][31]++;
    return this.stats;
  }
});
  _$jscoverage['id-resolution-job.js'][35]++;
  getIssueMatches = concatMap(get("matches"));
  _$jscoverage['id-resolution-job.js'][37]++;
  CategoryResults.prototype.getMatches = (function (k) {
  _$jscoverage['id-resolution-job.js'][38]++;
  var _ref;
  _$jscoverage['id-resolution-job.js'][39]++;
  if ((k === "MATCH")) {
    _$jscoverage['id-resolution-job.js'][40]++;
    return this.matches[k];
  }
  else {
    _$jscoverage['id-resolution-job.js'][42]++;
    return (((_ref = getIssueMatches(this.matches[k])) != null)? _ref: []);
  }
});
  _$jscoverage['id-resolution-job.js'][46]++;
  CategoryResults.prototype.getMatchIds = (function (k) {
  _$jscoverage['id-resolution-job.js'][47]++;
  if ((k != null)) {
    _$jscoverage['id-resolution-job.js'][48]++;
    return this.getMatches(k).map(get("id"));
  }
  else {
    _$jscoverage['id-resolution-job.js'][50]++;
    return this.allMatchIds();
  }
});
  _$jscoverage['id-resolution-job.js'][54]++;
  CategoryResults.prototype.goodMatchIds = (function () {
  _$jscoverage['id-resolution-job.js'][55]++;
  return this.getMatchIds("MATCH");
});
  _$jscoverage['id-resolution-job.js'][58]++;
  CategoryResults.prototype.allMatchIds = (function () {
  _$jscoverage['id-resolution-job.js'][59]++;
  var combineIds, _this = this;
  _$jscoverage['id-resolution-job.js'][61]++;
  combineIds = fold((function (res, issueSet) {
  _$jscoverage['id-resolution-job.js'][62]++;
  return res.concat(_this.getMatchIds(issueSet));
}));
  _$jscoverage['id-resolution-job.js'][64]++;
  return combineIds(this.goodMatchIds(), ["DUPLICATE", "WILDCARD", "TYPE_CONVERTED", "OTHER"]);
});
  _$jscoverage['id-resolution-job.js'][67]++;
  return CategoryResults;
})();
  _$jscoverage['id-resolution-job.js'][71]++;
  IdResults = (function () {
  _$jscoverage['id-resolution-job.js'][72]++;
  var flatten, getReasons, isGood, unique;
  _$jscoverage['id-resolution-job.js'][74]++;
  unique = uniqBy(id);
  _$jscoverage['id-resolution-job.js'][76]++;
  flatten = concatMap(id);
  _$jscoverage['id-resolution-job.js'][78]++;
  getReasons = (function (match) {
  _$jscoverage['id-resolution-job.js'][79]++;
  var k, vals;
  _$jscoverage['id-resolution-job.js'][80]++;
  return flatten((function () {
  _$jscoverage['id-resolution-job.js'][81]++;
  var _ref, _results;
  _$jscoverage['id-resolution-job.js'][82]++;
  _ref = match.identifiers;
  _$jscoverage['id-resolution-job.js'][83]++;
  _results = [];
  _$jscoverage['id-resolution-job.js'][84]++;
  for (k in _ref) {
    _$jscoverage['id-resolution-job.js'][85]++;
    vals = _ref[k];
    _$jscoverage['id-resolution-job.js'][86]++;
    _results.push(vals);
}
  _$jscoverage['id-resolution-job.js'][88]++;
  return _results;
})());
});
  _$jscoverage['id-resolution-job.js'][92]++;
  isGood = (function (match, k) {
  _$jscoverage['id-resolution-job.js'][93]++;
  return ((! (k != null)) || (__indexOf.call(getReasons(match), k) >= 0));
});
  _$jscoverage['id-resolution-job.js'][96]++;
  function IdResults(results) {
    _$jscoverage['id-resolution-job.js'][97]++;
    var k, v;
    _$jscoverage['id-resolution-job.js'][98]++;
    for (k in results) {
      _$jscoverage['id-resolution-job.js'][99]++;
      if ((! __hasProp.call(results, k))) {
        _$jscoverage['id-resolution-job.js'][99]++;
        continue;
      }
      _$jscoverage['id-resolution-job.js'][100]++;
      v = results[k];
      _$jscoverage['id-resolution-job.js'][101]++;
      this[k] = v;
}
}
  _$jscoverage['id-resolution-job.js'][105]++;
  IdResults.prototype.getStats = (function (type) {
  _$jscoverage['id-resolution-job.js'][106]++;
  switch (type) {
  case "objects":
    _$jscoverage['id-resolution-job.js'][108]++;
    return this.getObjectStats();
  case "identifiers":
    _$jscoverage['id-resolution-job.js'][110]++;
    return this.getIdentifierStats();
  default:
    _$jscoverage['id-resolution-job.js'][112]++;
    return ({objects: this.getObjectStats(), identifiers: this.getIdentifierStats()});
  }
});
  _$jscoverage['id-resolution-job.js'][119]++;
  IdResults.prototype.getIdentifierStats = (function () {
  _$jscoverage['id-resolution-job.js'][120]++;
  var all, allIdents, issues, matchIdents, matches, toIdents;
  _$jscoverage['id-resolution-job.js'][121]++;
  toIdents = (function (ms) {
  _$jscoverage['id-resolution-job.js'][122]++;
  var ident, match;
  _$jscoverage['id-resolution-job.js'][123]++;
  return unique(flatten((function () {
  _$jscoverage['id-resolution-job.js'][124]++;
  var _i, _len, _results;
  _$jscoverage['id-resolution-job.js'][125]++;
  _results = [];
  _$jscoverage['id-resolution-job.js'][126]++;
  for (((_i = 0), (_len = ms.length)); (_i < _len); (_i++)) {
    _$jscoverage['id-resolution-job.js'][127]++;
    match = ms[_i];
    _$jscoverage['id-resolution-job.js'][128]++;
    _results.push((function () {
  _$jscoverage['id-resolution-job.js'][129]++;
  var _results1;
  _$jscoverage['id-resolution-job.js'][130]++;
  _results1 = [];
  _$jscoverage['id-resolution-job.js'][131]++;
  for (ident in ((match != null)? match.identifiers: (void 0))) {
    _$jscoverage['id-resolution-job.js'][132]++;
    _results1.push(ident);
}
  _$jscoverage['id-resolution-job.js'][134]++;
  return _results1;
})());
}
  _$jscoverage['id-resolution-job.js'][137]++;
  return _results;
})()));
});
  _$jscoverage['id-resolution-job.js'][140]++;
  matchIdents = toIdents(this.getMatches("MATCH"));
  _$jscoverage['id-resolution-job.js'][141]++;
  allIdents = toIdents(this.getMatches());
  _$jscoverage['id-resolution-job.js'][142]++;
  matches = matchIdents.length;
  _$jscoverage['id-resolution-job.js'][143]++;
  all = allIdents.length;
  _$jscoverage['id-resolution-job.js'][144]++;
  issues = difference(allIdents, matchIdents).length;
  _$jscoverage['id-resolution-job.js'][145]++;
  return ({matches: matches, all: all, issues: issues});
});
  _$jscoverage['id-resolution-job.js'][152]++;
  IdResults.prototype.getObjectStats = (function () {
  _$jscoverage['id-resolution-job.js'][153]++;
  var all, issues, match, matches;
  _$jscoverage['id-resolution-job.js'][154]++;
  matches = this.goodMatchIds().length;
  _$jscoverage['id-resolution-job.js'][155]++;
  all = this.allMatchIds().length;
  _$jscoverage['id-resolution-job.js'][156]++;
  issues = (function () {
  _$jscoverage['id-resolution-job.js'][157]++;
  var _results;
  _$jscoverage['id-resolution-job.js'][158]++;
  _results = [];
  _$jscoverage['id-resolution-job.js'][159]++;
  for (id in this) {
    _$jscoverage['id-resolution-job.js'][160]++;
    if ((! __hasProp.call(this, id))) {
      _$jscoverage['id-resolution-job.js'][160]++;
      continue;
    }
    _$jscoverage['id-resolution-job.js'][161]++;
    match = this[id];
    _$jscoverage['id-resolution-job.js'][162]++;
    if ((__indexOf.call(getReasons(match), "MATCH") < 0)) {
      _$jscoverage['id-resolution-job.js'][163]++;
      _results.push(id);
    }
}
  _$jscoverage['id-resolution-job.js'][166]++;
  return _results;
}).call(this).length;
  _$jscoverage['id-resolution-job.js'][168]++;
  return ({matches: matches, all: all, issues: issues});
});
  _$jscoverage['id-resolution-job.js'][175]++;
  IdResults.prototype.getMatches = (function (k) {
  _$jscoverage['id-resolution-job.js'][176]++;
  var match, _results;
  _$jscoverage['id-resolution-job.js'][177]++;
  _results = [];
  _$jscoverage['id-resolution-job.js'][178]++;
  for (id in this) {
    _$jscoverage['id-resolution-job.js'][179]++;
    if ((! __hasProp.call(this, id))) {
      _$jscoverage['id-resolution-job.js'][179]++;
      continue;
    }
    _$jscoverage['id-resolution-job.js'][180]++;
    match = this[id];
    _$jscoverage['id-resolution-job.js'][181]++;
    if (isGood(match, k)) {
      _$jscoverage['id-resolution-job.js'][182]++;
      _results.push(match);
    }
}
  _$jscoverage['id-resolution-job.js'][185]++;
  return _results;
});
  _$jscoverage['id-resolution-job.js'][188]++;
  IdResults.prototype.getMatchIds = (function (k) {
  _$jscoverage['id-resolution-job.js'][189]++;
  var match, _results;
  _$jscoverage['id-resolution-job.js'][190]++;
  _results = [];
  _$jscoverage['id-resolution-job.js'][191]++;
  for (id in this) {
    _$jscoverage['id-resolution-job.js'][192]++;
    if ((! __hasProp.call(this, id))) {
      _$jscoverage['id-resolution-job.js'][192]++;
      continue;
    }
    _$jscoverage['id-resolution-job.js'][193]++;
    match = this[id];
    _$jscoverage['id-resolution-job.js'][194]++;
    if (isGood(match, k)) {
      _$jscoverage['id-resolution-job.js'][195]++;
      _results.push(id);
    }
}
  _$jscoverage['id-resolution-job.js'][198]++;
  return _results;
});
  _$jscoverage['id-resolution-job.js'][201]++;
  IdResults.prototype.goodMatchIds = (function () {
  _$jscoverage['id-resolution-job.js'][202]++;
  return this.getMatchIds("MATCH");
});
  _$jscoverage['id-resolution-job.js'][205]++;
  IdResults.prototype.allMatchIds = (function () {
  _$jscoverage['id-resolution-job.js'][206]++;
  return this.getMatchIds();
});
  _$jscoverage['id-resolution-job.js'][209]++;
  return IdResults;
})();
  _$jscoverage['id-resolution-job.js'][213]++;
  IDResolutionJob = (function () {
  _$jscoverage['id-resolution-job.js'][215]++;
  function IDResolutionJob(uid, service) {
    _$jscoverage['id-resolution-job.js'][216]++;
    this.uid = uid;
    _$jscoverage['id-resolution-job.js'][217]++;
    this.service = service;
    _$jscoverage['id-resolution-job.js'][218]++;
    this.del = __bind(this.del, this);
    _$jscoverage['id-resolution-job.js'][220]++;
    this.fetchResults = __bind(this.fetchResults, this);
    _$jscoverage['id-resolution-job.js'][222]++;
    this.fetchErrorMessage = __bind(this.fetchErrorMessage, this);
    _$jscoverage['id-resolution-job.js'][224]++;
    this.fetchStatus = __bind(this.fetchStatus, this);
}
  _$jscoverage['id-resolution-job.js'][228]++;
  IDResolutionJob.prototype.fetchStatus = (function (cb) {
  _$jscoverage['id-resolution-job.js'][229]++;
  return withCB(cb, this.service.get(("ids/" + this.uid + "/status")).then(get("status")));
});
  _$jscoverage['id-resolution-job.js'][232]++;
  IDResolutionJob.prototype.fetchErrorMessage = (function (cb) {
  _$jscoverage['id-resolution-job.js'][233]++;
  return withCB(cb, this.service.get(("ids/" + this.uid + "/status")).then(get("message")));
});
  _$jscoverage['id-resolution-job.js'][236]++;
  IDResolutionJob.prototype.fetchResults = (function (cb) {
  _$jscoverage['id-resolution-job.js'][237]++;
  var gettingRes, gettingVer;
  _$jscoverage['id-resolution-job.js'][238]++;
  gettingRes = this.service.get(("ids/" + this.uid + "/result")).then(get("results"));
  _$jscoverage['id-resolution-job.js'][239]++;
  gettingVer = this.service.fetchVersion();
  _$jscoverage['id-resolution-job.js'][240]++;
  return gettingVer.then((function (v) {
  _$jscoverage['id-resolution-job.js'][241]++;
  return gettingRes.then((function (results) {
  _$jscoverage['id-resolution-job.js'][242]++;
  if ((v >= 16)) {
    _$jscoverage['id-resolution-job.js'][243]++;
    return new CategoryResults(results);
  }
  else {
    _$jscoverage['id-resolution-job.js'][245]++;
    return new IdResults(results);
  }
}));
}));
});
  _$jscoverage['id-resolution-job.js'][251]++;
  IDResolutionJob.prototype.del = (function (cb) {
  _$jscoverage['id-resolution-job.js'][252]++;
  return this.service.makeRequest("DELETE", ("ids/" + this.uid), {}, cb);
});
  _$jscoverage['id-resolution-job.js'][255]++;
  IDResolutionJob.prototype.decay = 50;
  _$jscoverage['id-resolution-job.js'][257]++;
  IDResolutionJob.prototype.poll = (function (onSuccess, onError, onProgress) {
  _$jscoverage['id-resolution-job.js'][258]++;
  var backOff, notify, promise, reject, resolve, resp, _ref, _this = this;
  _$jscoverage['id-resolution-job.js'][260]++;
  ((_ref = defer()), (promise = _ref.promise), (resolve = _ref.resolve), (reject = _ref.reject));
  _$jscoverage['id-resolution-job.js'][261]++;
  promise.then(onSuccess, onError);
  _$jscoverage['id-resolution-job.js'][262]++;
  notify = ((onProgress != null)? onProgress: (function () {
}));
  _$jscoverage['id-resolution-job.js'][263]++;
  resp = this.fetchStatus();
  _$jscoverage['id-resolution-job.js'][264]++;
  resp.then(null, reject);
  _$jscoverage['id-resolution-job.js'][265]++;
  backOff = this.decay;
  _$jscoverage['id-resolution-job.js'][266]++;
  this.decay = Math.min(ONE_MINUTE, (backOff * 1.25));
  _$jscoverage['id-resolution-job.js'][267]++;
  resp.then((function (status) {
  _$jscoverage['id-resolution-job.js'][268]++;
  notify(status);
  _$jscoverage['id-resolution-job.js'][269]++;
  switch (status) {
  case "SUCCESS":
    _$jscoverage['id-resolution-job.js'][271]++;
    return _this.fetchResults().then(resolve, reject);
  case "ERROR":
    _$jscoverage['id-resolution-job.js'][273]++;
    return _this.fetchErrorMessage().then(reject, reject);
  default:
    _$jscoverage['id-resolution-job.js'][275]++;
    return setTimeout((function () {
  _$jscoverage['id-resolution-job.js'][276]++;
  return _this.poll(resolve, reject, notify);
}), backOff);
  }
}));
  _$jscoverage['id-resolution-job.js'][280]++;
  return promise;
});
  _$jscoverage['id-resolution-job.js'][283]++;
  return IDResolutionJob;
})();
  _$jscoverage['id-resolution-job.js'][287]++;
  IDResolutionJob.prototype.wait = IDResolutionJob.prototype.poll;
  _$jscoverage['id-resolution-job.js'][289]++;
  IDResolutionJob.create = (function (service) {
  _$jscoverage['id-resolution-job.js'][290]++;
  return (function (uid) {
  _$jscoverage['id-resolution-job.js'][291]++;
  return new IDResolutionJob(uid, service);
});
});
  _$jscoverage['id-resolution-job.js'][295]++;
  intermine.IDResolutionJob = IDResolutionJob;
  _$jscoverage['id-resolution-job.js'][297]++;
  intermine.CategoryResults = CategoryResults;
  _$jscoverage['id-resolution-job.js'][299]++;
  intermine.IdResults = IdResults;
}).call(this);

},{"./util":11}],3:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['lists.js']) {
  _$jscoverage['lists.js'] = [];
  _$jscoverage['lists.js'][1] = 0;
  _$jscoverage['lists.js'][2] = 0;
  _$jscoverage['lists.js'][3] = 0;
  _$jscoverage['lists.js'][5] = 0;
  _$jscoverage['lists.js'][7] = 0;
  _$jscoverage['lists.js'][9] = 0;
  _$jscoverage['lists.js'][11] = 0;
  _$jscoverage['lists.js'][13] = 0;
  _$jscoverage['lists.js'][15] = 0;
  _$jscoverage['lists.js'][17] = 0;
  _$jscoverage['lists.js'][19] = 0;
  _$jscoverage['lists.js'][20] = 0;
  _$jscoverage['lists.js'][23] = 0;
  _$jscoverage['lists.js'][24] = 0;
  _$jscoverage['lists.js'][27] = 0;
  _$jscoverage['lists.js'][28] = 0;
  _$jscoverage['lists.js'][30] = 0;
  _$jscoverage['lists.js'][31] = 0;
  _$jscoverage['lists.js'][32] = 0;
  _$jscoverage['lists.js'][33] = 0;
  _$jscoverage['lists.js'][35] = 0;
  _$jscoverage['lists.js'][37] = 0;
  _$jscoverage['lists.js'][38] = 0;
  _$jscoverage['lists.js'][39] = 0;
  _$jscoverage['lists.js'][40] = 0;
  _$jscoverage['lists.js'][42] = 0;
  _$jscoverage['lists.js'][43] = 0;
  _$jscoverage['lists.js'][46] = 0;
  _$jscoverage['lists.js'][47] = 0;
  _$jscoverage['lists.js'][50] = 0;
  _$jscoverage['lists.js'][51] = 0;
  _$jscoverage['lists.js'][52] = 0;
  _$jscoverage['lists.js'][54] = 0;
  _$jscoverage['lists.js'][61] = 0;
  _$jscoverage['lists.js'][62] = 0;
  _$jscoverage['lists.js'][67] = 0;
  _$jscoverage['lists.js'][68] = 0;
  _$jscoverage['lists.js'][69] = 0;
  _$jscoverage['lists.js'][70] = 0;
  _$jscoverage['lists.js'][73] = 0;
  _$jscoverage['lists.js'][74] = 0;
  _$jscoverage['lists.js'][75] = 0;
  _$jscoverage['lists.js'][77] = 0;
  _$jscoverage['lists.js'][78] = 0;
  _$jscoverage['lists.js'][81] = 0;
  _$jscoverage['lists.js'][82] = 0;
  _$jscoverage['lists.js'][87] = 0;
  _$jscoverage['lists.js'][88] = 0;
  _$jscoverage['lists.js'][89] = 0;
  _$jscoverage['lists.js'][93] = 0;
  _$jscoverage['lists.js'][96] = 0;
  _$jscoverage['lists.js'][97] = 0;
  _$jscoverage['lists.js'][98] = 0;
  _$jscoverage['lists.js'][102] = 0;
  _$jscoverage['lists.js'][105] = 0;
  _$jscoverage['lists.js'][106] = 0;
  _$jscoverage['lists.js'][109] = 0;
  _$jscoverage['lists.js'][110] = 0;
  _$jscoverage['lists.js'][112] = 0;
  _$jscoverage['lists.js'][116] = 0;
  _$jscoverage['lists.js'][117] = 0;
  _$jscoverage['lists.js'][121] = 0;
  _$jscoverage['lists.js'][122] = 0;
  _$jscoverage['lists.js'][124] = 0;
  _$jscoverage['lists.js'][125] = 0;
  _$jscoverage['lists.js'][127] = 0;
  _$jscoverage['lists.js'][128] = 0;
  _$jscoverage['lists.js'][130] = 0;
  _$jscoverage['lists.js'][131] = 0;
  _$jscoverage['lists.js'][133] = 0;
  _$jscoverage['lists.js'][134] = 0;
  _$jscoverage['lists.js'][138] = 0;
  _$jscoverage['lists.js'][139] = 0;
  _$jscoverage['lists.js'][140] = 0;
  _$jscoverage['lists.js'][141] = 0;
  _$jscoverage['lists.js'][142] = 0;
  _$jscoverage['lists.js'][143] = 0;
  _$jscoverage['lists.js'][144] = 0;
  _$jscoverage['lists.js'][145] = 0;
  _$jscoverage['lists.js'][147] = 0;
  _$jscoverage['lists.js'][155] = 0;
  _$jscoverage['lists.js'][156] = 0;
  _$jscoverage['lists.js'][161] = 0;
  _$jscoverage['lists.js'][162] = 0;
  _$jscoverage['lists.js'][168] = 0;
  _$jscoverage['lists.js'][169] = 0;
  _$jscoverage['lists.js'][170] = 0;
  _$jscoverage['lists.js'][172] = 0;
  _$jscoverage['lists.js'][173] = 0;
  _$jscoverage['lists.js'][175] = 0;
  _$jscoverage['lists.js'][182] = 0;
  _$jscoverage['lists.js'][186] = 0;
}
_$jscoverage['lists.js'].source = ["(function() {","  var INVITES, List, REQUIRES_VERSION, SHARES, TAGS_PATH, dejoin, get, getFolderName, intermine, invoke, isFolder, merge, set, utils, withCB,","    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },","    __hasProp = {}.hasOwnProperty,","    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i &lt; l; i++) { if (i in this &amp;&amp; this[i] === item) return i; } return -1; };","","  utils = require('./util');","","  intermine = exports;","","  merge = utils.merge, withCB = utils.withCB, get = utils.get, invoke = utils.invoke, REQUIRES_VERSION = utils.REQUIRES_VERSION, set = utils.set, dejoin = utils.dejoin;","","  TAGS_PATH = \"list/tags\";","","  SHARES = \"lists/shares\";","","  INVITES = 'lists/invitations';","","  isFolder = function(t) {","    return t.substr(0, t.indexOf(':')) === '__folder__';","  };","","  getFolderName = function(t) {","    return t.substr(t.indexOf(':') + 1);","  };","","  List = (function() {","    var getTags;","","    function List(properties, service) {","      var k, v;","      this.service = service;","      this._updateTags = __bind(this._updateTags, this);","","      this.hasTag = __bind(this.hasTag, this);","","      for (k in properties) {","        if (!__hasProp.call(properties, k)) continue;","        v = properties[k];","        this[k] = v;","      }","      this.dateCreated = (this.dateCreated != null) ? new Date(this.dateCreated) : null;","      this.folders = this.tags.filter(isFolder).map(getFolderName);","    }","","    List.prototype.hasTag = function(t) {","      return __indexOf.call(this.tags, t) &gt;= 0;","    };","","    List.prototype.query = function(view) {","      if (view == null) {","        view = ['*'];","      }","      return this.service.query({","        select: view,","        from: this.type,","        where: [[this.type, 'IN', this.name]]","      });","    };","","    List.prototype.del = function(cb) {","      return this.service.makeRequest('DELETE', 'lists', {","        name: this.name","      }, cb);","    };","","    getTags = function(_arg) {","      var tags;","      tags = _arg.tags;","      return tags;","    };","","    List.prototype._updateTags = function(err, tags) {","      if (err != null) {","        return;","      }","      this.tags = tags.slice();","      return this.folders = this.tags.filter(isFolder).map(getFolderName);","    };","","    List.prototype.fetchTags = function(cb) {","      return withCB(this._updateTags, cb, this.service.makeRequest('GET', 'list/tags', {","        name: this.name","      }).then(getTags));","    };","","    List.prototype.addTags = function(tags, cb) {","      var req;","      req = {","        name: this.name,","        tags: tags","      };","      return withCB(this._updateTags, cb, this.service.makeRequest('POST', 'list/tags', req).then(getTags));","    };","","    List.prototype.removeTags = function(tags, cb) {","      var req;","      req = {","        name: this.name,","        tags: tags","      };","      return withCB(this._updateTags, cb, this.service.makeRequest('DELETE', 'list/tags', req).then(getTags));","    };","","    List.prototype.contents = function(cb) {","      return withCB(cb, this.query().then(dejoin).then(invoke('records')));","    };","","    List.prototype.rename = function(newName, cb) {","      var req,","        _this = this;","      req = {","        oldname: this.name,","        newname: newName","      };","      return withCB(cb, this.service.post('lists/rename', req).then(get('listName')).then(function(n) {","        return _this.name = n;","      }).then(this.service.fetchList));","    };","","    List.prototype.copy = function(opts, cb) {","      var baseName, name, query, tags, _ref, _ref1, _ref2,","        _this = this;","      if (opts == null) {","        opts = {};","      }","      if (cb == null) {","        cb = (function() {});","      }","      if (arguments.length === 1 &amp;&amp; utils.isFunction(opts)) {","        _ref = [{}, opts], opts = _ref[0], cb = _ref[1];","      }","      if (typeof opts === 'string') {","        opts = {","          name: opts","        };","      }","      name = baseName = (_ref1 = opts.name) != null ? _ref1 : \"\" + this.name + \"_copy\";","      tags = this.tags.concat((_ref2 = opts.tags) != null ? _ref2 : []);","      query = this.query(['id']);","      return withCB(cb, this.service.fetchLists().then(invoke('map', get('name'))).then(function(names) {","        var c;","        c = 1;","        while (__indexOf.call(names, name) &gt;= 0) {","          name = \"\" + baseName + \"-\" + (c++);","        }","        return query.then(invoke('saveAsList', {","          name: name,","          tags: tags,","          description: _this.description","        }));","      }));","    };","","    List.prototype.enrichment = function(opts, cb) {","      return this.service.enrichment(merge({","        list: this.name","      }, opts), cb);","    };","","    List.prototype.shareWithUser = function(recipient, cb) {","      return withCB(cb, this.service.post(SHARES, {","        'list': this.name,","        'with': recipient","      }));","    };","","    List.prototype.inviteUserToShare = function(recipient, notify, cb) {","      if (notify == null) {","        notify = true;","      }","      if (cb == null) {","        cb = (function() {});","      }","      return withCB(cb, this.service.post(INVITES, {","        list: this.name,","        to: recipient,","        notify: !!notify","      }));","    };","","    return List;","","  })();","","  intermine.List = List;","","}).call(this);"];
_$jscoverage['lists.js'][1]++;
(function () {
  _$jscoverage['lists.js'][2]++;
  var INVITES, List, REQUIRES_VERSION, SHARES, TAGS_PATH, dejoin, get, getFolderName, intermine, invoke, isFolder, merge, set, utils, withCB, __bind = (function (fn, me) {
  _$jscoverage['lists.js'][3]++;
  return (function () {
  _$jscoverage['lists.js'][3]++;
  return fn.apply(me, arguments);
});
}), __hasProp = ({}).hasOwnProperty, __indexOf = ([].indexOf || (function (item) {
  _$jscoverage['lists.js'][5]++;
  for (var i = 0, l = this.length; (i < l); (i++)) {
    _$jscoverage['lists.js'][5]++;
    if (((i in this) && (this[i] === item))) {
      _$jscoverage['lists.js'][5]++;
      return i;
    }
}
  _$jscoverage['lists.js'][5]++;
  return -1;
}));
  _$jscoverage['lists.js'][7]++;
  utils = require("./util");
  _$jscoverage['lists.js'][9]++;
  intermine = exports;
  _$jscoverage['lists.js'][11]++;
  ((merge = utils.merge), (withCB = utils.withCB), (get = utils.get), (invoke = utils.invoke), (REQUIRES_VERSION = utils.REQUIRES_VERSION), (set = utils.set), (dejoin = utils.dejoin));
  _$jscoverage['lists.js'][13]++;
  TAGS_PATH = "list/tags";
  _$jscoverage['lists.js'][15]++;
  SHARES = "lists/shares";
  _$jscoverage['lists.js'][17]++;
  INVITES = "lists/invitations";
  _$jscoverage['lists.js'][19]++;
  isFolder = (function (t) {
  _$jscoverage['lists.js'][20]++;
  return (t.substr(0, t.indexOf(":")) === "__folder__");
});
  _$jscoverage['lists.js'][23]++;
  getFolderName = (function (t) {
  _$jscoverage['lists.js'][24]++;
  return t.substr((t.indexOf(":") + 1));
});
  _$jscoverage['lists.js'][27]++;
  List = (function () {
  _$jscoverage['lists.js'][28]++;
  var getTags;
  _$jscoverage['lists.js'][30]++;
  function List(properties, service) {
    _$jscoverage['lists.js'][31]++;
    var k, v;
    _$jscoverage['lists.js'][32]++;
    this.service = service;
    _$jscoverage['lists.js'][33]++;
    this._updateTags = __bind(this._updateTags, this);
    _$jscoverage['lists.js'][35]++;
    this.hasTag = __bind(this.hasTag, this);
    _$jscoverage['lists.js'][37]++;
    for (k in properties) {
      _$jscoverage['lists.js'][38]++;
      if ((! __hasProp.call(properties, k))) {
        _$jscoverage['lists.js'][38]++;
        continue;
      }
      _$jscoverage['lists.js'][39]++;
      v = properties[k];
      _$jscoverage['lists.js'][40]++;
      this[k] = v;
}
    _$jscoverage['lists.js'][42]++;
    this.dateCreated = ((this.dateCreated != null)? new Date(this.dateCreated): null);
    _$jscoverage['lists.js'][43]++;
    this.folders = this.tags.filter(isFolder).map(getFolderName);
}
  _$jscoverage['lists.js'][46]++;
  List.prototype.hasTag = (function (t) {
  _$jscoverage['lists.js'][47]++;
  return (__indexOf.call(this.tags, t) >= 0);
});
  _$jscoverage['lists.js'][50]++;
  List.prototype.query = (function (view) {
  _$jscoverage['lists.js'][51]++;
  if ((view == null)) {
    _$jscoverage['lists.js'][52]++;
    view = ["*"];
  }
  _$jscoverage['lists.js'][54]++;
  return this.service.query({select: view, from: this.type, where: [[this.type, "IN", this.name]]});
});
  _$jscoverage['lists.js'][61]++;
  List.prototype.del = (function (cb) {
  _$jscoverage['lists.js'][62]++;
  return this.service.makeRequest("DELETE", "lists", {name: this.name}, cb);
});
  _$jscoverage['lists.js'][67]++;
  getTags = (function (_arg) {
  _$jscoverage['lists.js'][68]++;
  var tags;
  _$jscoverage['lists.js'][69]++;
  tags = _arg.tags;
  _$jscoverage['lists.js'][70]++;
  return tags;
});
  _$jscoverage['lists.js'][73]++;
  List.prototype._updateTags = (function (err, tags) {
  _$jscoverage['lists.js'][74]++;
  if ((err != null)) {
    _$jscoverage['lists.js'][75]++;
    return;
  }
  _$jscoverage['lists.js'][77]++;
  this.tags = tags.slice();
  _$jscoverage['lists.js'][78]++;
  return (this.folders = this.tags.filter(isFolder).map(getFolderName));
});
  _$jscoverage['lists.js'][81]++;
  List.prototype.fetchTags = (function (cb) {
  _$jscoverage['lists.js'][82]++;
  return withCB(this._updateTags, cb, this.service.makeRequest("GET", "list/tags", {name: this.name}).then(getTags));
});
  _$jscoverage['lists.js'][87]++;
  List.prototype.addTags = (function (tags, cb) {
  _$jscoverage['lists.js'][88]++;
  var req;
  _$jscoverage['lists.js'][89]++;
  req = {name: this.name, tags: tags};
  _$jscoverage['lists.js'][93]++;
  return withCB(this._updateTags, cb, this.service.makeRequest("POST", "list/tags", req).then(getTags));
});
  _$jscoverage['lists.js'][96]++;
  List.prototype.removeTags = (function (tags, cb) {
  _$jscoverage['lists.js'][97]++;
  var req;
  _$jscoverage['lists.js'][98]++;
  req = {name: this.name, tags: tags};
  _$jscoverage['lists.js'][102]++;
  return withCB(this._updateTags, cb, this.service.makeRequest("DELETE", "list/tags", req).then(getTags));
});
  _$jscoverage['lists.js'][105]++;
  List.prototype.contents = (function (cb) {
  _$jscoverage['lists.js'][106]++;
  return withCB(cb, this.query().then(dejoin).then(invoke("records")));
});
  _$jscoverage['lists.js'][109]++;
  List.prototype.rename = (function (newName, cb) {
  _$jscoverage['lists.js'][110]++;
  var req, _this = this;
  _$jscoverage['lists.js'][112]++;
  req = {oldname: this.name, newname: newName};
  _$jscoverage['lists.js'][116]++;
  return withCB(cb, this.service.post("lists/rename", req).then(get("listName")).then((function (n) {
  _$jscoverage['lists.js'][117]++;
  return (_this.name = n);
})).then(this.service.fetchList));
});
  _$jscoverage['lists.js'][121]++;
  List.prototype.copy = (function (opts, cb) {
  _$jscoverage['lists.js'][122]++;
  var baseName, name, query, tags, _ref, _ref1, _ref2, _this = this;
  _$jscoverage['lists.js'][124]++;
  if ((opts == null)) {
    _$jscoverage['lists.js'][125]++;
    opts = {};
  }
  _$jscoverage['lists.js'][127]++;
  if ((cb == null)) {
    _$jscoverage['lists.js'][128]++;
    cb = (function () {
});
  }
  _$jscoverage['lists.js'][130]++;
  if (((arguments.length === 1) && utils.isFunction(opts))) {
    _$jscoverage['lists.js'][131]++;
    ((_ref = [{}, opts]), (opts = _ref[0]), (cb = _ref[1]));
  }
  _$jscoverage['lists.js'][133]++;
  if (((typeof opts) === "string")) {
    _$jscoverage['lists.js'][134]++;
    opts = {name: opts};
  }
  _$jscoverage['lists.js'][138]++;
  name = (baseName = (((_ref1 = opts.name) != null)? _ref1: ("" + this.name + "_copy")));
  _$jscoverage['lists.js'][139]++;
  tags = this.tags.concat((((_ref2 = opts.tags) != null)? _ref2: []));
  _$jscoverage['lists.js'][140]++;
  query = this.query(["id"]);
  _$jscoverage['lists.js'][141]++;
  return withCB(cb, this.service.fetchLists().then(invoke("map", get("name"))).then((function (names) {
  _$jscoverage['lists.js'][142]++;
  var c;
  _$jscoverage['lists.js'][143]++;
  c = 1;
  _$jscoverage['lists.js'][144]++;
  while ((__indexOf.call(names, name) >= 0)) {
    _$jscoverage['lists.js'][145]++;
    name = ("" + baseName + "-" + (c++));
}
  _$jscoverage['lists.js'][147]++;
  return query.then(invoke("saveAsList", {name: name, tags: tags, description: _this.description}));
})));
});
  _$jscoverage['lists.js'][155]++;
  List.prototype.enrichment = (function (opts, cb) {
  _$jscoverage['lists.js'][156]++;
  return this.service.enrichment(merge({list: this.name}, opts), cb);
});
  _$jscoverage['lists.js'][161]++;
  List.prototype.shareWithUser = (function (recipient, cb) {
  _$jscoverage['lists.js'][162]++;
  return withCB(cb, this.service.post(SHARES, {"list": this.name, "with": recipient}));
});
  _$jscoverage['lists.js'][168]++;
  List.prototype.inviteUserToShare = (function (recipient, notify, cb) {
  _$jscoverage['lists.js'][169]++;
  if ((notify == null)) {
    _$jscoverage['lists.js'][170]++;
    notify = true;
  }
  _$jscoverage['lists.js'][172]++;
  if ((cb == null)) {
    _$jscoverage['lists.js'][173]++;
    cb = (function () {
});
  }
  _$jscoverage['lists.js'][175]++;
  return withCB(cb, this.service.post(INVITES, {list: this.name, to: recipient, notify: (! (! notify))}));
});
  _$jscoverage['lists.js'][182]++;
  return List;
})();
  _$jscoverage['lists.js'][186]++;
  intermine.List = List;
}).call(this);

},{"./util":11}],4:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['model.js']) {
  _$jscoverage['model.js'] = [];
  _$jscoverage['model.js'][1] = 0;
  _$jscoverage['model.js'][2] = 0;
  _$jscoverage['model.js'][3] = 0;
  _$jscoverage['model.js'][4] = 0;
  _$jscoverage['model.js'][6] = 0;
  _$jscoverage['model.js'][8] = 0;
  _$jscoverage['model.js'][10] = 0;
  _$jscoverage['model.js'][12] = 0;
  _$jscoverage['model.js'][14] = 0;
  _$jscoverage['model.js'][15] = 0;
  _$jscoverage['model.js'][18] = 0;
  _$jscoverage['model.js'][20] = 0;
  _$jscoverage['model.js'][21] = 0;
  _$jscoverage['model.js'][22] = 0;
  _$jscoverage['model.js'][23] = 0;
  _$jscoverage['model.js'][25] = 0;
  _$jscoverage['model.js'][27] = 0;
  _$jscoverage['model.js'][29] = 0;
  _$jscoverage['model.js'][31] = 0;
  _$jscoverage['model.js'][33] = 0;
  _$jscoverage['model.js'][36] = 0;
  _$jscoverage['model.js'][37] = 0;
  _$jscoverage['model.js'][40] = 0;
  _$jscoverage['model.js'][41] = 0;
  _$jscoverage['model.js'][42] = 0;
  _$jscoverage['model.js'][43] = 0;
  _$jscoverage['model.js'][44] = 0;
  _$jscoverage['model.js'][46] = 0;
  _$jscoverage['model.js'][47] = 0;
  _$jscoverage['model.js'][48] = 0;
  _$jscoverage['model.js'][49] = 0;
  _$jscoverage['model.js'][50] = 0;
  _$jscoverage['model.js'][51] = 0;
  _$jscoverage['model.js'][54] = 0;
  _$jscoverage['model.js'][57] = 0;
  _$jscoverage['model.js'][58] = 0;
  _$jscoverage['model.js'][59] = 0;
  _$jscoverage['model.js'][60] = 0;
  _$jscoverage['model.js'][61] = 0;
  _$jscoverage['model.js'][63] = 0;
  _$jscoverage['model.js'][64] = 0;
  _$jscoverage['model.js'][65] = 0;
  _$jscoverage['model.js'][66] = 0;
  _$jscoverage['model.js'][68] = 0;
  _$jscoverage['model.js'][71] = 0;
  _$jscoverage['model.js'][72] = 0;
  _$jscoverage['model.js'][73] = 0;
  _$jscoverage['model.js'][74] = 0;
  _$jscoverage['model.js'][76] = 0;
  _$jscoverage['model.js'][77] = 0;
  _$jscoverage['model.js'][79] = 0;
  _$jscoverage['model.js'][80] = 0;
  _$jscoverage['model.js'][81] = 0;
  _$jscoverage['model.js'][83] = 0;
  _$jscoverage['model.js'][84] = 0;
  _$jscoverage['model.js'][85] = 0;
  _$jscoverage['model.js'][87] = 0;
  _$jscoverage['model.js'][88] = 0;
  _$jscoverage['model.js'][90] = 0;
  _$jscoverage['model.js'][93] = 0;
  _$jscoverage['model.js'][94] = 0;
  _$jscoverage['model.js'][95] = 0;
  _$jscoverage['model.js'][97] = 0;
  _$jscoverage['model.js'][100] = 0;
  _$jscoverage['model.js'][104] = 0;
  _$jscoverage['model.js'][106] = 0;
  _$jscoverage['model.js'][108] = 0;
  _$jscoverage['model.js'][109] = 0;
  _$jscoverage['model.js'][110] = 0;
  _$jscoverage['model.js'][112] = 0;
  _$jscoverage['model.js'][116] = 0;
  _$jscoverage['model.js'][118] = 0;
  _$jscoverage['model.js'][120] = 0;
  _$jscoverage['model.js'][122] = 0;
  _$jscoverage['model.js'][124] = 0;
}
_$jscoverage['model.js'].source = ["(function() {","  var Model, PathInfo, Table, error, find, flatten, intermine, liftToTable, omap, _ref,","    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },","    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i &lt; l; i++) { if (i in this &amp;&amp; this[i] === item) return i; } return -1; };","","  Table = require('./table').Table;","","  PathInfo = require('./path').PathInfo;","","  _ref = require('./util'), flatten = _ref.flatten, find = _ref.find, error = _ref.error, omap = _ref.omap;","","  intermine = exports;","","  liftToTable = omap(function(k, v) {","    return [k, new Table(v)];","  });","","  Model = (function() {","","    function Model(_arg) {","      var classes;","      this.name = _arg.name, classes = _arg.classes;","      this.findCommonType = __bind(this.findCommonType, this);","","      this.findSharedAncestor = __bind(this.findSharedAncestor, this);","","      this.getAncestorsOf = __bind(this.getAncestorsOf, this);","","      this.getSubclassesOf = __bind(this.getSubclassesOf, this);","","      this.getPathInfo = __bind(this.getPathInfo, this);","","      this.classes = liftToTable(classes);","    }","","    Model.prototype.getPathInfo = function(path, subcls) {","      return PathInfo.parse(this, path, subcls);","    };","","    Model.prototype.getSubclassesOf = function(cls) {","      var cd, clazz, ret, _, _ref1, _ref2;","      clazz = cls &amp;&amp; cls.name ? cls : this.classes[cls];","      if (clazz == null) {","        throw new Error(\"\" + cls + \" is not a table\");","      }","      ret = [clazz.name];","      _ref1 = this.classes;","      for (_ in _ref1) {","        cd = _ref1[_];","        if (_ref2 = clazz.name, __indexOf.call(cd.parents(), _ref2) &gt;= 0) {","          ret = ret.concat(this.getSubclassesOf(cd));","        }","      }","      return ret;","    };","","    Model.prototype.getAncestorsOf = function(cls) {","      var ancestors, clazz, superC, _i, _len;","      clazz = cls &amp;&amp; cls.name ? cls : this.classes[cls];","      if (clazz == null) {","        throw new Error(\"\" + cls + \" is not a table\");","      }","      ancestors = clazz.parents();","      for (_i = 0, _len = ancestors.length; _i &lt; _len; _i++) {","        superC = ancestors[_i];","        ancestors.push(this.getAncestorsOf(superC));","      }","      return flatten(ancestors);","    };","","    Model.prototype.findSharedAncestor = function(classA, classB) {","      var a_ancestry, b_ancestry, firstCommon;","      if (classB === null || classA === null) {","        return null;","      }","      if (classA === classB) {","        return classA;","      }","      a_ancestry = this.getAncestorsOf(classA);","      if (__indexOf.call(a_ancestry, classB) &gt;= 0) {","        return classB;","      }","      b_ancestry = this.getAncestorsOf(classB);","      if (__indexOf.call(b_ancestry, classA) &gt;= 0) {","        return classA;","      }","      firstCommon = find(a_ancestry, function(a) {","        return __indexOf.call(b_ancestry, a) &gt;= 0;","      });","      return firstCommon;","    };","","    Model.prototype.findCommonType = function(xs) {","      if (xs == null) {","        xs = [];","      }","      return xs.reduce(this.findSharedAncestor);","    };","","    return Model;","","  })();","","  Model.prototype.makePath = Model.prototype.getPathInfo;","","  Model.prototype.findCommonTypeOfMultipleClasses = Model.prototype.findCommonType;","","  Model.load = function(data) {","    try {","      return new Model(data);","    } catch (e) {","      throw new Error(\"Error loading model: \" + e);","    }","  };","","  Model.INTEGRAL_TYPES = [\"int\", \"Integer\", \"long\", \"Long\"];","","  Model.FRACTIONAL_TYPES = [\"double\", \"Double\", \"float\", \"Float\"];","","  Model.NUMERIC_TYPES = Model.INTEGRAL_TYPES.concat(Model.FRACTIONAL_TYPES);","","  Model.BOOLEAN_TYPES = [\"boolean\", \"Boolean\"];","","  intermine.Model = Model;","","}).call(this);"];
_$jscoverage['model.js'][1]++;
(function () {
  _$jscoverage['model.js'][2]++;
  var Model, PathInfo, Table, error, find, flatten, intermine, liftToTable, omap, _ref, __bind = (function (fn, me) {
  _$jscoverage['model.js'][3]++;
  return (function () {
  _$jscoverage['model.js'][3]++;
  return fn.apply(me, arguments);
});
}), __indexOf = ([].indexOf || (function (item) {
  _$jscoverage['model.js'][4]++;
  for (var i = 0, l = this.length; (i < l); (i++)) {
    _$jscoverage['model.js'][4]++;
    if (((i in this) && (this[i] === item))) {
      _$jscoverage['model.js'][4]++;
      return i;
    }
}
  _$jscoverage['model.js'][4]++;
  return -1;
}));
  _$jscoverage['model.js'][6]++;
  Table = require("./table").Table;
  _$jscoverage['model.js'][8]++;
  PathInfo = require("./path").PathInfo;
  _$jscoverage['model.js'][10]++;
  ((_ref = require("./util")), (flatten = _ref.flatten), (find = _ref.find), (error = _ref.error), (omap = _ref.omap));
  _$jscoverage['model.js'][12]++;
  intermine = exports;
  _$jscoverage['model.js'][14]++;
  liftToTable = omap((function (k, v) {
  _$jscoverage['model.js'][15]++;
  return [k, new Table(v)];
}));
  _$jscoverage['model.js'][18]++;
  Model = (function () {
  _$jscoverage['model.js'][20]++;
  function Model(_arg) {
    _$jscoverage['model.js'][21]++;
    var classes;
    _$jscoverage['model.js'][22]++;
    ((this.name = _arg.name), (classes = _arg.classes));
    _$jscoverage['model.js'][23]++;
    this.findCommonType = __bind(this.findCommonType, this);
    _$jscoverage['model.js'][25]++;
    this.findSharedAncestor = __bind(this.findSharedAncestor, this);
    _$jscoverage['model.js'][27]++;
    this.getAncestorsOf = __bind(this.getAncestorsOf, this);
    _$jscoverage['model.js'][29]++;
    this.getSubclassesOf = __bind(this.getSubclassesOf, this);
    _$jscoverage['model.js'][31]++;
    this.getPathInfo = __bind(this.getPathInfo, this);
    _$jscoverage['model.js'][33]++;
    this.classes = liftToTable(classes);
}
  _$jscoverage['model.js'][36]++;
  Model.prototype.getPathInfo = (function (path, subcls) {
  _$jscoverage['model.js'][37]++;
  return PathInfo.parse(this, path, subcls);
});
  _$jscoverage['model.js'][40]++;
  Model.prototype.getSubclassesOf = (function (cls) {
  _$jscoverage['model.js'][41]++;
  var cd, clazz, ret, _, _ref1, _ref2;
  _$jscoverage['model.js'][42]++;
  clazz = ((cls && cls.name)? cls: this.classes[cls]);
  _$jscoverage['model.js'][43]++;
  if ((clazz == null)) {
    _$jscoverage['model.js'][44]++;
    throw new Error(("" + cls + " is not a table"));
  }
  _$jscoverage['model.js'][46]++;
  ret = [clazz.name];
  _$jscoverage['model.js'][47]++;
  _ref1 = this.classes;
  _$jscoverage['model.js'][48]++;
  for (_ in _ref1) {
    _$jscoverage['model.js'][49]++;
    cd = _ref1[_];
    _$jscoverage['model.js'][50]++;
    if (((_ref2 = clazz.name), (__indexOf.call(cd.parents(), _ref2) >= 0))) {
      _$jscoverage['model.js'][51]++;
      ret = ret.concat(this.getSubclassesOf(cd));
    }
}
  _$jscoverage['model.js'][54]++;
  return ret;
});
  _$jscoverage['model.js'][57]++;
  Model.prototype.getAncestorsOf = (function (cls) {
  _$jscoverage['model.js'][58]++;
  var ancestors, clazz, superC, _i, _len;
  _$jscoverage['model.js'][59]++;
  clazz = ((cls && cls.name)? cls: this.classes[cls]);
  _$jscoverage['model.js'][60]++;
  if ((clazz == null)) {
    _$jscoverage['model.js'][61]++;
    throw new Error(("" + cls + " is not a table"));
  }
  _$jscoverage['model.js'][63]++;
  ancestors = clazz.parents();
  _$jscoverage['model.js'][64]++;
  for (((_i = 0), (_len = ancestors.length)); (_i < _len); (_i++)) {
    _$jscoverage['model.js'][65]++;
    superC = ancestors[_i];
    _$jscoverage['model.js'][66]++;
    ancestors.push(this.getAncestorsOf(superC));
}
  _$jscoverage['model.js'][68]++;
  return flatten(ancestors);
});
  _$jscoverage['model.js'][71]++;
  Model.prototype.findSharedAncestor = (function (classA, classB) {
  _$jscoverage['model.js'][72]++;
  var a_ancestry, b_ancestry, firstCommon;
  _$jscoverage['model.js'][73]++;
  if (((classB === null) || (classA === null))) {
    _$jscoverage['model.js'][74]++;
    return null;
  }
  _$jscoverage['model.js'][76]++;
  if ((classA === classB)) {
    _$jscoverage['model.js'][77]++;
    return classA;
  }
  _$jscoverage['model.js'][79]++;
  a_ancestry = this.getAncestorsOf(classA);
  _$jscoverage['model.js'][80]++;
  if ((__indexOf.call(a_ancestry, classB) >= 0)) {
    _$jscoverage['model.js'][81]++;
    return classB;
  }
  _$jscoverage['model.js'][83]++;
  b_ancestry = this.getAncestorsOf(classB);
  _$jscoverage['model.js'][84]++;
  if ((__indexOf.call(b_ancestry, classA) >= 0)) {
    _$jscoverage['model.js'][85]++;
    return classA;
  }
  _$jscoverage['model.js'][87]++;
  firstCommon = find(a_ancestry, (function (a) {
  _$jscoverage['model.js'][88]++;
  return (__indexOf.call(b_ancestry, a) >= 0);
}));
  _$jscoverage['model.js'][90]++;
  return firstCommon;
});
  _$jscoverage['model.js'][93]++;
  Model.prototype.findCommonType = (function (xs) {
  _$jscoverage['model.js'][94]++;
  if ((xs == null)) {
    _$jscoverage['model.js'][95]++;
    xs = [];
  }
  _$jscoverage['model.js'][97]++;
  return xs.reduce(this.findSharedAncestor);
});
  _$jscoverage['model.js'][100]++;
  return Model;
})();
  _$jscoverage['model.js'][104]++;
  Model.prototype.makePath = Model.prototype.getPathInfo;
  _$jscoverage['model.js'][106]++;
  Model.prototype.findCommonTypeOfMultipleClasses = Model.prototype.findCommonType;
  _$jscoverage['model.js'][108]++;
  Model.load = (function (data) {
  _$jscoverage['model.js'][109]++;
  try {
    _$jscoverage['model.js'][110]++;
    return new Model(data);
  }
  catch (e) {
    _$jscoverage['model.js'][112]++;
    throw new Error(("Error loading model: " + e));
  }
});
  _$jscoverage['model.js'][116]++;
  Model.INTEGRAL_TYPES = ["int", "Integer", "long", "Long"];
  _$jscoverage['model.js'][118]++;
  Model.FRACTIONAL_TYPES = ["double", "Double", "float", "Float"];
  _$jscoverage['model.js'][120]++;
  Model.NUMERIC_TYPES = Model.INTEGRAL_TYPES.concat(Model.FRACTIONAL_TYPES);
  _$jscoverage['model.js'][122]++;
  Model.BOOLEAN_TYPES = ["boolean", "Boolean"];
  _$jscoverage['model.js'][124]++;
  intermine.Model = Model;
}).call(this);

},{"./path":5,"./table":9,"./util":11}],5:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['path.js']) {
  _$jscoverage['path.js'] = [];
  _$jscoverage['path.js'][1] = 0;
  _$jscoverage['path.js'][2] = 0;
  _$jscoverage['path.js'][3] = 0;
  _$jscoverage['path.js'][4] = 0;
  _$jscoverage['path.js'][6] = 0;
  _$jscoverage['path.js'][8] = 0;
  _$jscoverage['path.js'][10] = 0;
  _$jscoverage['path.js'][12] = 0;
  _$jscoverage['path.js'][14] = 0;
  _$jscoverage['path.js'][16] = 0;
  _$jscoverage['path.js'][17] = 0;
  _$jscoverage['path.js'][18] = 0;
  _$jscoverage['path.js'][19] = 0;
  _$jscoverage['path.js'][20] = 0;
  _$jscoverage['path.js'][21] = 0;
  _$jscoverage['path.js'][22] = 0;
  _$jscoverage['path.js'][23] = 0;
  _$jscoverage['path.js'][25] = 0;
  _$jscoverage['path.js'][29] = 0;
  _$jscoverage['path.js'][31] = 0;
  _$jscoverage['path.js'][32] = 0;
  _$jscoverage['path.js'][33] = 0;
  _$jscoverage['path.js'][34] = 0;
  _$jscoverage['path.js'][36] = 0;
  _$jscoverage['path.js'][38] = 0;
  _$jscoverage['path.js'][40] = 0;
  _$jscoverage['path.js'][42] = 0;
  _$jscoverage['path.js'][44] = 0;
  _$jscoverage['path.js'][46] = 0;
  _$jscoverage['path.js'][48] = 0;
  _$jscoverage['path.js'][50] = 0;
  _$jscoverage['path.js'][52] = 0;
  _$jscoverage['path.js'][54] = 0;
  _$jscoverage['path.js'][56] = 0;
  _$jscoverage['path.js'][58] = 0;
  _$jscoverage['path.js'][60] = 0;
  _$jscoverage['path.js'][61] = 0;
  _$jscoverage['path.js'][62] = 0;
  _$jscoverage['path.js'][66] = 0;
  _$jscoverage['path.js'][67] = 0;
  _$jscoverage['path.js'][70] = 0;
  _$jscoverage['path.js'][71] = 0;
  _$jscoverage['path.js'][74] = 0;
  _$jscoverage['path.js'][75] = 0;
  _$jscoverage['path.js'][78] = 0;
  _$jscoverage['path.js'][79] = 0;
  _$jscoverage['path.js'][80] = 0;
  _$jscoverage['path.js'][83] = 0;
  _$jscoverage['path.js'][84] = 0;
  _$jscoverage['path.js'][85] = 0;
  _$jscoverage['path.js'][88] = 0;
  _$jscoverage['path.js'][89] = 0;
  _$jscoverage['path.js'][90] = 0;
  _$jscoverage['path.js'][94] = 0;
  _$jscoverage['path.js'][95] = 0;
  _$jscoverage['path.js'][96] = 0;
  _$jscoverage['path.js'][99] = 0;
  _$jscoverage['path.js'][100] = 0;
  _$jscoverage['path.js'][101] = 0;
  _$jscoverage['path.js'][102] = 0;
  _$jscoverage['path.js'][104] = 0;
  _$jscoverage['path.js'][110] = 0;
  _$jscoverage['path.js'][113] = 0;
  _$jscoverage['path.js'][114] = 0;
  _$jscoverage['path.js'][115] = 0;
  _$jscoverage['path.js'][116] = 0;
  _$jscoverage['path.js'][118] = 0;
  _$jscoverage['path.js'][119] = 0;
  _$jscoverage['path.js'][120] = 0;
  _$jscoverage['path.js'][122] = 0;
  _$jscoverage['path.js'][128] = 0;
  _$jscoverage['path.js'][131] = 0;
  _$jscoverage['path.js'][132] = 0;
  _$jscoverage['path.js'][133] = 0;
  _$jscoverage['path.js'][134] = 0;
  _$jscoverage['path.js'][136] = 0;
  _$jscoverage['path.js'][137] = 0;
  _$jscoverage['path.js'][138] = 0;
  _$jscoverage['path.js'][142] = 0;
  _$jscoverage['path.js'][143] = 0;
  _$jscoverage['path.js'][145] = 0;
  _$jscoverage['path.js'][146] = 0;
  _$jscoverage['path.js'][148] = 0;
  _$jscoverage['path.js'][149] = 0;
  _$jscoverage['path.js'][150] = 0;
  _$jscoverage['path.js'][154] = 0;
  _$jscoverage['path.js'][155] = 0;
  _$jscoverage['path.js'][158] = 0;
  _$jscoverage['path.js'][161] = 0;
  _$jscoverage['path.js'][162] = 0;
  _$jscoverage['path.js'][163] = 0;
  _$jscoverage['path.js'][164] = 0;
  _$jscoverage['path.js'][165] = 0;
  _$jscoverage['path.js'][166] = 0;
  _$jscoverage['path.js'][167] = 0;
  _$jscoverage['path.js'][169] = 0;
  _$jscoverage['path.js'][172] = 0;
  _$jscoverage['path.js'][173] = 0;
  _$jscoverage['path.js'][176] = 0;
  _$jscoverage['path.js'][177] = 0;
  _$jscoverage['path.js'][180] = 0;
  _$jscoverage['path.js'][181] = 0;
  _$jscoverage['path.js'][184] = 0;
  _$jscoverage['path.js'][185] = 0;
  _$jscoverage['path.js'][186] = 0;
  _$jscoverage['path.js'][189] = 0;
  _$jscoverage['path.js'][193] = 0;
  _$jscoverage['path.js'][195] = 0;
  _$jscoverage['path.js'][196] = 0;
  _$jscoverage['path.js'][197] = 0;
  _$jscoverage['path.js'][198] = 0;
  _$jscoverage['path.js'][200] = 0;
  _$jscoverage['path.js'][201] = 0;
  _$jscoverage['path.js'][202] = 0;
  _$jscoverage['path.js'][204] = 0;
  _$jscoverage['path.js'][205] = 0;
  _$jscoverage['path.js'][206] = 0;
  _$jscoverage['path.js'][207] = 0;
  _$jscoverage['path.js'][208] = 0;
  _$jscoverage['path.js'][209] = 0;
  _$jscoverage['path.js'][210] = 0;
  _$jscoverage['path.js'][211] = 0;
  _$jscoverage['path.js'][212] = 0;
  _$jscoverage['path.js'][213] = 0;
  _$jscoverage['path.js'][214] = 0;
  _$jscoverage['path.js'][216] = 0;
  _$jscoverage['path.js'][217] = 0;
  _$jscoverage['path.js'][218] = 0;
  _$jscoverage['path.js'][220] = 0;
  _$jscoverage['path.js'][222] = 0;
  _$jscoverage['path.js'][231] = 0;
  _$jscoverage['path.js'][232] = 0;
  _$jscoverage['path.js'][233] = 0;
  _$jscoverage['path.js'][236] = 0;
}
_$jscoverage['path.js'].source = ["(function() {","  var NAMES, PARSED, PathInfo, any, concatMap, copy, error, get, intermine, makeKey, set, success, utils, withCB,","    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },","    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i &lt; l; i++) { if (i in this &amp;&amp; this[i] === item) return i; } return -1; };","","  intermine = exports;","","  utils = require('./util');","","  withCB = utils.withCB, concatMap = utils.concatMap, get = utils.get, any = utils.any, set = utils.set, copy = utils.copy, success = utils.success, error = utils.error;","","  NAMES = {};","","  PARSED = {};","","  makeKey = function(model, path, subclasses) {","    var k, v, _ref;","    return \"\" + (model != null ? model.name : void 0) + \"|\" + (model != null ? (_ref = model.service) != null ? _ref.root : void 0 : void 0) + \"|\" + path + \":\" + ((function() {","      var _results;","      _results = [];","      for (k in subclasses) {","        v = subclasses[k];","        _results.push(\"\" + k + \"=\" + v);","      }","      return _results;","    })());","  };","","  PathInfo = (function() {","","    function PathInfo(_arg) {","      var _ref;","      this.root = _arg.root, this.model = _arg.model, this.descriptors = _arg.descriptors, this.subclasses = _arg.subclasses, this.displayName = _arg.displayName, this.ident = _arg.ident;","      this.allDescriptors = __bind(this.allDescriptors, this);","","      this.getChildNodes = __bind(this.getChildNodes, this);","","      this.getDisplayName = __bind(this.getDisplayName, this);","","      this.isa = __bind(this.isa, this);","","      this.append = __bind(this.append, this);","","      this.getParent = __bind(this.getParent, this);","","      this.getEndClass = __bind(this.getEndClass, this);","","      this.containsCollection = __bind(this.containsCollection, this);","","      this.isCollection = __bind(this.isCollection, this);","","      this.isReference = __bind(this.isReference, this);","","      this.isClass = __bind(this.isClass, this);","","      this.isAttribute = __bind(this.isAttribute, this);","","      this.isRoot = __bind(this.isRoot, this);","","      this.end = this.descriptors[this.descriptors.length - 1];","      if ((_ref = this.ident) == null) {","        this.ident = makeKey(this.model, this, this.subclasses);","      }","    }","","    PathInfo.prototype.isRoot = function() {","      return this.descriptors.length === 0;","    };","","    PathInfo.prototype.isAttribute = function() {","      return (this.end != null) &amp;&amp; !(this.end.referencedType != null);","    };","","    PathInfo.prototype.isClass = function() {","      return this.isRoot() || (this.end.referencedType != null);","    };","","    PathInfo.prototype.isReference = function() {","      var _ref;","      return ((_ref = this.end) != null ? _ref.referencedType : void 0) != null;","    };","","    PathInfo.prototype.isCollection = function() {","      var _ref, _ref1;","      return (_ref = (_ref1 = this.end) != null ? _ref1.isCollection : void 0) != null ? _ref : false;","    };","","    PathInfo.prototype.containsCollection = function() {","      return any(this.descriptors, function(x) {","        return x.isCollection;","      });","    };","","    PathInfo.prototype.getEndClass = function() {","      var _ref;","      return this.model.classes[this.subclasses[this.toString()] || ((_ref = this.end) != null ? _ref.referencedType : void 0)] || this.root;","    };","","    PathInfo.prototype.getParent = function() {","      var data;","      if (this.isRoot()) {","        throw new Error(\"Root paths do not have parents\");","      }","      data = {","        root: this.root,","        model: this.model,","        descriptors: this.descriptors.slice(0, this.descriptors.length - 1),","        subclasses: this.subclasses","      };","      return new PathInfo(data);","    };","","    PathInfo.prototype.append = function(attr) {","      var data, fld;","      if (this.isAttribute()) {","        throw new Error(\"\" + this + \" is an attribute.\");","      }","      fld = typeof attr === 'string' ? this.getType().fields[attr] : attr;","      if (fld == null) {","        throw new Error(\"\" + attr + \" is not a field of \" + (this.getType()));","      }","      data = {","        root: this.root,","        model: this.model,","        descriptors: this.descriptors.concat([fld]),","        subclasses: this.subclasses","      };","      return new PathInfo(data);","    };","","    PathInfo.prototype.isa = function(clazz) {","      var name, type;","      if (this.isAttribute()) {","        return this.getType() === clazz;","      } else {","        name = clazz.name ? clazz.name : '' + clazz;","        type = this.getType();","        return (name === type.name) || (__indexOf.call(this.model.getAncestorsOf(type), name) &gt;= 0);","      }","    };","","    PathInfo.prototype.getDisplayName = function(cb) {","      var cached, custom, params, path, _ref,","        _this = this;","      if (custom = this.displayName) {","        return success(custom);","      }","      if ((_ref = this.namePromise) == null) {","        this.namePromise = (cached = NAMES[this.ident]) ? success(cached) : !(this.model.service != null) ? error(\"No service\") : (path = 'model' + (concatMap(function(d) {","          return '/' + d.name;","        }))(this.allDescriptors()), params = (set({","          format: 'json'","        }))(copy(this.subclasses)), this.model.service.get(path, params).then(get('display')).then(function(n) {","          var _name, _ref1;","          return (_ref1 = NAMES[_name = _this.ident]) != null ? _ref1 : NAMES[_name] = n;","        }));","      }","      return withCB(cb, this.namePromise);","    };","","    PathInfo.prototype.getChildNodes = function() {","      var fld, name, _ref, _ref1, _results;","      _ref1 = ((_ref = this.getEndClass()) != null ? _ref.fields : void 0) || {};","      _results = [];","      for (name in _ref1) {","        fld = _ref1[name];","        _results.push(this.append(fld));","      }","      return _results;","    };","","    PathInfo.prototype.allDescriptors = function() {","      return [this.root].concat(this.descriptors);","    };","","    PathInfo.prototype.toString = function() {","      return this.allDescriptors().map(get('name')).join('.');","    };","","    PathInfo.prototype.equals = function(other) {","      return other &amp;&amp; (other.ident != null) &amp;&amp; this.ident === other.ident;","    };","","    PathInfo.prototype.getType = function() {","      var _ref, _ref1;","      return ((_ref = this.end) != null ? (_ref1 = _ref.type) != null ? _ref1.replace(/java\\.lang\\./, '') : void 0 : void 0) || this.getEndClass();","    };","","    return PathInfo;","","  })();","","  PathInfo.prototype.toPathString = PathInfo.prototype.toString;","","  PathInfo.parse = function(model, path, subclasses) {","    var cached, cd, descriptors, fld, ident, keyPath, part, parts, root;","    if (subclasses == null) {","      subclasses = {};","    }","    ident = makeKey(model, path, subclasses);","    if (cached = PARSED[ident]) {","      return cached;","    }","    parts = (path + '').split('.');","    root = cd = model.classes[parts.shift()];","    keyPath = root.name;","    descriptors = (function() {","      var _i, _len, _ref, _results;","      _results = [];","      for (_i = 0, _len = parts.length; _i &lt; _len; _i++) {","        part = parts[_i];","        fld = (cd != null ? cd.fields[part] : void 0) || ((_ref = (cd = model.classes[subclasses[keyPath]])) != null ? _ref.fields[part] : void 0);","        if (!fld) {","          throw new Error(\"Could not find \" + part + \" in \" + cd + \" when parsing \" + path);","        }","        keyPath += \".\" + part;","        cd = model.classes[fld.type || fld.referencedType];","        _results.push(fld);","      }","      return _results;","    })();","    return PARSED[ident] = new PathInfo({","      root: root,","      model: model,","      descriptors: descriptors,","      subclasses: subclasses,","      ident: ident","    });","  };","","  PathInfo.flushCache = function() {","    PARSED = {};","    return NAMES = {};","  };","","  intermine.PathInfo = PathInfo;","","}).call(this);"];
_$jscoverage['path.js'][1]++;
(function () {
  _$jscoverage['path.js'][2]++;
  var NAMES, PARSED, PathInfo, any, concatMap, copy, error, get, intermine, makeKey, set, success, utils, withCB, __bind = (function (fn, me) {
  _$jscoverage['path.js'][3]++;
  return (function () {
  _$jscoverage['path.js'][3]++;
  return fn.apply(me, arguments);
});
}), __indexOf = ([].indexOf || (function (item) {
  _$jscoverage['path.js'][4]++;
  for (var i = 0, l = this.length; (i < l); (i++)) {
    _$jscoverage['path.js'][4]++;
    if (((i in this) && (this[i] === item))) {
      _$jscoverage['path.js'][4]++;
      return i;
    }
}
  _$jscoverage['path.js'][4]++;
  return -1;
}));
  _$jscoverage['path.js'][6]++;
  intermine = exports;
  _$jscoverage['path.js'][8]++;
  utils = require("./util");
  _$jscoverage['path.js'][10]++;
  ((withCB = utils.withCB), (concatMap = utils.concatMap), (get = utils.get), (any = utils.any), (set = utils.set), (copy = utils.copy), (success = utils.success), (error = utils.error));
  _$jscoverage['path.js'][12]++;
  NAMES = {};
  _$jscoverage['path.js'][14]++;
  PARSED = {};
  _$jscoverage['path.js'][16]++;
  makeKey = (function (model, path, subclasses) {
  _$jscoverage['path.js'][17]++;
  var k, v, _ref;
  _$jscoverage['path.js'][18]++;
  return ("" + ((model != null)? model.name: (void 0)) + "|" + ((model != null)? (((_ref = model.service) != null)? _ref.root: (void 0)): (void 0)) + "|" + path + ":" + (function () {
  _$jscoverage['path.js'][19]++;
  var _results;
  _$jscoverage['path.js'][20]++;
  _results = [];
  _$jscoverage['path.js'][21]++;
  for (k in subclasses) {
    _$jscoverage['path.js'][22]++;
    v = subclasses[k];
    _$jscoverage['path.js'][23]++;
    _results.push(("" + k + "=" + v));
}
  _$jscoverage['path.js'][25]++;
  return _results;
})());
});
  _$jscoverage['path.js'][29]++;
  PathInfo = (function () {
  _$jscoverage['path.js'][31]++;
  function PathInfo(_arg) {
    _$jscoverage['path.js'][32]++;
    var _ref;
    _$jscoverage['path.js'][33]++;
    ((this.root = _arg.root), (this.model = _arg.model), (this.descriptors = _arg.descriptors), (this.subclasses = _arg.subclasses), (this.displayName = _arg.displayName), (this.ident = _arg.ident));
    _$jscoverage['path.js'][34]++;
    this.allDescriptors = __bind(this.allDescriptors, this);
    _$jscoverage['path.js'][36]++;
    this.getChildNodes = __bind(this.getChildNodes, this);
    _$jscoverage['path.js'][38]++;
    this.getDisplayName = __bind(this.getDisplayName, this);
    _$jscoverage['path.js'][40]++;
    this.isa = __bind(this.isa, this);
    _$jscoverage['path.js'][42]++;
    this.append = __bind(this.append, this);
    _$jscoverage['path.js'][44]++;
    this.getParent = __bind(this.getParent, this);
    _$jscoverage['path.js'][46]++;
    this.getEndClass = __bind(this.getEndClass, this);
    _$jscoverage['path.js'][48]++;
    this.containsCollection = __bind(this.containsCollection, this);
    _$jscoverage['path.js'][50]++;
    this.isCollection = __bind(this.isCollection, this);
    _$jscoverage['path.js'][52]++;
    this.isReference = __bind(this.isReference, this);
    _$jscoverage['path.js'][54]++;
    this.isClass = __bind(this.isClass, this);
    _$jscoverage['path.js'][56]++;
    this.isAttribute = __bind(this.isAttribute, this);
    _$jscoverage['path.js'][58]++;
    this.isRoot = __bind(this.isRoot, this);
    _$jscoverage['path.js'][60]++;
    this.end = this.descriptors[(this.descriptors.length - 1)];
    _$jscoverage['path.js'][61]++;
    if (((_ref = this.ident) == null)) {
      _$jscoverage['path.js'][62]++;
      this.ident = makeKey(this.model, this, this.subclasses);
    }
}
  _$jscoverage['path.js'][66]++;
  PathInfo.prototype.isRoot = (function () {
  _$jscoverage['path.js'][67]++;
  return (this.descriptors.length === 0);
});
  _$jscoverage['path.js'][70]++;
  PathInfo.prototype.isAttribute = (function () {
  _$jscoverage['path.js'][71]++;
  return ((this.end != null) && (! (this.end.referencedType != null)));
});
  _$jscoverage['path.js'][74]++;
  PathInfo.prototype.isClass = (function () {
  _$jscoverage['path.js'][75]++;
  return (this.isRoot() || (this.end.referencedType != null));
});
  _$jscoverage['path.js'][78]++;
  PathInfo.prototype.isReference = (function () {
  _$jscoverage['path.js'][79]++;
  var _ref;
  _$jscoverage['path.js'][80]++;
  return ((((_ref = this.end) != null)? _ref.referencedType: (void 0)) != null);
});
  _$jscoverage['path.js'][83]++;
  PathInfo.prototype.isCollection = (function () {
  _$jscoverage['path.js'][84]++;
  var _ref, _ref1;
  _$jscoverage['path.js'][85]++;
  return (((_ref = (((_ref1 = this.end) != null)? _ref1.isCollection: (void 0))) != null)? _ref: false);
});
  _$jscoverage['path.js'][88]++;
  PathInfo.prototype.containsCollection = (function () {
  _$jscoverage['path.js'][89]++;
  return any(this.descriptors, (function (x) {
  _$jscoverage['path.js'][90]++;
  return x.isCollection;
}));
});
  _$jscoverage['path.js'][94]++;
  PathInfo.prototype.getEndClass = (function () {
  _$jscoverage['path.js'][95]++;
  var _ref;
  _$jscoverage['path.js'][96]++;
  return (this.model.classes[(this.subclasses[this.toString()] || (((_ref = this.end) != null)? _ref.referencedType: (void 0)))] || this.root);
});
  _$jscoverage['path.js'][99]++;
  PathInfo.prototype.getParent = (function () {
  _$jscoverage['path.js'][100]++;
  var data;
  _$jscoverage['path.js'][101]++;
  if (this.isRoot()) {
    _$jscoverage['path.js'][102]++;
    throw new Error("Root paths do not have parents");
  }
  _$jscoverage['path.js'][104]++;
  data = {root: this.root, model: this.model, descriptors: this.descriptors.slice(0, (this.descriptors.length - 1)), subclasses: this.subclasses};
  _$jscoverage['path.js'][110]++;
  return new PathInfo(data);
});
  _$jscoverage['path.js'][113]++;
  PathInfo.prototype.append = (function (attr) {
  _$jscoverage['path.js'][114]++;
  var data, fld;
  _$jscoverage['path.js'][115]++;
  if (this.isAttribute()) {
    _$jscoverage['path.js'][116]++;
    throw new Error(("" + this + " is an attribute."));
  }
  _$jscoverage['path.js'][118]++;
  fld = (((typeof attr) === "string")? this.getType().fields[attr]: attr);
  _$jscoverage['path.js'][119]++;
  if ((fld == null)) {
    _$jscoverage['path.js'][120]++;
    throw new Error(("" + attr + " is not a field of " + this.getType()));
  }
  _$jscoverage['path.js'][122]++;
  data = {root: this.root, model: this.model, descriptors: this.descriptors.concat([fld]), subclasses: this.subclasses};
  _$jscoverage['path.js'][128]++;
  return new PathInfo(data);
});
  _$jscoverage['path.js'][131]++;
  PathInfo.prototype.isa = (function (clazz) {
  _$jscoverage['path.js'][132]++;
  var name, type;
  _$jscoverage['path.js'][133]++;
  if (this.isAttribute()) {
    _$jscoverage['path.js'][134]++;
    return (this.getType() === clazz);
  }
  else {
    _$jscoverage['path.js'][136]++;
    name = (clazz.name? clazz.name: ("" + clazz));
    _$jscoverage['path.js'][137]++;
    type = this.getType();
    _$jscoverage['path.js'][138]++;
    return ((name === type.name) || (__indexOf.call(this.model.getAncestorsOf(type), name) >= 0));
  }
});
  _$jscoverage['path.js'][142]++;
  PathInfo.prototype.getDisplayName = (function (cb) {
  _$jscoverage['path.js'][143]++;
  var cached, custom, params, path, _ref, _this = this;
  _$jscoverage['path.js'][145]++;
  if ((custom = this.displayName)) {
    _$jscoverage['path.js'][146]++;
    return success(custom);
  }
  _$jscoverage['path.js'][148]++;
  if (((_ref = this.namePromise) == null)) {
    _$jscoverage['path.js'][149]++;
    this.namePromise = ((cached = NAMES[this.ident])? success(cached): ((! (this.model.service != null))? error("No service"): ((path = ("model" + (concatMap((function (d) {
  _$jscoverage['path.js'][150]++;
  return ("/" + d.name);
})))(this.allDescriptors()))), (params = (set({format: "json"}))(copy(this.subclasses))), this.model.service.get(path, params).then(get("display")).then((function (n) {
  _$jscoverage['path.js'][154]++;
  var _name, _ref1;
  _$jscoverage['path.js'][155]++;
  return (((_ref1 = NAMES[(_name = _this.ident)]) != null)? _ref1: (NAMES[_name] = n));
})))));
  }
  _$jscoverage['path.js'][158]++;
  return withCB(cb, this.namePromise);
});
  _$jscoverage['path.js'][161]++;
  PathInfo.prototype.getChildNodes = (function () {
  _$jscoverage['path.js'][162]++;
  var fld, name, _ref, _ref1, _results;
  _$jscoverage['path.js'][163]++;
  _ref1 = ((((_ref = this.getEndClass()) != null)? _ref.fields: (void 0)) || {});
  _$jscoverage['path.js'][164]++;
  _results = [];
  _$jscoverage['path.js'][165]++;
  for (name in _ref1) {
    _$jscoverage['path.js'][166]++;
    fld = _ref1[name];
    _$jscoverage['path.js'][167]++;
    _results.push(this.append(fld));
}
  _$jscoverage['path.js'][169]++;
  return _results;
});
  _$jscoverage['path.js'][172]++;
  PathInfo.prototype.allDescriptors = (function () {
  _$jscoverage['path.js'][173]++;
  return [this.root].concat(this.descriptors);
});
  _$jscoverage['path.js'][176]++;
  PathInfo.prototype.toString = (function () {
  _$jscoverage['path.js'][177]++;
  return this.allDescriptors().map(get("name")).join(".");
});
  _$jscoverage['path.js'][180]++;
  PathInfo.prototype.equals = (function (other) {
  _$jscoverage['path.js'][181]++;
  return (other && (other.ident != null) && (this.ident === other.ident));
});
  _$jscoverage['path.js'][184]++;
  PathInfo.prototype.getType = (function () {
  _$jscoverage['path.js'][185]++;
  var _ref, _ref1;
  _$jscoverage['path.js'][186]++;
  return ((((_ref = this.end) != null)? (((_ref1 = _ref.type) != null)? _ref1.replace(/java\.lang\./, ""): (void 0)): (void 0)) || this.getEndClass());
});
  _$jscoverage['path.js'][189]++;
  return PathInfo;
})();
  _$jscoverage['path.js'][193]++;
  PathInfo.prototype.toPathString = PathInfo.prototype.toString;
  _$jscoverage['path.js'][195]++;
  PathInfo.parse = (function (model, path, subclasses) {
  _$jscoverage['path.js'][196]++;
  var cached, cd, descriptors, fld, ident, keyPath, part, parts, root;
  _$jscoverage['path.js'][197]++;
  if ((subclasses == null)) {
    _$jscoverage['path.js'][198]++;
    subclasses = {};
  }
  _$jscoverage['path.js'][200]++;
  ident = makeKey(model, path, subclasses);
  _$jscoverage['path.js'][201]++;
  if ((cached = PARSED[ident])) {
    _$jscoverage['path.js'][202]++;
    return cached;
  }
  _$jscoverage['path.js'][204]++;
  parts = (path + "").split(".");
  _$jscoverage['path.js'][205]++;
  root = (cd = model.classes[parts.shift()]);
  _$jscoverage['path.js'][206]++;
  keyPath = root.name;
  _$jscoverage['path.js'][207]++;
  descriptors = (function () {
  _$jscoverage['path.js'][208]++;
  var _i, _len, _ref, _results;
  _$jscoverage['path.js'][209]++;
  _results = [];
  _$jscoverage['path.js'][210]++;
  for (((_i = 0), (_len = parts.length)); (_i < _len); (_i++)) {
    _$jscoverage['path.js'][211]++;
    part = parts[_i];
    _$jscoverage['path.js'][212]++;
    fld = (((cd != null)? cd.fields[part]: (void 0)) || (((_ref = (cd = model.classes[subclasses[keyPath]])) != null)? _ref.fields[part]: (void 0)));
    _$jscoverage['path.js'][213]++;
    if ((! fld)) {
      _$jscoverage['path.js'][214]++;
      throw new Error(("Could not find " + part + " in " + cd + " when parsing " + path));
    }
    _$jscoverage['path.js'][216]++;
    keyPath += ("." + part);
    _$jscoverage['path.js'][217]++;
    cd = model.classes[(fld.type || fld.referencedType)];
    _$jscoverage['path.js'][218]++;
    _results.push(fld);
}
  _$jscoverage['path.js'][220]++;
  return _results;
})();
  _$jscoverage['path.js'][222]++;
  return (PARSED[ident] = new PathInfo({root: root, model: model, descriptors: descriptors, subclasses: subclasses, ident: ident}));
});
  _$jscoverage['path.js'][231]++;
  PathInfo.flushCache = (function () {
  _$jscoverage['path.js'][232]++;
  PARSED = {};
  _$jscoverage['path.js'][233]++;
  return (NAMES = {});
});
  _$jscoverage['path.js'][236]++;
  intermine.PathInfo = PathInfo;
}).call(this);

},{"./util":11}],6:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['promise.js']) {
  _$jscoverage['promise.js'] = [];
  _$jscoverage['promise.js'][1] = 0;
  _$jscoverage['promise.js'][3] = 0;
}
_$jscoverage['promise.js'].source = ["(function() {","","  module.exports = require('promise');","","}).call(this);"];
_$jscoverage['promise.js'][1]++;
(function () {
  _$jscoverage['promise.js'][3]++;
  module.exports = require("promise");
}).call(this);

},{"promise":38}],7:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['query.js']) {
  _$jscoverage['query.js'] = [];
  _$jscoverage['query.js'][1] = 0;
  _$jscoverage['query.js'][2] = 0;
  _$jscoverage['query.js'][3] = 0;
  _$jscoverage['query.js'][4] = 0;
  _$jscoverage['query.js'][8] = 0;
  _$jscoverage['query.js'][10] = 0;
  _$jscoverage['query.js'][12] = 0;
  _$jscoverage['query.js'][14] = 0;
  _$jscoverage['query.js'][16] = 0;
  _$jscoverage['query.js'][18] = 0;
  _$jscoverage['query.js'][19] = 0;
  _$jscoverage['query.js'][20] = 0;
  _$jscoverage['query.js'][21] = 0;
  _$jscoverage['query.js'][22] = 0;
  _$jscoverage['query.js'][24] = 0;
  _$jscoverage['query.js'][27] = 0;
  _$jscoverage['query.js'][29] = 0;
  _$jscoverage['query.js'][31] = 0;
  _$jscoverage['query.js'][33] = 0;
  _$jscoverage['query.js'][34] = 0;
  _$jscoverage['query.js'][37] = 0;
  _$jscoverage['query.js'][39] = 0;
  _$jscoverage['query.js'][40] = 0;
  _$jscoverage['query.js'][41] = 0;
  _$jscoverage['query.js'][43] = 0;
  _$jscoverage['query.js'][46] = 0;
  _$jscoverage['query.js'][47] = 0;
  _$jscoverage['query.js'][48] = 0;
  _$jscoverage['query.js'][50] = 0;
  _$jscoverage['query.js'][54] = 0;
  _$jscoverage['query.js'][55] = 0;
  _$jscoverage['query.js'][56] = 0;
  _$jscoverage['query.js'][57] = 0;
  _$jscoverage['query.js'][58] = 0;
  _$jscoverage['query.js'][59] = 0;
  _$jscoverage['query.js'][60] = 0;
  _$jscoverage['query.js'][61] = 0;
  _$jscoverage['query.js'][62] = 0;
  _$jscoverage['query.js'][65] = 0;
  _$jscoverage['query.js'][69] = 0;
  _$jscoverage['query.js'][70] = 0;
  _$jscoverage['query.js'][73] = 0;
  _$jscoverage['query.js'][74] = 0;
  _$jscoverage['query.js'][77] = 0;
  _$jscoverage['query.js'][78] = 0;
  _$jscoverage['query.js'][81] = 0;
  _$jscoverage['query.js'][82] = 0;
  _$jscoverage['query.js'][85] = 0;
  _$jscoverage['query.js'][86] = 0;
  _$jscoverage['query.js'][89] = 0;
  _$jscoverage['query.js'][90] = 0;
  _$jscoverage['query.js'][91] = 0;
  _$jscoverage['query.js'][92] = 0;
  _$jscoverage['query.js'][93] = 0;
  _$jscoverage['query.js'][94] = 0;
  _$jscoverage['query.js'][95] = 0;
  _$jscoverage['query.js'][96] = 0;
  _$jscoverage['query.js'][97] = 0;
  _$jscoverage['query.js'][98] = 0;
  _$jscoverage['query.js'][100] = 0;
  _$jscoverage['query.js'][104] = 0;
  _$jscoverage['query.js'][105] = 0;
  _$jscoverage['query.js'][108] = 0;
  _$jscoverage['query.js'][109] = 0;
  _$jscoverage['query.js'][110] = 0;
  _$jscoverage['query.js'][111] = 0;
  _$jscoverage['query.js'][112] = 0;
  _$jscoverage['query.js'][113] = 0;
  _$jscoverage['query.js'][125] = 0;
  _$jscoverage['query.js'][126] = 0;
  _$jscoverage['query.js'][127] = 0;
  _$jscoverage['query.js'][128] = 0;
  _$jscoverage['query.js'][129] = 0;
  _$jscoverage['query.js'][132] = 0;
  _$jscoverage['query.js'][133] = 0;
  _$jscoverage['query.js'][134] = 0;
  _$jscoverage['query.js'][135] = 0;
  _$jscoverage['query.js'][136] = 0;
  _$jscoverage['query.js'][137] = 0;
  _$jscoverage['query.js'][140] = 0;
  _$jscoverage['query.js'][143] = 0;
  _$jscoverage['query.js'][144] = 0;
  _$jscoverage['query.js'][147] = 0;
  _$jscoverage['query.js'][148] = 0;
  _$jscoverage['query.js'][149] = 0;
  _$jscoverage['query.js'][152] = 0;
  _$jscoverage['query.js'][153] = 0;
  _$jscoverage['query.js'][154] = 0;
  _$jscoverage['query.js'][155] = 0;
  _$jscoverage['query.js'][156] = 0;
  _$jscoverage['query.js'][157] = 0;
  _$jscoverage['query.js'][158] = 0;
  _$jscoverage['query.js'][159] = 0;
  _$jscoverage['query.js'][161] = 0;
  _$jscoverage['query.js'][162] = 0;
  _$jscoverage['query.js'][165] = 0;
  _$jscoverage['query.js'][166] = 0;
  _$jscoverage['query.js'][167] = 0;
  _$jscoverage['query.js'][168] = 0;
  _$jscoverage['query.js'][169] = 0;
  _$jscoverage['query.js'][170] = 0;
  _$jscoverage['query.js'][172] = 0;
  _$jscoverage['query.js'][174] = 0;
  _$jscoverage['query.js'][175] = 0;
  _$jscoverage['query.js'][176] = 0;
  _$jscoverage['query.js'][177] = 0;
  _$jscoverage['query.js'][179] = 0;
  _$jscoverage['query.js'][182] = 0;
  _$jscoverage['query.js'][183] = 0;
  _$jscoverage['query.js'][185] = 0;
  _$jscoverage['query.js'][186] = 0;
  _$jscoverage['query.js'][187] = 0;
  _$jscoverage['query.js'][188] = 0;
  _$jscoverage['query.js'][190] = 0;
  _$jscoverage['query.js'][191] = 0;
  _$jscoverage['query.js'][192] = 0;
  _$jscoverage['query.js'][194] = 0;
  _$jscoverage['query.js'][199] = 0;
  _$jscoverage['query.js'][202] = 0;
  _$jscoverage['query.js'][203] = 0;
  _$jscoverage['query.js'][204] = 0;
  _$jscoverage['query.js'][205] = 0;
  _$jscoverage['query.js'][208] = 0;
  _$jscoverage['query.js'][209] = 0;
  _$jscoverage['query.js'][210] = 0;
  _$jscoverage['query.js'][211] = 0;
  _$jscoverage['query.js'][213] = 0;
  _$jscoverage['query.js'][215] = 0;
  _$jscoverage['query.js'][216] = 0;
  _$jscoverage['query.js'][217] = 0;
  _$jscoverage['query.js'][218] = 0;
  _$jscoverage['query.js'][219] = 0;
  _$jscoverage['query.js'][221] = 0;
  _$jscoverage['query.js'][223] = 0;
  _$jscoverage['query.js'][224] = 0;
  _$jscoverage['query.js'][227] = 0;
  _$jscoverage['query.js'][230] = 0;
  _$jscoverage['query.js'][231] = 0;
  _$jscoverage['query.js'][232] = 0;
  _$jscoverage['query.js'][233] = 0;
  _$jscoverage['query.js'][235] = 0;
  _$jscoverage['query.js'][236] = 0;
  _$jscoverage['query.js'][237] = 0;
  _$jscoverage['query.js'][238] = 0;
  _$jscoverage['query.js'][239] = 0;
  _$jscoverage['query.js'][240] = 0;
  _$jscoverage['query.js'][242] = 0;
  _$jscoverage['query.js'][244] = 0;
  _$jscoverage['query.js'][245] = 0;
  _$jscoverage['query.js'][246] = 0;
  _$jscoverage['query.js'][247] = 0;
  _$jscoverage['query.js'][249] = 0;
  _$jscoverage['query.js'][252] = 0;
  _$jscoverage['query.js'][253] = 0;
  _$jscoverage['query.js'][254] = 0;
  _$jscoverage['query.js'][255] = 0;
  _$jscoverage['query.js'][256] = 0;
  _$jscoverage['query.js'][257] = 0;
  _$jscoverage['query.js'][258] = 0;
  _$jscoverage['query.js'][259] = 0;
  _$jscoverage['query.js'][260] = 0;
  _$jscoverage['query.js'][261] = 0;
  _$jscoverage['query.js'][264] = 0;
  _$jscoverage['query.js'][266] = 0;
  _$jscoverage['query.js'][267] = 0;
  _$jscoverage['query.js'][271] = 0;
  _$jscoverage['query.js'][272] = 0;
  _$jscoverage['query.js'][274] = 0;
  _$jscoverage['query.js'][276] = 0;
  _$jscoverage['query.js'][278] = 0;
  _$jscoverage['query.js'][280] = 0;
  _$jscoverage['query.js'][282] = 0;
  _$jscoverage['query.js'][284] = 0;
  _$jscoverage['query.js'][286] = 0;
  _$jscoverage['query.js'][288] = 0;
  _$jscoverage['query.js'][290] = 0;
  _$jscoverage['query.js'][332] = 0;
  _$jscoverage['query.js'][333] = 0;
  _$jscoverage['query.js'][334] = 0;
  _$jscoverage['query.js'][335] = 0;
  _$jscoverage['query.js'][336] = 0;
  _$jscoverage['query.js'][337] = 0;
  _$jscoverage['query.js'][338] = 0;
  _$jscoverage['query.js'][339] = 0;
  _$jscoverage['query.js'][340] = 0;
  _$jscoverage['query.js'][341] = 0;
  _$jscoverage['query.js'][343] = 0;
  _$jscoverage['query.js'][346] = 0;
  _$jscoverage['query.js'][347] = 0;
  _$jscoverage['query.js'][348] = 0;
  _$jscoverage['query.js'][349] = 0;
  _$jscoverage['query.js'][352] = 0;
  _$jscoverage['query.js'][353] = 0;
  _$jscoverage['query.js'][354] = 0;
  _$jscoverage['query.js'][355] = 0;
  _$jscoverage['query.js'][356] = 0;
  _$jscoverage['query.js'][358] = 0;
  _$jscoverage['query.js'][359] = 0;
  _$jscoverage['query.js'][360] = 0;
  _$jscoverage['query.js'][361] = 0;
  _$jscoverage['query.js'][362] = 0;
  _$jscoverage['query.js'][363] = 0;
  _$jscoverage['query.js'][364] = 0;
  _$jscoverage['query.js'][365] = 0;
  _$jscoverage['query.js'][366] = 0;
  _$jscoverage['query.js'][367] = 0;
  _$jscoverage['query.js'][368] = 0;
  _$jscoverage['query.js'][369] = 0;
  _$jscoverage['query.js'][371] = 0;
  _$jscoverage['query.js'][375] = 0;
  _$jscoverage['query.js'][378] = 0;
  _$jscoverage['query.js'][381] = 0;
  _$jscoverage['query.js'][382] = 0;
  _$jscoverage['query.js'][383] = 0;
  _$jscoverage['query.js'][384] = 0;
  _$jscoverage['query.js'][387] = 0;
  _$jscoverage['query.js'][388] = 0;
  _$jscoverage['query.js'][390] = 0;
  _$jscoverage['query.js'][391] = 0;
  _$jscoverage['query.js'][392] = 0;
  _$jscoverage['query.js'][393] = 0;
  _$jscoverage['query.js'][394] = 0;
  _$jscoverage['query.js'][396] = 0;
  _$jscoverage['query.js'][399] = 0;
  _$jscoverage['query.js'][400] = 0;
  _$jscoverage['query.js'][401] = 0;
  _$jscoverage['query.js'][402] = 0;
  _$jscoverage['query.js'][405] = 0;
  _$jscoverage['query.js'][406] = 0;
  _$jscoverage['query.js'][407] = 0;
  _$jscoverage['query.js'][408] = 0;
  _$jscoverage['query.js'][409] = 0;
  _$jscoverage['query.js'][410] = 0;
  _$jscoverage['query.js'][412] = 0;
  _$jscoverage['query.js'][413] = 0;
  _$jscoverage['query.js'][414] = 0;
  _$jscoverage['query.js'][415] = 0;
  _$jscoverage['query.js'][416] = 0;
  _$jscoverage['query.js'][422] = 0;
  _$jscoverage['query.js'][423] = 0;
  _$jscoverage['query.js'][425] = 0;
  _$jscoverage['query.js'][430] = 0;
  _$jscoverage['query.js'][431] = 0;
  _$jscoverage['query.js'][432] = 0;
  _$jscoverage['query.js'][433] = 0;
  _$jscoverage['query.js'][434] = 0;
  _$jscoverage['query.js'][437] = 0;
  _$jscoverage['query.js'][440] = 0;
  _$jscoverage['query.js'][442] = 0;
  _$jscoverage['query.js'][444] = 0;
  _$jscoverage['query.js'][445] = 0;
  _$jscoverage['query.js'][446] = 0;
  _$jscoverage['query.js'][447] = 0;
  _$jscoverage['query.js'][448] = 0;
  _$jscoverage['query.js'][449] = 0;
  _$jscoverage['query.js'][450] = 0;
  _$jscoverage['query.js'][453] = 0;
  _$jscoverage['query.js'][456] = 0;
  _$jscoverage['query.js'][457] = 0;
  _$jscoverage['query.js'][458] = 0;
  _$jscoverage['query.js'][459] = 0;
  _$jscoverage['query.js'][460] = 0;
  _$jscoverage['query.js'][461] = 0;
  _$jscoverage['query.js'][462] = 0;
  _$jscoverage['query.js'][464] = 0;
  _$jscoverage['query.js'][467] = 0;
  _$jscoverage['query.js'][468] = 0;
  _$jscoverage['query.js'][469] = 0;
  _$jscoverage['query.js'][473] = 0;
  _$jscoverage['query.js'][474] = 0;
  _$jscoverage['query.js'][475] = 0;
  _$jscoverage['query.js'][476] = 0;
  _$jscoverage['query.js'][477] = 0;
  _$jscoverage['query.js'][478] = 0;
  _$jscoverage['query.js'][480] = 0;
  _$jscoverage['query.js'][481] = 0;
  _$jscoverage['query.js'][482] = 0;
  _$jscoverage['query.js'][483] = 0;
  _$jscoverage['query.js'][484] = 0;
  _$jscoverage['query.js'][485] = 0;
  _$jscoverage['query.js'][486] = 0;
  _$jscoverage['query.js'][487] = 0;
  _$jscoverage['query.js'][488] = 0;
  _$jscoverage['query.js'][489] = 0;
  _$jscoverage['query.js'][490] = 0;
  _$jscoverage['query.js'][491] = 0;
  _$jscoverage['query.js'][492] = 0;
  _$jscoverage['query.js'][495] = 0;
  _$jscoverage['query.js'][497] = 0;
  _$jscoverage['query.js'][498] = 0;
  _$jscoverage['query.js'][499] = 0;
  _$jscoverage['query.js'][500] = 0;
  _$jscoverage['query.js'][501] = 0;
  _$jscoverage['query.js'][502] = 0;
  _$jscoverage['query.js'][503] = 0;
  _$jscoverage['query.js'][504] = 0;
  _$jscoverage['query.js'][505] = 0;
  _$jscoverage['query.js'][506] = 0;
  _$jscoverage['query.js'][507] = 0;
  _$jscoverage['query.js'][508] = 0;
  _$jscoverage['query.js'][509] = 0;
  _$jscoverage['query.js'][510] = 0;
  _$jscoverage['query.js'][511] = 0;
  _$jscoverage['query.js'][512] = 0;
  _$jscoverage['query.js'][513] = 0;
  _$jscoverage['query.js'][515] = 0;
  _$jscoverage['query.js'][518] = 0;
  _$jscoverage['query.js'][519] = 0;
  _$jscoverage['query.js'][520] = 0;
  _$jscoverage['query.js'][521] = 0;
  _$jscoverage['query.js'][522] = 0;
  _$jscoverage['query.js'][523] = 0;
  _$jscoverage['query.js'][524] = 0;
  _$jscoverage['query.js'][525] = 0;
  _$jscoverage['query.js'][526] = 0;
  _$jscoverage['query.js'][527] = 0;
  _$jscoverage['query.js'][528] = 0;
  _$jscoverage['query.js'][529] = 0;
  _$jscoverage['query.js'][530] = 0;
  _$jscoverage['query.js'][531] = 0;
  _$jscoverage['query.js'][533] = 0;
  _$jscoverage['query.js'][536] = 0;
  _$jscoverage['query.js'][539] = 0;
  _$jscoverage['query.js'][542] = 0;
  _$jscoverage['query.js'][544] = 0;
  _$jscoverage['query.js'][547] = 0;
  _$jscoverage['query.js'][549] = 0;
  _$jscoverage['query.js'][551] = 0;
  _$jscoverage['query.js'][553] = 0;
  _$jscoverage['query.js'][555] = 0;
  _$jscoverage['query.js'][557] = 0;
  _$jscoverage['query.js'][559] = 0;
  _$jscoverage['query.js'][561] = 0;
  _$jscoverage['query.js'][563] = 0;
  _$jscoverage['query.js'][565] = 0;
  _$jscoverage['query.js'][566] = 0;
  _$jscoverage['query.js'][568] = 0;
  _$jscoverage['query.js'][570] = 0;
  _$jscoverage['query.js'][572] = 0;
  _$jscoverage['query.js'][574] = 0;
  _$jscoverage['query.js'][575] = 0;
  _$jscoverage['query.js'][576] = 0;
  _$jscoverage['query.js'][578] = 0;
  _$jscoverage['query.js'][579] = 0;
  _$jscoverage['query.js'][580] = 0;
  _$jscoverage['query.js'][581] = 0;
  _$jscoverage['query.js'][582] = 0;
  _$jscoverage['query.js'][583] = 0;
  _$jscoverage['query.js'][584] = 0;
  _$jscoverage['query.js'][585] = 0;
  _$jscoverage['query.js'][586] = 0;
  _$jscoverage['query.js'][589] = 0;
  _$jscoverage['query.js'][590] = 0;
  _$jscoverage['query.js'][591] = 0;
  _$jscoverage['query.js'][592] = 0;
  _$jscoverage['query.js'][593] = 0;
  _$jscoverage['query.js'][594] = 0;
  _$jscoverage['query.js'][595] = 0;
  _$jscoverage['query.js'][596] = 0;
  _$jscoverage['query.js'][597] = 0;
  _$jscoverage['query.js'][598] = 0;
  _$jscoverage['query.js'][599] = 0;
  _$jscoverage['query.js'][600] = 0;
  _$jscoverage['query.js'][602] = 0;
  _$jscoverage['query.js'][605] = 0;
  _$jscoverage['query.js'][606] = 0;
  _$jscoverage['query.js'][607] = 0;
  _$jscoverage['query.js'][608] = 0;
  _$jscoverage['query.js'][610] = 0;
  _$jscoverage['query.js'][611] = 0;
  _$jscoverage['query.js'][612] = 0;
  _$jscoverage['query.js'][613] = 0;
  _$jscoverage['query.js'][614] = 0;
  _$jscoverage['query.js'][615] = 0;
  _$jscoverage['query.js'][616] = 0;
  _$jscoverage['query.js'][617] = 0;
  _$jscoverage['query.js'][619] = 0;
  _$jscoverage['query.js'][621] = 0;
  _$jscoverage['query.js'][622] = 0;
  _$jscoverage['query.js'][623] = 0;
  _$jscoverage['query.js'][624] = 0;
  _$jscoverage['query.js'][625] = 0;
  _$jscoverage['query.js'][626] = 0;
  _$jscoverage['query.js'][627] = 0;
  _$jscoverage['query.js'][628] = 0;
  _$jscoverage['query.js'][631] = 0;
  _$jscoverage['query.js'][633] = 0;
  _$jscoverage['query.js'][634] = 0;
  _$jscoverage['query.js'][635] = 0;
  _$jscoverage['query.js'][636] = 0;
  _$jscoverage['query.js'][637] = 0;
  _$jscoverage['query.js'][638] = 0;
  _$jscoverage['query.js'][639] = 0;
  _$jscoverage['query.js'][640] = 0;
  _$jscoverage['query.js'][643] = 0;
  _$jscoverage['query.js'][645] = 0;
  _$jscoverage['query.js'][646] = 0;
  _$jscoverage['query.js'][649] = 0;
  _$jscoverage['query.js'][650] = 0;
  _$jscoverage['query.js'][651] = 0;
  _$jscoverage['query.js'][652] = 0;
  _$jscoverage['query.js'][654] = 0;
  _$jscoverage['query.js'][655] = 0;
  _$jscoverage['query.js'][656] = 0;
  _$jscoverage['query.js'][658] = 0;
  _$jscoverage['query.js'][659] = 0;
  _$jscoverage['query.js'][661] = 0;
  _$jscoverage['query.js'][662] = 0;
  _$jscoverage['query.js'][663] = 0;
  _$jscoverage['query.js'][664] = 0;
  _$jscoverage['query.js'][665] = 0;
  _$jscoverage['query.js'][666] = 0;
  _$jscoverage['query.js'][667] = 0;
  _$jscoverage['query.js'][670] = 0;
  _$jscoverage['query.js'][672] = 0;
  _$jscoverage['query.js'][673] = 0;
  _$jscoverage['query.js'][675] = 0;
  _$jscoverage['query.js'][676] = 0;
  _$jscoverage['query.js'][677] = 0;
  _$jscoverage['query.js'][678] = 0;
  _$jscoverage['query.js'][682] = 0;
  _$jscoverage['query.js'][683] = 0;
  _$jscoverage['query.js'][684] = 0;
  _$jscoverage['query.js'][685] = 0;
  _$jscoverage['query.js'][687] = 0;
  _$jscoverage['query.js'][688] = 0;
  _$jscoverage['query.js'][689] = 0;
  _$jscoverage['query.js'][690] = 0;
  _$jscoverage['query.js'][691] = 0;
  _$jscoverage['query.js'][692] = 0;
  _$jscoverage['query.js'][693] = 0;
  _$jscoverage['query.js'][694] = 0;
  _$jscoverage['query.js'][696] = 0;
  _$jscoverage['query.js'][698] = 0;
  _$jscoverage['query.js'][699] = 0;
  _$jscoverage['query.js'][700] = 0;
  _$jscoverage['query.js'][701] = 0;
  _$jscoverage['query.js'][702] = 0;
  _$jscoverage['query.js'][703] = 0;
  _$jscoverage['query.js'][704] = 0;
  _$jscoverage['query.js'][707] = 0;
  _$jscoverage['query.js'][709] = 0;
  _$jscoverage['query.js'][710] = 0;
  _$jscoverage['query.js'][712] = 0;
  _$jscoverage['query.js'][713] = 0;
  _$jscoverage['query.js'][714] = 0;
  _$jscoverage['query.js'][715] = 0;
  _$jscoverage['query.js'][716] = 0;
  _$jscoverage['query.js'][717] = 0;
  _$jscoverage['query.js'][718] = 0;
  _$jscoverage['query.js'][719] = 0;
  _$jscoverage['query.js'][720] = 0;
  _$jscoverage['query.js'][721] = 0;
  _$jscoverage['query.js'][722] = 0;
  _$jscoverage['query.js'][723] = 0;
  _$jscoverage['query.js'][726] = 0;
  _$jscoverage['query.js'][728] = 0;
  _$jscoverage['query.js'][731] = 0;
  _$jscoverage['query.js'][733] = 0;
  _$jscoverage['query.js'][734] = 0;
  _$jscoverage['query.js'][736] = 0;
  _$jscoverage['query.js'][737] = 0;
  _$jscoverage['query.js'][740] = 0;
  _$jscoverage['query.js'][741] = 0;
  _$jscoverage['query.js'][742] = 0;
  _$jscoverage['query.js'][743] = 0;
  _$jscoverage['query.js'][744] = 0;
  _$jscoverage['query.js'][745] = 0;
  _$jscoverage['query.js'][747] = 0;
  _$jscoverage['query.js'][748] = 0;
  _$jscoverage['query.js'][750] = 0;
  _$jscoverage['query.js'][753] = 0;
  _$jscoverage['query.js'][754] = 0;
  _$jscoverage['query.js'][755] = 0;
  _$jscoverage['query.js'][756] = 0;
  _$jscoverage['query.js'][757] = 0;
  _$jscoverage['query.js'][760] = 0;
  _$jscoverage['query.js'][762] = 0;
  _$jscoverage['query.js'][765] = 0;
  _$jscoverage['query.js'][766] = 0;
  _$jscoverage['query.js'][768] = 0;
  _$jscoverage['query.js'][769] = 0;
  _$jscoverage['query.js'][771] = 0;
  _$jscoverage['query.js'][772] = 0;
  _$jscoverage['query.js'][773] = 0;
  _$jscoverage['query.js'][774] = 0;
  _$jscoverage['query.js'][775] = 0;
  _$jscoverage['query.js'][776] = 0;
  _$jscoverage['query.js'][778] = 0;
  _$jscoverage['query.js'][779] = 0;
  _$jscoverage['query.js'][780] = 0;
  _$jscoverage['query.js'][782] = 0;
  _$jscoverage['query.js'][783] = 0;
  _$jscoverage['query.js'][784] = 0;
  _$jscoverage['query.js'][785] = 0;
  _$jscoverage['query.js'][786] = 0;
  _$jscoverage['query.js'][787] = 0;
  _$jscoverage['query.js'][788] = 0;
  _$jscoverage['query.js'][790] = 0;
  _$jscoverage['query.js'][792] = 0;
  _$jscoverage['query.js'][795] = 0;
  _$jscoverage['query.js'][796] = 0;
  _$jscoverage['query.js'][798] = 0;
  _$jscoverage['query.js'][801] = 0;
  _$jscoverage['query.js'][802] = 0;
  _$jscoverage['query.js'][803] = 0;
  _$jscoverage['query.js'][804] = 0;
  _$jscoverage['query.js'][805] = 0;
  _$jscoverage['query.js'][806] = 0;
  _$jscoverage['query.js'][808] = 0;
  _$jscoverage['query.js'][811] = 0;
  _$jscoverage['query.js'][813] = 0;
  _$jscoverage['query.js'][814] = 0;
  _$jscoverage['query.js'][817] = 0;
  _$jscoverage['query.js'][819] = 0;
  _$jscoverage['query.js'][820] = 0;
  _$jscoverage['query.js'][823] = 0;
  _$jscoverage['query.js'][824] = 0;
  _$jscoverage['query.js'][827] = 0;
  _$jscoverage['query.js'][828] = 0;
  _$jscoverage['query.js'][830] = 0;
  _$jscoverage['query.js'][831] = 0;
  _$jscoverage['query.js'][833] = 0;
  _$jscoverage['query.js'][834] = 0;
  _$jscoverage['query.js'][835] = 0;
  _$jscoverage['query.js'][836] = 0;
  _$jscoverage['query.js'][837] = 0;
  _$jscoverage['query.js'][838] = 0;
  _$jscoverage['query.js'][839] = 0;
  _$jscoverage['query.js'][841] = 0;
  _$jscoverage['query.js'][845] = 0;
  _$jscoverage['query.js'][846] = 0;
  _$jscoverage['query.js'][847] = 0;
  _$jscoverage['query.js'][848] = 0;
  _$jscoverage['query.js'][849] = 0;
  _$jscoverage['query.js'][851] = 0;
  _$jscoverage['query.js'][852] = 0;
  _$jscoverage['query.js'][854] = 0;
  _$jscoverage['query.js'][855] = 0;
  _$jscoverage['query.js'][856] = 0;
  _$jscoverage['query.js'][861] = 0;
  _$jscoverage['query.js'][862] = 0;
  _$jscoverage['query.js'][864] = 0;
  _$jscoverage['query.js'][865] = 0;
  _$jscoverage['query.js'][867] = 0;
  _$jscoverage['query.js'][868] = 0;
  _$jscoverage['query.js'][869] = 0;
  _$jscoverage['query.js'][871] = 0;
  _$jscoverage['query.js'][872] = 0;
  _$jscoverage['query.js'][874] = 0;
  _$jscoverage['query.js'][875] = 0;
  _$jscoverage['query.js'][876] = 0;
  _$jscoverage['query.js'][879] = 0;
  _$jscoverage['query.js'][882] = 0;
  _$jscoverage['query.js'][883] = 0;
  _$jscoverage['query.js'][886] = 0;
  _$jscoverage['query.js'][887] = 0;
  _$jscoverage['query.js'][888] = 0;
  _$jscoverage['query.js'][889] = 0;
  _$jscoverage['query.js'][890] = 0;
  _$jscoverage['query.js'][891] = 0;
  _$jscoverage['query.js'][892] = 0;
  _$jscoverage['query.js'][893] = 0;
  _$jscoverage['query.js'][894] = 0;
  _$jscoverage['query.js'][895] = 0;
  _$jscoverage['query.js'][896] = 0;
  _$jscoverage['query.js'][898] = 0;
  _$jscoverage['query.js'][899] = 0;
  _$jscoverage['query.js'][900] = 0;
  _$jscoverage['query.js'][902] = 0;
  _$jscoverage['query.js'][905] = 0;
  _$jscoverage['query.js'][907] = 0;
  _$jscoverage['query.js'][910] = 0;
  _$jscoverage['query.js'][911] = 0;
  _$jscoverage['query.js'][912] = 0;
  _$jscoverage['query.js'][913] = 0;
  _$jscoverage['query.js'][914] = 0;
  _$jscoverage['query.js'][915] = 0;
  _$jscoverage['query.js'][916] = 0;
  _$jscoverage['query.js'][917] = 0;
  _$jscoverage['query.js'][918] = 0;
  _$jscoverage['query.js'][919] = 0;
  _$jscoverage['query.js'][920] = 0;
  _$jscoverage['query.js'][921] = 0;
  _$jscoverage['query.js'][922] = 0;
  _$jscoverage['query.js'][925] = 0;
  _$jscoverage['query.js'][927] = 0;
  _$jscoverage['query.js'][928] = 0;
  _$jscoverage['query.js'][929] = 0;
  _$jscoverage['query.js'][930] = 0;
  _$jscoverage['query.js'][933] = 0;
  _$jscoverage['query.js'][935] = 0;
  _$jscoverage['query.js'][938] = 0;
  _$jscoverage['query.js'][939] = 0;
  _$jscoverage['query.js'][940] = 0;
  _$jscoverage['query.js'][941] = 0;
  _$jscoverage['query.js'][942] = 0;
  _$jscoverage['query.js'][944] = 0;
  _$jscoverage['query.js'][945] = 0;
  _$jscoverage['query.js'][946] = 0;
  _$jscoverage['query.js'][947] = 0;
  _$jscoverage['query.js'][951] = 0;
  _$jscoverage['query.js'][952] = 0;
  _$jscoverage['query.js'][953] = 0;
  _$jscoverage['query.js'][954] = 0;
  _$jscoverage['query.js'][955] = 0;
  _$jscoverage['query.js'][956] = 0;
  _$jscoverage['query.js'][958] = 0;
  _$jscoverage['query.js'][959] = 0;
  _$jscoverage['query.js'][960] = 0;
  _$jscoverage['query.js'][961] = 0;
  _$jscoverage['query.js'][962] = 0;
  _$jscoverage['query.js'][963] = 0;
  _$jscoverage['query.js'][964] = 0;
  _$jscoverage['query.js'][965] = 0;
  _$jscoverage['query.js'][966] = 0;
  _$jscoverage['query.js'][967] = 0;
  _$jscoverage['query.js'][968] = 0;
  _$jscoverage['query.js'][969] = 0;
  _$jscoverage['query.js'][972] = 0;
  _$jscoverage['query.js'][975] = 0;
  _$jscoverage['query.js'][976] = 0;
  _$jscoverage['query.js'][977] = 0;
  _$jscoverage['query.js'][978] = 0;
  _$jscoverage['query.js'][979] = 0;
  _$jscoverage['query.js'][980] = 0;
  _$jscoverage['query.js'][981] = 0;
  _$jscoverage['query.js'][983] = 0;
  _$jscoverage['query.js'][985] = 0;
  _$jscoverage['query.js'][988] = 0;
  _$jscoverage['query.js'][991] = 0;
  _$jscoverage['query.js'][992] = 0;
  _$jscoverage['query.js'][995] = 0;
  _$jscoverage['query.js'][996] = 0;
  _$jscoverage['query.js'][997] = 0;
  _$jscoverage['query.js'][1000] = 0;
  _$jscoverage['query.js'][1001] = 0;
  _$jscoverage['query.js'][1002] = 0;
  _$jscoverage['query.js'][1004] = 0;
  _$jscoverage['query.js'][1008] = 0;
  _$jscoverage['query.js'][1009] = 0;
  _$jscoverage['query.js'][1010] = 0;
  _$jscoverage['query.js'][1011] = 0;
  _$jscoverage['query.js'][1012] = 0;
  _$jscoverage['query.js'][1013] = 0;
  _$jscoverage['query.js'][1014] = 0;
  _$jscoverage['query.js'][1018] = 0;
  _$jscoverage['query.js'][1019] = 0;
  _$jscoverage['query.js'][1021] = 0;
  _$jscoverage['query.js'][1022] = 0;
  _$jscoverage['query.js'][1026] = 0;
  _$jscoverage['query.js'][1027] = 0;
  _$jscoverage['query.js'][1030] = 0;
  _$jscoverage['query.js'][1031] = 0;
  _$jscoverage['query.js'][1032] = 0;
  _$jscoverage['query.js'][1033] = 0;
  _$jscoverage['query.js'][1034] = 0;
  _$jscoverage['query.js'][1036] = 0;
  _$jscoverage['query.js'][1037] = 0;
  _$jscoverage['query.js'][1038] = 0;
  _$jscoverage['query.js'][1039] = 0;
  _$jscoverage['query.js'][1040] = 0;
  _$jscoverage['query.js'][1041] = 0;
  _$jscoverage['query.js'][1045] = 0;
  _$jscoverage['query.js'][1048] = 0;
  _$jscoverage['query.js'][1049] = 0;
  _$jscoverage['query.js'][1050] = 0;
  _$jscoverage['query.js'][1051] = 0;
  _$jscoverage['query.js'][1052] = 0;
  _$jscoverage['query.js'][1053] = 0;
  _$jscoverage['query.js'][1054] = 0;
  _$jscoverage['query.js'][1055] = 0;
  _$jscoverage['query.js'][1057] = 0;
  _$jscoverage['query.js'][1060] = 0;
  _$jscoverage['query.js'][1061] = 0;
  _$jscoverage['query.js'][1064] = 0;
  _$jscoverage['query.js'][1065] = 0;
  _$jscoverage['query.js'][1066] = 0;
  _$jscoverage['query.js'][1067] = 0;
  _$jscoverage['query.js'][1070] = 0;
  _$jscoverage['query.js'][1071] = 0;
  _$jscoverage['query.js'][1072] = 0;
  _$jscoverage['query.js'][1073] = 0;
  _$jscoverage['query.js'][1074] = 0;
  _$jscoverage['query.js'][1075] = 0;
  _$jscoverage['query.js'][1076] = 0;
  _$jscoverage['query.js'][1078] = 0;
  _$jscoverage['query.js'][1082] = 0;
  _$jscoverage['query.js'][1083] = 0;
  _$jscoverage['query.js'][1085] = 0;
  _$jscoverage['query.js'][1086] = 0;
  _$jscoverage['query.js'][1089] = 0;
  _$jscoverage['query.js'][1090] = 0;
  _$jscoverage['query.js'][1091] = 0;
  _$jscoverage['query.js'][1092] = 0;
  _$jscoverage['query.js'][1094] = 0;
  _$jscoverage['query.js'][1095] = 0;
  _$jscoverage['query.js'][1097] = 0;
  _$jscoverage['query.js'][1098] = 0;
  _$jscoverage['query.js'][1099] = 0;
  _$jscoverage['query.js'][1100] = 0;
  _$jscoverage['query.js'][1102] = 0;
  _$jscoverage['query.js'][1107] = 0;
  _$jscoverage['query.js'][1108] = 0;
  _$jscoverage['query.js'][1110] = 0;
  _$jscoverage['query.js'][1111] = 0;
  _$jscoverage['query.js'][1113] = 0;
  _$jscoverage['query.js'][1116] = 0;
  _$jscoverage['query.js'][1117] = 0;
  _$jscoverage['query.js'][1118] = 0;
  _$jscoverage['query.js'][1119] = 0;
  _$jscoverage['query.js'][1120] = 0;
  _$jscoverage['query.js'][1122] = 0;
  _$jscoverage['query.js'][1123] = 0;
  _$jscoverage['query.js'][1124] = 0;
  _$jscoverage['query.js'][1125] = 0;
  _$jscoverage['query.js'][1126] = 0;
  _$jscoverage['query.js'][1127] = 0;
  _$jscoverage['query.js'][1129] = 0;
  _$jscoverage['query.js'][1131] = 0;
  _$jscoverage['query.js'][1134] = 0;
  _$jscoverage['query.js'][1135] = 0;
  _$jscoverage['query.js'][1136] = 0;
  _$jscoverage['query.js'][1137] = 0;
  _$jscoverage['query.js'][1138] = 0;
  _$jscoverage['query.js'][1140] = 0;
  _$jscoverage['query.js'][1143] = 0;
  _$jscoverage['query.js'][1144] = 0;
  _$jscoverage['query.js'][1145] = 0;
  _$jscoverage['query.js'][1146] = 0;
  _$jscoverage['query.js'][1147] = 0;
  _$jscoverage['query.js'][1149] = 0;
  _$jscoverage['query.js'][1151] = 0;
  _$jscoverage['query.js'][1154] = 0;
  _$jscoverage['query.js'][1155] = 0;
  _$jscoverage['query.js'][1156] = 0;
  _$jscoverage['query.js'][1157] = 0;
  _$jscoverage['query.js'][1158] = 0;
  _$jscoverage['query.js'][1159] = 0;
  _$jscoverage['query.js'][1160] = 0;
  _$jscoverage['query.js'][1161] = 0;
  _$jscoverage['query.js'][1164] = 0;
  _$jscoverage['query.js'][1167] = 0;
  _$jscoverage['query.js'][1168] = 0;
  _$jscoverage['query.js'][1169] = 0;
  _$jscoverage['query.js'][1170] = 0;
  _$jscoverage['query.js'][1171] = 0;
  _$jscoverage['query.js'][1172] = 0;
  _$jscoverage['query.js'][1173] = 0;
  _$jscoverage['query.js'][1174] = 0;
  _$jscoverage['query.js'][1177] = 0;
  _$jscoverage['query.js'][1180] = 0;
  _$jscoverage['query.js'][1181] = 0;
  _$jscoverage['query.js'][1183] = 0;
  _$jscoverage['query.js'][1184] = 0;
  _$jscoverage['query.js'][1185] = 0;
  _$jscoverage['query.js'][1186] = 0;
  _$jscoverage['query.js'][1187] = 0;
  _$jscoverage['query.js'][1188] = 0;
  _$jscoverage['query.js'][1190] = 0;
  _$jscoverage['query.js'][1192] = 0;
  _$jscoverage['query.js'][1194] = 0;
  _$jscoverage['query.js'][1195] = 0;
  _$jscoverage['query.js'][1199] = 0;
  _$jscoverage['query.js'][1200] = 0;
  _$jscoverage['query.js'][1201] = 0;
  _$jscoverage['query.js'][1202] = 0;
  _$jscoverage['query.js'][1203] = 0;
  _$jscoverage['query.js'][1207] = 0;
  _$jscoverage['query.js'][1208] = 0;
  _$jscoverage['query.js'][1209] = 0;
  _$jscoverage['query.js'][1213] = 0;
  _$jscoverage['query.js'][1214] = 0;
  _$jscoverage['query.js'][1215] = 0;
  _$jscoverage['query.js'][1216] = 0;
  _$jscoverage['query.js'][1218] = 0;
  _$jscoverage['query.js'][1223] = 0;
  _$jscoverage['query.js'][1224] = 0;
  _$jscoverage['query.js'][1225] = 0;
  _$jscoverage['query.js'][1228] = 0;
  _$jscoverage['query.js'][1229] = 0;
  _$jscoverage['query.js'][1230] = 0;
  _$jscoverage['query.js'][1231] = 0;
  _$jscoverage['query.js'][1232] = 0;
  _$jscoverage['query.js'][1233] = 0;
  _$jscoverage['query.js'][1234] = 0;
  _$jscoverage['query.js'][1235] = 0;
  _$jscoverage['query.js'][1236] = 0;
  _$jscoverage['query.js'][1237] = 0;
  _$jscoverage['query.js'][1238] = 0;
  _$jscoverage['query.js'][1239] = 0;
  _$jscoverage['query.js'][1242] = 0;
  _$jscoverage['query.js'][1246] = 0;
  _$jscoverage['query.js'][1247] = 0;
  _$jscoverage['query.js'][1248] = 0;
  _$jscoverage['query.js'][1249] = 0;
  _$jscoverage['query.js'][1252] = 0;
  _$jscoverage['query.js'][1253] = 0;
  _$jscoverage['query.js'][1254] = 0;
  _$jscoverage['query.js'][1255] = 0;
  _$jscoverage['query.js'][1256] = 0;
  _$jscoverage['query.js'][1257] = 0;
  _$jscoverage['query.js'][1259] = 0;
  _$jscoverage['query.js'][1262] = 0;
  _$jscoverage['query.js'][1263] = 0;
  _$jscoverage['query.js'][1264] = 0;
  _$jscoverage['query.js'][1265] = 0;
  _$jscoverage['query.js'][1266] = 0;
  _$jscoverage['query.js'][1267] = 0;
  _$jscoverage['query.js'][1268] = 0;
  _$jscoverage['query.js'][1270] = 0;
  _$jscoverage['query.js'][1272] = 0;
  _$jscoverage['query.js'][1273] = 0;
  _$jscoverage['query.js'][1274] = 0;
  _$jscoverage['query.js'][1275] = 0;
  _$jscoverage['query.js'][1280] = 0;
  _$jscoverage['query.js'][1284] = 0;
  _$jscoverage['query.js'][1285] = 0;
  _$jscoverage['query.js'][1286] = 0;
  _$jscoverage['query.js'][1287] = 0;
  _$jscoverage['query.js'][1292] = 0;
  _$jscoverage['query.js'][1293] = 0;
  _$jscoverage['query.js'][1294] = 0;
  _$jscoverage['query.js'][1295] = 0;
  _$jscoverage['query.js'][1297] = 0;
  _$jscoverage['query.js'][1298] = 0;
  _$jscoverage['query.js'][1301] = 0;
  _$jscoverage['query.js'][1302] = 0;
  _$jscoverage['query.js'][1303] = 0;
  _$jscoverage['query.js'][1305] = 0;
  _$jscoverage['query.js'][1306] = 0;
  _$jscoverage['query.js'][1307] = 0;
  _$jscoverage['query.js'][1308] = 0;
  _$jscoverage['query.js'][1309] = 0;
  _$jscoverage['query.js'][1314] = 0;
  _$jscoverage['query.js'][1317] = 0;
  _$jscoverage['query.js'][1318] = 0;
  _$jscoverage['query.js'][1320] = 0;
  _$jscoverage['query.js'][1321] = 0;
  _$jscoverage['query.js'][1322] = 0;
  _$jscoverage['query.js'][1323] = 0;
  _$jscoverage['query.js'][1324] = 0;
  _$jscoverage['query.js'][1327] = 0;
  _$jscoverage['query.js'][1328] = 0;
  _$jscoverage['query.js'][1330] = 0;
  _$jscoverage['query.js'][1331] = 0;
  _$jscoverage['query.js'][1332] = 0;
  _$jscoverage['query.js'][1335] = 0;
  _$jscoverage['query.js'][1336] = 0;
  _$jscoverage['query.js'][1337] = 0;
  _$jscoverage['query.js'][1340] = 0;
  _$jscoverage['query.js'][1341] = 0;
  _$jscoverage['query.js'][1342] = 0;
  _$jscoverage['query.js'][1344] = 0;
  _$jscoverage['query.js'][1346] = 0;
  _$jscoverage['query.js'][1347] = 0;
  _$jscoverage['query.js'][1348] = 0;
  _$jscoverage['query.js'][1349] = 0;
  _$jscoverage['query.js'][1351] = 0;
  _$jscoverage['query.js'][1354] = 0;
  _$jscoverage['query.js'][1355] = 0;
  _$jscoverage['query.js'][1356] = 0;
  _$jscoverage['query.js'][1358] = 0;
  _$jscoverage['query.js'][1359] = 0;
  _$jscoverage['query.js'][1360] = 0;
  _$jscoverage['query.js'][1362] = 0;
  _$jscoverage['query.js'][1365] = 0;
  _$jscoverage['query.js'][1366] = 0;
  _$jscoverage['query.js'][1367] = 0;
  _$jscoverage['query.js'][1368] = 0;
  _$jscoverage['query.js'][1369] = 0;
  _$jscoverage['query.js'][1370] = 0;
  _$jscoverage['query.js'][1371] = 0;
  _$jscoverage['query.js'][1372] = 0;
  _$jscoverage['query.js'][1373] = 0;
  _$jscoverage['query.js'][1375] = 0;
  _$jscoverage['query.js'][1379] = 0;
  _$jscoverage['query.js'][1380] = 0;
  _$jscoverage['query.js'][1381] = 0;
  _$jscoverage['query.js'][1382] = 0;
  _$jscoverage['query.js'][1383] = 0;
  _$jscoverage['query.js'][1384] = 0;
  _$jscoverage['query.js'][1385] = 0;
  _$jscoverage['query.js'][1386] = 0;
  _$jscoverage['query.js'][1387] = 0;
  _$jscoverage['query.js'][1388] = 0;
  _$jscoverage['query.js'][1391] = 0;
  _$jscoverage['query.js'][1393] = 0;
  _$jscoverage['query.js'][1394] = 0;
  _$jscoverage['query.js'][1395] = 0;
  _$jscoverage['query.js'][1398] = 0;
  _$jscoverage['query.js'][1402] = 0;
  _$jscoverage['query.js'][1403] = 0;
  _$jscoverage['query.js'][1404] = 0;
  _$jscoverage['query.js'][1405] = 0;
  _$jscoverage['query.js'][1406] = 0;
  _$jscoverage['query.js'][1407] = 0;
  _$jscoverage['query.js'][1408] = 0;
  _$jscoverage['query.js'][1409] = 0;
  _$jscoverage['query.js'][1410] = 0;
  _$jscoverage['query.js'][1411] = 0;
  _$jscoverage['query.js'][1414] = 0;
  _$jscoverage['query.js'][1416] = 0;
  _$jscoverage['query.js'][1419] = 0;
  _$jscoverage['query.js'][1420] = 0;
  _$jscoverage['query.js'][1421] = 0;
  _$jscoverage['query.js'][1427] = 0;
  _$jscoverage['query.js'][1428] = 0;
  _$jscoverage['query.js'][1430] = 0;
  _$jscoverage['query.js'][1431] = 0;
  _$jscoverage['query.js'][1432] = 0;
  _$jscoverage['query.js'][1433] = 0;
  _$jscoverage['query.js'][1434] = 0;
  _$jscoverage['query.js'][1435] = 0;
  _$jscoverage['query.js'][1436] = 0;
  _$jscoverage['query.js'][1439] = 0;
  _$jscoverage['query.js'][1441] = 0;
  _$jscoverage['query.js'][1444] = 0;
  _$jscoverage['query.js'][1445] = 0;
  _$jscoverage['query.js'][1446] = 0;
  _$jscoverage['query.js'][1454] = 0;
  _$jscoverage['query.js'][1455] = 0;
  _$jscoverage['query.js'][1456] = 0;
  _$jscoverage['query.js'][1457] = 0;
  _$jscoverage['query.js'][1458] = 0;
  _$jscoverage['query.js'][1459] = 0;
  _$jscoverage['query.js'][1461] = 0;
  _$jscoverage['query.js'][1464] = 0;
  _$jscoverage['query.js'][1465] = 0;
  _$jscoverage['query.js'][1466] = 0;
  _$jscoverage['query.js'][1467] = 0;
  _$jscoverage['query.js'][1468] = 0;
  _$jscoverage['query.js'][1469] = 0;
  _$jscoverage['query.js'][1474] = 0;
  _$jscoverage['query.js'][1477] = 0;
  _$jscoverage['query.js'][1478] = 0;
  _$jscoverage['query.js'][1479] = 0;
  _$jscoverage['query.js'][1480] = 0;
  _$jscoverage['query.js'][1481] = 0;
  _$jscoverage['query.js'][1482] = 0;
  _$jscoverage['query.js'][1483] = 0;
  _$jscoverage['query.js'][1486] = 0;
  _$jscoverage['query.js'][1489] = 0;
  _$jscoverage['query.js'][1490] = 0;
  _$jscoverage['query.js'][1491] = 0;
  _$jscoverage['query.js'][1492] = 0;
  _$jscoverage['query.js'][1493] = 0;
  _$jscoverage['query.js'][1494] = 0;
  _$jscoverage['query.js'][1496] = 0;
  _$jscoverage['query.js'][1501] = 0;
  _$jscoverage['query.js'][1502] = 0;
  _$jscoverage['query.js'][1503] = 0;
  _$jscoverage['query.js'][1507] = 0;
  _$jscoverage['query.js'][1510] = 0;
  _$jscoverage['query.js'][1511] = 0;
  _$jscoverage['query.js'][1513] = 0;
  _$jscoverage['query.js'][1514] = 0;
  _$jscoverage['query.js'][1516] = 0;
  _$jscoverage['query.js'][1523] = 0;
  _$jscoverage['query.js'][1524] = 0;
  _$jscoverage['query.js'][1526] = 0;
  _$jscoverage['query.js'][1529] = 0;
  _$jscoverage['query.js'][1530] = 0;
  _$jscoverage['query.js'][1531] = 0;
  _$jscoverage['query.js'][1536] = 0;
  _$jscoverage['query.js'][1537] = 0;
  _$jscoverage['query.js'][1539] = 0;
  _$jscoverage['query.js'][1542] = 0;
  _$jscoverage['query.js'][1543] = 0;
  _$jscoverage['query.js'][1544] = 0;
  _$jscoverage['query.js'][1545] = 0;
  _$jscoverage['query.js'][1547] = 0;
  _$jscoverage['query.js'][1548] = 0;
  _$jscoverage['query.js'][1550] = 0;
  _$jscoverage['query.js'][1554] = 0;
  _$jscoverage['query.js'][1555] = 0;
  _$jscoverage['query.js'][1557] = 0;
  _$jscoverage['query.js'][1560] = 0;
  _$jscoverage['query.js'][1561] = 0;
  _$jscoverage['query.js'][1566] = 0;
  _$jscoverage['query.js'][1567] = 0;
  _$jscoverage['query.js'][1570] = 0;
  _$jscoverage['query.js'][1571] = 0;
  _$jscoverage['query.js'][1572] = 0;
  _$jscoverage['query.js'][1573] = 0;
  _$jscoverage['query.js'][1574] = 0;
  _$jscoverage['query.js'][1575] = 0;
  _$jscoverage['query.js'][1578] = 0;
  _$jscoverage['query.js'][1579] = 0;
  _$jscoverage['query.js'][1580] = 0;
  _$jscoverage['query.js'][1581] = 0;
  _$jscoverage['query.js'][1582] = 0;
  _$jscoverage['query.js'][1583] = 0;
  _$jscoverage['query.js'][1584] = 0;
  _$jscoverage['query.js'][1585] = 0;
  _$jscoverage['query.js'][1588] = 0;
  _$jscoverage['query.js'][1590] = 0;
  _$jscoverage['query.js'][1596] = 0;
  _$jscoverage['query.js'][1597] = 0;
  _$jscoverage['query.js'][1600] = 0;
  _$jscoverage['query.js'][1601] = 0;
  _$jscoverage['query.js'][1604] = 0;
  _$jscoverage['query.js'][1606] = 0;
  _$jscoverage['query.js'][1610] = 0;
  _$jscoverage['query.js'][1611] = 0;
  _$jscoverage['query.js'][1614] = 0;
  _$jscoverage['query.js'][1616] = 0;
  _$jscoverage['query.js'][1618] = 0;
  _$jscoverage['query.js'][1619] = 0;
  _$jscoverage['query.js'][1620] = 0;
  _$jscoverage['query.js'][1621] = 0;
  _$jscoverage['query.js'][1622] = 0;
  _$jscoverage['query.js'][1623] = 0;
  _$jscoverage['query.js'][1624] = 0;
  _$jscoverage['query.js'][1625] = 0;
  _$jscoverage['query.js'][1626] = 0;
  _$jscoverage['query.js'][1627] = 0;
  _$jscoverage['query.js'][1629] = 0;
  _$jscoverage['query.js'][1630] = 0;
  _$jscoverage['query.js'][1632] = 0;
  _$jscoverage['query.js'][1633] = 0;
  _$jscoverage['query.js'][1635] = 0;
  _$jscoverage['query.js'][1636] = 0;
  _$jscoverage['query.js'][1637] = 0;
  _$jscoverage['query.js'][1638] = 0;
  _$jscoverage['query.js'][1639] = 0;
  _$jscoverage['query.js'][1640] = 0;
  _$jscoverage['query.js'][1641] = 0;
  _$jscoverage['query.js'][1642] = 0;
  _$jscoverage['query.js'][1644] = 0;
  _$jscoverage['query.js'][1647] = 0;
  _$jscoverage['query.js'][1648] = 0;
  _$jscoverage['query.js'][1650] = 0;
  _$jscoverage['query.js'][1651] = 0;
  _$jscoverage['query.js'][1652] = 0;
  _$jscoverage['query.js'][1653] = 0;
  _$jscoverage['query.js'][1655] = 0;
  _$jscoverage['query.js'][1656] = 0;
  _$jscoverage['query.js'][1658] = 0;
  _$jscoverage['query.js'][1659] = 0;
  _$jscoverage['query.js'][1660] = 0;
  _$jscoverage['query.js'][1661] = 0;
  _$jscoverage['query.js'][1662] = 0;
  _$jscoverage['query.js'][1663] = 0;
  _$jscoverage['query.js'][1664] = 0;
  _$jscoverage['query.js'][1665] = 0;
  _$jscoverage['query.js'][1667] = 0;
  _$jscoverage['query.js'][1670] = 0;
  _$jscoverage['query.js'][1671] = 0;
  _$jscoverage['query.js'][1672] = 0;
  _$jscoverage['query.js'][1674] = 0;
  _$jscoverage['query.js'][1677] = 0;
  _$jscoverage['query.js'][1678] = 0;
  _$jscoverage['query.js'][1679] = 0;
  _$jscoverage['query.js'][1682] = 0;
  _$jscoverage['query.js'][1683] = 0;
  _$jscoverage['query.js'][1684] = 0;
  _$jscoverage['query.js'][1685] = 0;
  _$jscoverage['query.js'][1686] = 0;
  _$jscoverage['query.js'][1687] = 0;
  _$jscoverage['query.js'][1688] = 0;
  _$jscoverage['query.js'][1689] = 0;
  _$jscoverage['query.js'][1690] = 0;
  _$jscoverage['query.js'][1691] = 0;
  _$jscoverage['query.js'][1692] = 0;
  _$jscoverage['query.js'][1693] = 0;
  _$jscoverage['query.js'][1694] = 0;
  _$jscoverage['query.js'][1695] = 0;
  _$jscoverage['query.js'][1696] = 0;
  _$jscoverage['query.js'][1698] = 0;
  _$jscoverage['query.js'][1701] = 0;
  _$jscoverage['query.js'][1705] = 0;
  _$jscoverage['query.js'][1707] = 0;
  _$jscoverage['query.js'][1712] = 0;
  _$jscoverage['query.js'][1713] = 0;
  _$jscoverage['query.js'][1714] = 0;
  _$jscoverage['query.js'][1717] = 0;
}
_$jscoverage['query.js'].source = ["(function() {","  var BASIC_ATTRS, CODES, LIST_PIPE, Query, RESULTS_METHODS, SIMPLE_ATTRS, conAttrs, conStr, conToJSON, conValStr, concatMap, copyCon, decapitate, didntRemove, f, filter, fold, get, get_canonical_op, headLess, id, idConStr, intermine, interpretConArray, interpretConstraint, invoke, merge, mth, multiConStr, noUndefVals, noValueConStr, pairsToObj, partition, removeIrrelevantSortOrders, simpleConStr, stringToSortOrder, take, toQueryString, typeConStr, union, utils, withCB, _fn, _get_data_fetcher, _i, _j, _len, _len1, _ref,","    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i &lt; l; i++) { if (i in this &amp;&amp; this[i] === item) return i; } return -1; },","    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },","    __slice = [].slice,","    __hasProp = {}.hasOwnProperty;","","  intermine = exports;","","  intermine.xml = require('./xml');","","  utils = require('./util');","","  withCB = utils.withCB, merge = utils.merge, pairsToObj = utils.pairsToObj, filter = utils.filter, partition = utils.partition, fold = utils.fold, take = utils.take, concatMap = utils.concatMap, id = utils.id, get = utils.get, invoke = utils.invoke;","","  toQueryString = utils.querystring;","","  get_canonical_op = function(orig) {","    var canonical;","    canonical = (orig != null ? orig.toLowerCase : void 0) != null ? Query.OP_DICT[orig.toLowerCase()] : null;","    if (!canonical) {","      throw new Error(\"Illegal constraint operator: \" + orig);","    }","    return canonical;","  };","","  BASIC_ATTRS = ['path', 'op', 'code'];","","  SIMPLE_ATTRS = BASIC_ATTRS.concat(['value', 'extraValue']);","","  RESULTS_METHODS = ['rowByRow', 'eachRow', 'recordByRecord', 'eachRecord', 'records', 'rows', 'table', 'tableRows', 'values'];","","  LIST_PIPE = function(service) {","    return utils.compose(service.fetchList, get('listName'));","  };","","  CODES = [null, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];","","  decapitate = function(x) {","    if (x == null) {","      x = '';","    }","    return x.substr(x.indexOf('.'));","  };","","  conValStr = function(v) {","    if (v != null) {","      return \"&lt;value&gt;\" + (utils.escape(v)) + \"&lt;/value&gt;\";","    } else {","      return \"&lt;nullValue/&gt;\";","    }","  };","","  conAttrs = function(c, names) {","    var k, v;","    return ((function() {","      var _results;","      _results = [];","      for (k in c) {","        v = c[k];","        if ((__indexOf.call(names, k) &gt;= 0)) {","          _results.push(\"\" + k + \"=\\\"\" + (utils.escape(v)) + \"\\\" \");","        }","      }","      return _results;","    })()).join('');","  };","","  noValueConStr = function(c) {","    return \"&lt;constraint \" + (conAttrs(c, BASIC_ATTRS)) + \"/&gt;\";","  };","","  typeConStr = function(c) {","    return \"&lt;constraint \" + (conAttrs(c, ['path', 'type'])) + \"/&gt;\";","  };","","  simpleConStr = function(c) {","    return \"&lt;constraint \" + (conAttrs(c, SIMPLE_ATTRS)) + \"/&gt;\";","  };","","  multiConStr = function(c) {","    return \"&lt;constraint \" + (conAttrs(c, BASIC_ATTRS)) + \"&gt;\" + (concatMap(conValStr)(c.values)) + \"&lt;/constraint&gt;\";","  };","","  idConStr = function(c) {","    return \"&lt;constraint \" + (conAttrs(c, BASIC_ATTRS)) + \"ids=\\\"\" + (c.ids.join(',')) + \"\\\"/&gt;\";","  };","","  conStr = function(c) {","    var _ref;","    if (c.values != null) {","      return multiConStr(c);","    } else if (c.ids != null) {","      return idConStr(c);","    } else if (!(c.op != null)) {","      return typeConStr(c);","    } else if (_ref = c.op, __indexOf.call(Query.NULL_OPS, _ref) &gt;= 0) {","      return noValueConStr(c);","    } else {","      return simpleConStr(c);","    }","  };","","  headLess = function(path) {","    return path.replace(/^[^\\.]+\\./, '');","  };","","  copyCon = function(con) {","    var code, extraValue, ids, op, path, type, value, values;","    path = con.path, type = con.type, op = con.op, value = con.value, values = con.values, extraValue = con.extraValue, ids = con.ids, code = con.code;","    ids = ids != null ? ids.slice() : void 0;","    values = values != null ? values.slice() : void 0;","    return noUndefVals({","      path: path,","      type: type,","      op: op,","      value: value,","      values: values,","      extraValue: extraValue,","      ids: ids,","      code: code","    });","  };","","  conToJSON = function(con) {","    var copy;","    copy = copyCon(con);","    copy.path = headLess(copy.path);","    return copy;","  };","","  noUndefVals = function(x) {","    var k, v;","    for (k in x) {","      v = x[k];","      if (v == null) {","        delete x[k];","      }","    }","    return x;","  };","","  didntRemove = function(orig, reduced) {","    return \"Did not remove a single constraint. original = \" + orig + \", reduced = \" + reduced;","  };","","  interpretConstraint = function(path, con) {","    var constraint, k, keys, v, x, _ref, _ref1;","    constraint = {","      path: path","    };","    if (con === null) {","      constraint.op = 'IS NULL';","    } else if (utils.isArray(con)) {","      constraint.op = 'ONE OF';","      constraint.values = con;","    } else if ((_ref = typeof con) === 'string' || _ref === 'number') {","      if (_ref1 = typeof con.toUpperCase === \"function\" ? con.toUpperCase() : void 0, __indexOf.call(Query.NULL_OPS, _ref1) &gt;= 0) {","        constraint.op = con;","      } else {","        constraint.op = '=';","        constraint.value = con;","      }","    } else {","      keys = (function() {","        var _results;","        _results = [];","        for (k in con) {","          x = con[k];","          _results.push(k);","        }","        return _results;","      })();","      if (__indexOf.call(keys, 'isa') &gt;= 0) {","        if (utils.isArray(con.isa)) {","          constraint.op = k;","          constraint.values = con.isa;","        } else {","          constraint.type = con.isa;","        }","      } else {","        if (__indexOf.call(keys, 'extraValue') &gt;= 0) {","          constraint.extraValue = con.extraValue;","        }","        for (k in con) {","          v = con[k];","          if (!(k !== 'extraValue')) {","            continue;","          }","          constraint.op = k;","          if (utils.isArray(v)) {","            constraint.values = v;","          } else {","            constraint.value = v;","          }","        }","      }","    }","    return constraint;","  };","","  interpretConArray = function(conArgs) {","    var a0, constraint, v, _ref;","    conArgs = conArgs.slice();","    constraint = {","      path: conArgs.shift()","    };","    if (conArgs.length === 1) {","      a0 = conArgs[0];","      if (_ref = typeof a0.toUpperCase === \"function\" ? a0.toUpperCase() : void 0, __indexOf.call(Query.NULL_OPS, _ref) &gt;= 0) {","        constraint.op = a0;","      } else {","        constraint.type = a0;","      }","    } else if (conArgs.length &gt;= 2) {","      constraint.op = conArgs[0];","      v = conArgs[1];","      if (utils.isArray(v)) {","        constraint.values = v;","      } else {","        constraint.value = v;","      }","      if (conArgs.length === 3) {","        constraint.extraValue = conArgs[2];","      }","    }","    return constraint;","  };","","  stringToSortOrder = function(str) {","    var i, parts, pathIndices, x, _i, _len, _results;","    if (str == null) {","      return [];","    }","    parts = str.split(/\\s+/);","    pathIndices = (function() {","      var _i, _ref, _results;","      _results = [];","      for (x = _i = 0, _ref = parts.length / 2; 0 &lt;= _ref ? _i &lt; _ref : _i &gt; _ref; x = 0 &lt;= _ref ? ++_i : --_i) {","        _results.push(x * 2);","      }","      return _results;","    })();","    _results = [];","    for (_i = 0, _len = pathIndices.length; _i &lt; _len; _i++) {","      i = pathIndices[_i];","      _results.push([parts[i], parts[i + 1]]);","    }","    return _results;","  };","","  removeIrrelevantSortOrders = function() {","    var oe, oldOrder;","    oldOrder = this.sortOrder;","    this.sortOrder = (function() {","      var _i, _len, _results;","      _results = [];","      for (_i = 0, _len = oldOrder.length; _i &lt; _len; _i++) {","        oe = oldOrder[_i];","        if (this.isRelevant(oe.path)) {","          _results.push(oe);","        }","      }","      return _results;","    }).call(this);","    if (oldOrder.length !== this.sortOrder.length) {","      return this.trigger('change:sortorder change:orderby', this.sortOrder.slice());","    }","  };","","  Query = (function() {","    var addPI, cAttrs, kids, parseSummary, qAttrs, scFold, toAttrPairs, toPathAndType, xmlAttr;","","    Query.JOIN_STYLES = ['INNER', 'OUTER'];","","    Query.BIO_FORMATS = ['gff3', 'fasta', 'bed'];","","    Query.NULL_OPS = ['IS NULL', 'IS NOT NULL'];","","    Query.ATTRIBUTE_VALUE_OPS = [\"=\", \"!=\", \"&gt;\", \"&gt;=\", \"&lt;\", \"&lt;=\", \"CONTAINS\", \"LIKE\", \"NOT LIKE\"];","","    Query.MULTIVALUE_OPS = ['ONE OF', 'NONE OF'];","","    Query.TERNARY_OPS = ['LOOKUP'];","","    Query.LOOP_OPS = ['=', '!='];","","    Query.LIST_OPS = ['IN', 'NOT IN'];","","    Query.OP_DICT = {","      '=': '=',","      '==': '==',","      'eq': '=',","      'eqq': '==',","      '!=': '!=',","      'ne': '!=',","      '&gt;': '&gt;',","      'gt': '&gt;',","      '&gt;=': '&gt;=',","      'ge': '&gt;=',","      '&lt;': '&lt;',","      'lt': '&lt;',","      '&lt;=': '&lt;=',","      'le': '&lt;=',","      'contains': 'CONTAINS',","      'CONTAINS': 'CONTAINS',","      'like': 'LIKE',","      'LIKE': 'LIKE',","      'not like': 'NOT LIKE',","      'NOT LIKE': 'NOT LIKE',","      'lookup': 'LOOKUP',","      'IS NULL': 'IS NULL',","      'is null': 'IS NULL',","      'IS NOT NULL': 'IS NOT NULL',","      'is not null': 'IS NOT NULL',","      'ONE OF': 'ONE OF',","      'one of': 'ONE OF',","      'NONE OF': 'NONE OF',","      'none of': 'NONE OF',","      'in': 'IN',","      'not in': 'NOT IN',","      'IN': 'IN',","      'NOT IN': 'NOT IN',","      'WITHIN': 'WITHIN',","      'within': 'WITHIN',","      'OVERLAPS': 'OVERLAPS',","      'overlaps': 'OVERLAPS',","      'ISA': 'ISA',","      'isa': 'ISA'","    };","","    Query.prototype.on = function(events, callback, context) {","      var calls, ev, list, tail, _ref, _ref1, _ref2;","      events = events.split(/\\s+/);","      calls = ((_ref = this._callbacks) != null ? _ref : this._callbacks = {});","      while (ev = events.shift()) {","        list = ((_ref1 = calls[ev]) != null ? _ref1 : calls[ev] = {});","        tail = ((_ref2 = list.tail) != null ? _ref2 : list.tail = (list.next = {}));","        tail.callback = callback;","        tail.context = context;","        list.tail = tail.next = {};","      }","      return this;","    };","","    Query.prototype.bind = function() {","      var args;","      args = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","      return this.on.apply(this, args);","    };","","    Query.prototype.off = function(events, callback, context) {","      var calls, current, ev, last, linkedList, node, remove, _i, _len, _ref;","      if (events == null) {","        this._callbacks = {};","        return this;","      }","      events = events.split(/\\s+/);","      calls = ((_ref = this._callbacks) != null ? _ref : this._callbacks = {});","      for (_i = 0, _len = events.length; _i &lt; _len; _i++) {","        ev = events[_i];","        if (callback != null) {","          current = linkedList = calls[ev] || {};","          last = linkedList.tail;","          while ((node = current.next) !== last) {","            remove = (!(context != null) || node.context === context) &amp;&amp; (callback === node.callback);","            if (remove) {","              current.next = node.next || last;","              node = current;","            } else {","              current = node;","            }","          }","        } else {","          delete calls[ev];","        }","      }","      return this;","    };","","    Query.prototype.unbind = function() {","      var args;","      args = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","      return this.off.apply(this, args);","    };","","    Query.prototype.once = function(events, callback, context) {","      var f,","        _this = this;","      f = function() {","        var args;","        args = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","        callback.apply(context, args);","        return _this.off(events, f);","      };","      return this.on(events, f);","    };","","    Query.prototype.emit = function() {","      var args;","      args = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","      return this.trigger.apply(this, args);","    };","","    Query.prototype.trigger = function() {","      var all, args, calls, event, events, node, rest, tail;","      events = arguments[0], rest = 2 &lt;= arguments.length ? __slice.call(arguments, 1) : [];","      calls = this._callbacks;","      if (!calls) {","        return this;","      }","      all = calls['all'];","      (events = events.split(/\\s+/)).push(null);","      while (event = events.shift()) {","        if (all) {","          events.push({","            next: all.next,","            tail: all.tail,","            event: event","          });","        }","        if (!(node = calls[event])) {","          continue;","        }","        events.push({","          next: node.next,","          tail: node.tail","        });","      }","      while (node = events.pop()) {","        tail = node.tail;","        args = node.event ? [node.event].concat(rest) : rest;","        while ((node = node.next) !== tail) {","          node.callback.apply(node.context || this, args);","        }","      }","      return this;","    };","","    qAttrs = ['name', 'view', 'sortOrder', 'constraintLogic', 'title', 'description', 'comment'];","","    cAttrs = ['path', 'type', 'op', 'code', 'value', 'ids'];","","    toAttrPairs = function(el, attrs) {","      var x, _i, _len, _results;","      _results = [];","      for (_i = 0, _len = attrs.length; _i &lt; _len; _i++) {","        x = attrs[_i];","        if (el.hasAttribute(x)) {","          _results.push([x, el.getAttribute(x)]);","        }","      }","      return _results;","    };","","    kids = function(el, name) {","      var kid, _i, _len, _ref, _results;","      _ref = el.getElementsByTagName(name);","      _results = [];","      for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","        kid = _ref[_i];","        _results.push(kid);","      }","      return _results;","    };","","    xmlAttr = function(name) {","      return function(el) {","        return el.getAttribute(name);","      };","    };","","    Query.fromXML = function(xml) {","      var con, dom, j, pathOf, q, query, styleOf;","      dom = intermine.xml.parse(xml);","      query = kids(dom, 'query')[0] || kids(dom, 'template')[0];","      if (!query) {","        throw new Error(\"no query in xml\");","      }","      pathOf = xmlAttr('path');","      styleOf = xmlAttr('style');","      q = pairsToObj(toAttrPairs(query, qAttrs));","      q.view = q.view.split(/\\s+/);","      q.sortOrder = stringToSortOrder(q.sortOrder);","      q.joins = (function() {","        var _i, _len, _ref, _results;","        _ref = kids(query, 'join');","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          j = _ref[_i];","          if (styleOf(j) === 'OUTER') {","            _results.push(pathOf(j));","          }","        }","        return _results;","      })();","      q.constraints = (function() {","        var _i, _len, _ref, _results;","        _ref = kids(query, 'constraint');","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          con = _ref[_i];","          _results.push((function(con) {","            var c, tn, v, values, x;","            c = pairsToObj(toAttrPairs(con, cAttrs));","            if (c.ids != null) {","              c.ids = (function() {","                var _j, _len1, _ref1, _results1;","                _ref1 = c.ids.split(',');","                _results1 = [];","                for (_j = 0, _len1 = _ref1.length; _j &lt; _len1; _j++) {","                  x = _ref1[_j];","                  _results1.push(parseInt(x, 10));","                }","                return _results1;","              })();","            }","            values = kids(con, 'value');","            if (values.length) {","              c.values = (function() {","                var _j, _len1, _results1;","                _results1 = [];","                for (_j = 0, _len1 = values.length; _j &lt; _len1; _j++) {","                  v = values[_j];","                  _results1.push(((function() {","                    var _k, _len2, _ref1, _results2;","                    _ref1 = v.childNodes;","                    _results2 = [];","                    for (_k = 0, _len2 = _ref1.length; _k &lt; _len2; _k++) {","                      tn = _ref1[_k];","                      _results2.push(tn.data);","                    }","                    return _results2;","                  })()).join(''));","                }","                return _results1;","              })();","            }","            return c;","          })(con));","        }","        return _results;","      })();","      return q;","    };","","    Query.prototype.constraints = [];","","    Query.prototype.views = [];","","    Query.prototype.joins = {};","","    Query.prototype.constraintLogic = '';","","    Query.prototype.sortOrder = '';","","    Query.prototype.name = null;","","    Query.prototype.title = null;","","    Query.prototype.comment = null;","","    Query.prototype.description = null;","","    function Query(properties, service) {","      this.addConstraint = __bind(this.addConstraint, this);","","      this.expandStar = __bind(this.expandStar, this);","","      this.adjustPath = __bind(this.adjustPath, this);","","      this.select = __bind(this.select, this);","","      var prop, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;","      if (properties == null) {","        properties = {};","      }","      this.constraints = [];","      this.views = [];","      this.joins = {};","      this.displayNames = utils.copy((_ref = (_ref1 = properties.displayNames) != null ? _ref1 : properties.aliases) != null ? _ref : {});","      _ref2 = ['name', 'title', 'comment', 'description'];","      for (_i = 0, _len = _ref2.length; _i &lt; _len; _i++) {","        prop = _ref2[_i];","        if (properties[prop] != null) {","          this[prop] = properties[prop];","        }","      }","      this.service = service != null ? service : {};","      this.model = (_ref3 = properties.model) != null ? _ref3 : {};","      this.summaryFields = (_ref4 = properties.summaryFields) != null ? _ref4 : {};","      this.root = (_ref5 = properties.root) != null ? _ref5 : properties.from;","      this.maxRows = (_ref6 = (_ref7 = properties.size) != null ? _ref7 : properties.limit) != null ? _ref6 : properties.maxRows;","      this.start = (_ref8 = (_ref9 = properties.start) != null ? _ref9 : properties.offset) != null ? _ref8 : 0;","      this.select(properties.views || properties.view || properties.select || []);","      this.addConstraints(properties.constraints || properties.where || []);","      this.addJoins(properties.joins || properties.join || []);","      this.orderBy(properties.sortOrder || properties.orderBy || []);","      if (properties.constraintLogic != null) {","        this.constraintLogic = properties.constraintLogic;","      }","      this.on('change:views', removeIrrelevantSortOrders, this);","    }","","    Query.prototype.removeFromSelect = function(unwanted) {","      var mapFn, so, uw, v;","      if (unwanted == null) {","        unwanted = [];","      }","      unwanted = utils.stringList(unwanted);","      mapFn = utils.compose(this.expandStar, this.adjustPath);","      unwanted = utils.flatten((function() {","        var _i, _len, _results;","        _results = [];","        for (_i = 0, _len = unwanted.length; _i &lt; _len; _i++) {","          uw = unwanted[_i];","          _results.push(mapFn(uw));","        }","        return _results;","      })());","      this.sortOrder = (function() {","        var _i, _len, _ref, _ref1, _results;","        _ref = this.sortOrder;","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          so = _ref[_i];","          if (!(_ref1 = so.path, __indexOf.call(unwanted, _ref1) &gt;= 0)) {","            _results.push(so);","          }","        }","        return _results;","      }).call(this);","      this.views = (function() {","        var _i, _len, _ref, _results;","        _ref = this.views;","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          v = _ref[_i];","          if (!(__indexOf.call(unwanted, v) &gt;= 0)) {","            _results.push(v);","          }","        }","        return _results;","      }).call(this);","      this.trigger('remove:view', unwanted);","      return this.trigger('change:views', this.views);","    };","","    Query.prototype.removeConstraint = function(con, silent) {","      var c, iscon, orig, reduced;","      if (silent == null) {","        silent = false;","      }","      orig = this.constraints;","      iscon = typeof con === 'string' ? (function(c) {","        return c.code === con;","      }) : (function(c) {","        var _ref, _ref1;","        return (c.path === con.path) &amp;&amp; (c.op === con.op) &amp;&amp; (c.value === con.value) &amp;&amp; (c.extraValue === con.extraValue) &amp;&amp; (con.type === c.type) &amp;&amp; (((_ref = c.values) != null ? _ref.join('%%') : void 0) === ((_ref1 = con.values) != null ? _ref1.join('%%') : void 0));","      });","      reduced = (function() {","        var _i, _len, _results;","        _results = [];","        for (_i = 0, _len = orig.length; _i &lt; _len; _i++) {","          c = orig[_i];","          if (!iscon(c)) {","            _results.push(c);","          }","        }","        return _results;","      })();","      if (reduced.length !== orig.length - 1) {","        throw new Error(didntRemove(orig, reduced));","      }","      this.constraints = reduced;","      if (!silent) {","        this.trigger('change:constraints');","        return this.trigger('removed:constraint', utils.find(orig, iscon));","      }","    };","","    Query.prototype.addToSelect = function(views) {","      var dups, mapFn, p, toAdd, v, x, _ref;","      if (views == null) {","        views = [];","      }","      views = utils.stringList(views);","      mapFn = utils.compose(this.expandStar, this.adjustPath);","      toAdd = utils.flatten((function() {","        var _i, _len, _results;","        _results = [];","        for (_i = 0, _len = views.length; _i &lt; _len; _i++) {","          v = views[_i];","          _results.push(mapFn(v));","        }","        return _results;","      })());","      dups = (function() {","        var _i, _len, _results;","        _results = [];","        for (_i = 0, _len = toAdd.length; _i &lt; _len; _i++) {","          p = toAdd[_i];","          if (__indexOf.call(this.views, p) &gt;= 0) {","            _results.push(p);","          }","        }","        return _results;","      }).call(this);","      if (dups.length) {","        throw new Error(\"\" + dups + \" already in the select list\");","      }","      dups = (function() {","        var _i, _len, _results;","        _results = [];","        for (_i = 0, _len = toAdd.length; _i &lt; _len; _i++) {","          p = toAdd[_i];","          if (((function() {","            var _j, _len1, _results1;","            _results1 = [];","            for (_j = 0, _len1 = toAdd.length; _j &lt; _len1; _j++) {","              x = toAdd[_j];","              if (x === p) {","                _results1.push(x);","              }","            }","            return _results1;","          })()).length &gt; 1) {","            _results.push(p);","          }","        }","        return _results;","      })();","      if (dups.length) {","        throw new Error(\"\" + dups + \" specified multiple times as arguments to addToSelect\");","      }","      (_ref = this.views).push.apply(_ref, toAdd);","      return this.trigger('add:view change:views', toAdd);","    };","","    Query.prototype.select = function(views) {","      var oldViews;","      oldViews = this.views.slice();","      try {","        this.views = [];","        this.addToSelect(views);","      } catch (e) {","        this.views = oldViews;","        utils.error(e);","      }","      return this;","    };","","    Query.prototype.adjustPath = function(path) {","      path = path &amp;&amp; path.name ? path.name : \"\" + path;","      if (this.root != null) {","        if (!path.match(\"^\" + this.root)) {","          path = this.root + \".\" + path;","        }","      } else {","        this.root = path.split('.')[0];","      }","      return path;","    };","","    Query.prototype.getPossiblePaths = function(depth) {","      var getPaths, _base, _ref, _ref1,","        _this = this;","      if (depth == null) {","        depth = 3;","      }","      getPaths = function(root, d) {","        var cd, field, name, others, path, ret, subPaths;","        ret = [root];","        path = _this.getPathInfo(root);","        if (path.isAttribute()) {","          return ret;","        } else {","          cd = _this.getPathInfo(root).getType();","          subPaths = concatMap(function(ref) {","            return getPaths(\"\" + root + \".\" + ref.name, d - 1);","          });","          others = cd &amp;&amp; (d &gt; 0) ? subPaths((function() {","            var _ref, _results;","            _ref = cd.fields;","            _results = [];","            for (name in _ref) {","              field = _ref[name];","              _results.push(field);","            }","            return _results;","          })()) : [];","          return ret.concat(others);","        }","      };","      if ((_ref = this._possiblePaths) == null) {","        this._possiblePaths = {};","      }","      return (_ref1 = (_base = this._possiblePaths)[depth]) != null ? _ref1 : _base[depth] = getPaths(this.root, depth);","    };","","    Query.prototype.getPathInfo = function(path) {","      var adjusted, pi, _ref;","      adjusted = this.adjustPath(path);","      pi = (_ref = this.model) != null ? typeof _ref.getPathInfo === \"function\" ? _ref.getPathInfo(adjusted, this.getSubclasses()) : void 0 : void 0;","      if (pi &amp;&amp; adjusted in this.displayNames) {","        pi.displayName = this.displayNames[adjusted];","      }","      return pi;","    };","","    Query.prototype.makePath = Query.prototype.getPathInfo;","","    toPathAndType = function(c) {","      return [c.path, c.type];","    };","","    scFold = utils.compose(pairsToObj, utils.map(toPathAndType), filter(get('type')));","","    Query.prototype.getSubclasses = function() {","      return scFold(this.constraints);","    };","","    Query.prototype.getType = function(path) {","      return this.getPathInfo(path).getType();","    };","","    Query.prototype.getViewNodes = function() {","      var p, toParentNode,","        _this = this;","      toParentNode = function(v) {","        return _this.getPathInfo(v).getParent();","      };","      return utils.uniqBy(String, (function() {","        var _i, _len, _ref, _results;","        _ref = this.views;","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          p = _ref[_i];","          _results.push(toParentNode(p));","        }","        return _results;","      }).call(this));","    };","","    Query.prototype.isInView = function(path) {","      var pi, pstr, _ref;","      pi = this.getPathInfo(path);","      if (!pi) {","        throw new Error(\"Invalid path: \" + path);","      }","      if (pi.isAttribute()) {","        return _ref = pi.toString(), __indexOf.call(this.views, _ref) &gt;= 0;","      } else {","        pstr = pi.toString();","        return utils.any(this.getViewNodes(), function(n) {","          return n.toString() === pstr;","        });","      }","    };","","    Query.prototype.isConstrained = function(path, includeAttrs) {","      var pi, test,","        _this = this;","      if (includeAttrs == null) {","        includeAttrs = false;","      }","      pi = this.getPathInfo(path);","      if (!pi) {","        throw new Error(\"Invalid path: \" + path);","      }","      test = function(c) {","        return (c.op != null) &amp;&amp; c.path === pi.toString();","      };","      if ((!pi.isAttribute()) &amp;&amp; includeAttrs) {","        test = function(c) {","          return (c.op != null) &amp;&amp; (c.path === pi.toString() || pi.equals(_this.getPathInfo(c.path).getParent()));","        };","      }","      return utils.any(this.constraints, test);","    };","","    Query.prototype.canHaveMultipleValues = function(path) {","      return this.getPathInfo(path).containsCollection();","    };","","    Query.prototype.getQueryNodes = function() {","      var c, constrainedNodes, pi, viewNodes;","      viewNodes = this.getViewNodes();","      constrainedNodes = (function() {","        var _i, _len, _ref, _results;","        _ref = this.constraints;","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          c = _ref[_i];","          if (!(!(c.type != null))) {","            continue;","          }","          pi = this.getPathInfo(c.path);","          if (pi.isAttribute()) {","            _results.push(pi.getParent());","          } else {","            _results.push(pi);","          }","        }","        return _results;","      }).call(this);","      return utils.uniqBy(String, viewNodes.concat(constrainedNodes));","    };","","    Query.prototype.isInQuery = function(p) {","      var c, pi, pstr, _i, _len, _ref;","      pi = this.getPathInfo(p);","      if (pi) {","        pstr = pi.toPathString();","        _ref = this.views.concat((function() {","          var _j, _len, _ref, _results;","          _ref = this.constraints;","          _results = [];","          for (_j = 0, _len = _ref.length; _j &lt; _len; _j++) {","            c = _ref[_j];","            if (!(c.type != null)) {","              _results.push(c.path);","            }","          }","          return _results;","        }).call(this));","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          p = _ref[_i];","          if (0 === p.indexOf(pstr)) {","            return true;","          }","        }","        return false;","      }","      return true;","    };","","    Query.prototype.isRelevant = function(path) {","      var nodes, pi, sought;","      pi = this.getPathInfo(path);","      if (pi.isAttribute()) {","        pi = pi.getParent();","      }","      sought = pi.toString();","      nodes = this.getViewNodes();","      return utils.any(nodes, function(n) {","        return n.toPathString() === sought;","      });","    };","","    Query.prototype.expandStar = function(path) {","      var attrViews, cd, expand, fn, n, name, pathStem, starViews;","      if (/\\*$/.test(path)) {","        pathStem = path.substr(0, path.lastIndexOf('.'));","        expand = function(x) {","          return pathStem + x;","        };","        cd = this.getType(pathStem);","        if (/\\.\\*$/.test(path)) {","          if (cd &amp;&amp; this.summaryFields[cd.name]) {","            fn = utils.compose(expand, decapitate);","            return (function() {","              var _i, _len, _ref, _results;","              _ref = this.summaryFields[cd.name];","              _results = [];","              for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","                n = _ref[_i];","                if (!this.hasView(n)) {","                  _results.push(fn(n));","                }","              }","              return _results;","            }).call(this);","          }","        } else if (/\\.\\*\\*$/.test(path)) {","          starViews = this.expandStar(pathStem + '.*');","          attrViews = (function() {","            var _results;","            _results = [];","            for (name in cd.attributes) {","              _results.push(expand(\".\" + name));","            }","            return _results;","          })();","          return utils.uniqBy(id, starViews.concat(attrViews));","        }","      }","      return path;","    };","","    Query.prototype.isOuterJoin = function(p) {","      return this.joins[this.adjustPath(p)] === 'OUTER';","    };","","    Query.prototype.hasView = function(v) {","      var _ref;","      return this.views &amp;&amp; (_ref = this.adjustPath(v), __indexOf.call(this.views, _ref) &gt;= 0);","    };","","    Query.prototype.count = function(cont) {","      if (this.service.count) {","        return this.service.count(this, cont);","      } else {","        throw new Error(\"This query has no service with count functionality attached.\");","      }","    };","","    Query.prototype.appendToList = function(target, cb) {","      var name, processor, req, toRun, updateTarget;","      if (target != null ? target.name : void 0) {","        name = target.name;","        updateTarget = function(err, list) {","          if (err == null) {","            return target.size = list.size;","          }","        };","      } else {","        name = String(target);","        updateTarget = null;","      }","      toRun = this.makeListQuery();","      req = {","        listName: name,","        query: toRun.toXML()","      };","      processor = LIST_PIPE(this.service);","      return withCB(updateTarget, cb, this.service.post('query/append/tolist', req).then(processor));","    };","","    Query.prototype.makeListQuery = function() {","      var n, toRun, _i, _len, _ref;","      toRun = this.clone();","      if (toRun.views.length !== 1 || toRun.views[0] === null || !toRun.views[0].match(/\\.id$/)) {","        toRun.select(['id']);","      }","      _ref = this.getViewNodes();","      for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","        n = _ref[_i];","        if (!this.isOuterJoined(n)) {","          if (!(toRun.isInView(n || toRun.isConstrained(n))) &amp;&amp; (n.getEndClass().fields.id != null)) {","            toRun.addConstraint([n.append('id'), 'IS NOT NULL']);","          }","        }","      }","      return toRun;","    };","","    Query.prototype.saveAsList = function(options, cb) {","      var req, toRun;","      toRun = this.makeListQuery();","      req = utils.copy(options);","      req.listName = req.listName || req.name;","      req.query = toRun.toXML();","      if (options.tags) {","        req.tags = options.tags.join(';');","      }","      return withCB(cb, this.service.post('query/tolist', req).then(LIST_PIPE(this.service)));","    };","","    Query.prototype.summarise = function(path, limit, cont) {","      return this.filterSummary(path, '', limit, cont);","    };","","    Query.prototype.summarize = function() {","      var args;","      args = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","      return this.summarise.apply(this, args);","    };","","    parseSummary = function(data) {","      var isNumeric, r, stats, _i, _len, _ref, _ref1;","      isNumeric = ((_ref = data.results[0]) != null ? _ref.max : void 0) != null;","      _ref1 = data.results;","      for (_i = 0, _len = _ref1.length; _i &lt; _len; _i++) {","        r = _ref1[_i];","        r.count = parseInt(r.count, 10);","      }","      stats = {","        uniqueValues: data.uniqueValues,","        filteredCount: data.filteredCount","      };","      if (isNumeric) {","        stats = merge(stats, data.results[0]);","      }","      data.stats = stats;","      return data;","    };","","    Query.prototype.filterSummary = function(path, term, limit, cont) {","      var req, toRun, _ref;","      if (cont == null) {","        cont = (function() {});","      }","      if (utils.isFunction(limit)) {","        _ref = [limit, null], cont = _ref[0], limit = _ref[1];","      }","      path = this.adjustPath(path);","      toRun = this.clone();","      if (__indexOf.call(toRun.views, path) &lt; 0) {","        toRun.views.push(path);","      }","      req = {","        query: toRun.toXML(),","        summaryPath: path,","        format: 'jsonrows'","      };","      if (limit) {","        req.size = limit;","      }","      if (term) {","        req.filterTerm = term;","      }","      return withCB(cont, this.service.post('query/results', req).then(parseSummary));","    };","","    Query.prototype.clone = function(cloneEvents) {","      var cloned, k, v, _ref, _ref1;","      cloned = new Query(this, this.service);","      if ((_ref = cloned._callbacks) == null) {","        cloned._callbacks = {};","      }","      if (cloneEvents) {","        _ref1 = this._callbacks;","        for (k in _ref1) {","          if (!__hasProp.call(_ref1, k)) continue;","          v = _ref1[k];","          cloned._callbacks[k] = v;","        }","        cloned.off('change:views', removeIrrelevantSortOrders, this);","      }","      return cloned;","    };","","    Query.prototype.next = function() {","      var clone;","      clone = this.clone();","      if (this.maxRows) {","        clone.start = this.start + this.maxRows;","      }","      return clone;","    };","","    Query.prototype.previous = function() {","      var clone;","      clone = this.clone();","      if (this.maxRows) {","        clone.start = this.start - this.maxRows;","      } else {","        clone.start = 0;","      }","      return clone;","    };","","    Query.prototype.getSortDirection = function(path) {","      var dir, so, _i, _len, _ref;","      path = this.adjustPath(path);","      _ref = this.sortOrder;","      for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","        so = _ref[_i];","        if (so.path === path) {","          dir = so.direction;","        }","      }","      return dir;","    };","","    Query.prototype.isOuterJoined = function(path) {","      var dir, jp, _ref;","      path = this.adjustPath(path);","      _ref = this.joins;","      for (jp in _ref) {","        dir = _ref[jp];","        if (dir === 'OUTER' &amp;&amp; path.indexOf(jp) === 0) {","          return true;","        }","      }","      return false;","    };","","    Query.prototype.getOuterJoin = function(path) {","      var joinPaths, k,","        _this = this;","      path = this.adjustPath(path);","      joinPaths = ((function() {","        var _results;","        _results = [];","        for (k in this.joins) {","          _results.push(k);","        }","        return _results;","      }).call(this)).sort(function(a, b) {","        return b.length - a.length;","      });","      return utils.find(joinPaths, function(p) {","        return _this.joins[p] === 'OUTER' &amp;&amp; path.indexOf(p) === 0;","      });","    };","","    Query.prototype._parse_sort_order = function(input) {","      var direction, k, path, so, v, _ref;","      so = input;","      if (typeof input === 'string') {","        so = {","          path: input,","          direction: 'ASC'","        };","      } else if (utils.isArray(input)) {","        path = input[0], direction = input[1];","        so = {","          path: path,","          direction: direction","        };","      } else if (!(input.path != null)) {","        for (k in input) {","          v = input[k];","          _ref = [k, v], path = _ref[0], direction = _ref[1];","        }","        so = {","          path: path,","          direction: direction","        };","      }","      so.path = this.adjustPath(so.path);","      so.direction = so.direction.toUpperCase();","      return so;","    };","","    Query.prototype.addOrSetSortOrder = function(so) {","      var currentDirection, oe, _i, _len, _ref;","      so = this._parse_sort_order(so);","      currentDirection = this.getSortDirection(so.path);","      if (!(currentDirection != null)) {","        return this.addSortOrder(so);","      } else if (currentDirection !== so.direction) {","        _ref = this.sortOrder;","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          oe = _ref[_i];","          if (oe.path === so.path) {","            oe.direction = so.direction;","          }","        }","        return this.trigger('change:sortorder', this.sortOrder);","      }","    };","","    Query.prototype.addSortOrder = function(so) {","      this.sortOrder.push(this._parse_sort_order(so));","      this.trigger('add:sortorder', so);","      return this.trigger('change:sortorder', this.sortOrder);","    };","","    Query.prototype.orderBy = function(oes) {","      var oe, _i, _len;","      this.sortOrder = [];","      for (_i = 0, _len = oes.length; _i &lt; _len; _i++) {","        oe = oes[_i];","        this.addSortOrder(this._parse_sort_order(oe));","      }","      return this.trigger('set:sortorder change:sortorder', this.sortOrder);","    };","","    Query.prototype.addJoins = function(joins) {","      var j, k, v, _i, _len, _results, _results1;","      if (utils.isArray(joins)) {","        _results = [];","        for (_i = 0, _len = joins.length; _i &lt; _len; _i++) {","          j = joins[_i];","          _results.push(this.addJoin(j));","        }","        return _results;","      } else {","        _results1 = [];","        for (k in joins) {","          v = joins[k];","          _results1.push(this.addJoin({","            path: k,","            style: v","          }));","        }","        return _results1;","      }","    };","","    Query.prototype.addJoin = function(join) {","      var _ref, _ref1, _ref2;","      if (typeof join === 'string') {","        join = {","          path: join,","          style: 'OUTER'","        };","      }","      join.path = this.adjustPath(join.path);","      join.style = (_ref = (_ref1 = join.style) != null ? _ref1.toUpperCase() : void 0) != null ? _ref : join.style;","      if (_ref2 = join.style, __indexOf.call(Query.JOIN_STYLES, _ref2) &lt; 0) {","        throw new Error(\"Invalid join style: \" + join.style);","      }","      this.joins[join.path] = join.style;","      return this.trigger('set:join', join.path, join.style);","    };","","    Query.prototype.setJoinStyle = function(path, style) {","      if (style == null) {","        style = 'OUTER';","      }","      path = this.adjustPath(path);","      style = style.toUpperCase();","      if (this.joins[path] !== style) {","        this.joins[path] = style;","        this.trigger('change:joins', {","          path: path,","          style: style","        });","      }","      return this;","    };","","    Query.prototype.addConstraints = function(constraints) {","      var c, con, path, _fn, _i, _len,","        _this = this;","      this.__silent__ = true;","      if (utils.isArray(constraints)) {","        for (_i = 0, _len = constraints.length; _i &lt; _len; _i++) {","          c = constraints[_i];","          this.addConstraint(c);","        }","      } else {","        _fn = function(path, con) {","          return _this.addConstraint(interpretConstraint(path, con));","        };","        for (path in constraints) {","          con = constraints[path];","          _fn(path, con);","        }","      }","      this.__silent__ = false;","      this.trigger('add:constraint');","      return this.trigger('change:constraints');","    };","","    Query.prototype.addConstraint = function(constraint) {","      if (utils.isArray(constraint)) {","        constraint = interpretConArray(constraint);","      } else {","        constraint = copyCon(constraint);","      }","      constraint.path = this.adjustPath(constraint.path);","      if (constraint.type == null) {","        try {","          constraint.op = get_canonical_op(constraint.op);","        } catch (error) {","          throw new Error(\"Illegal operator: \" + constraint.op);","        }","      }","      this.constraints.push(constraint);","      if ((this.constraintLogic != null) &amp;&amp; this.constraintLogic !== '') {","        this.constraintLogic = \"(\" + this.constraintLogic + \") and \" + CODES[this.constraints.length];","      }","      if (!this.__silent__) {","        this.trigger('add:constraint', constraint);","        this.trigger('change:constraints');","      }","      return this;","    };","","    Query.prototype.getSorting = function() {","      var oe;","      return ((function() {","        var _i, _len, _ref, _results;","        _ref = this.sortOrder;","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          oe = _ref[_i];","          _results.push(\"\" + oe.path + \" \" + oe.direction);","        }","        return _results;","      }).call(this)).join(' ');","    };","","    Query.prototype.getConstraintXML = function() {","      var c, toSerialise;","      toSerialise = (function() {","        var _i, _len, _ref, _results;","        _ref = this.constraints;","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          c = _ref[_i];","          if (!(c.type != null) || this.isInQuery(c.path)) {","            _results.push(c);","          }","        }","        return _results;","      }).call(this);","      if (toSerialise.length) {","        return concatMap(conStr)(concatMap(id)(partition(function(c) {","          return c.type != null;","        })(toSerialise)));","      } else {","        return '';","      }","    };","","    Query.prototype.getJoinXML = function() {","      var p, s, strs;","      strs = (function() {","        var _ref, _results;","        _ref = this.joins;","        _results = [];","        for (p in _ref) {","          s = _ref[p];","          if (this.isInQuery(p) &amp;&amp; s === 'OUTER') {","            _results.push(\"&lt;join path=\\\"\" + p + \"\\\" style=\\\"OUTER\\\"/&gt;\");","          }","        }","        return _results;","      }).call(this);","      return strs.join('');","    };","","    Query.prototype.toXML = function() {","      var attrs, headAttrs, k, v;","      attrs = {","        model: this.model.name,","        view: this.views.join(' '),","        sortOrder: this.getSorting(),","        constraintLogic: this.constraintLogic","      };","      if (this.name != null) {","        attrs.name = this.name;","      }","      headAttrs = ((function() {","        var _results;","        _results = [];","        for (k in attrs) {","          v = attrs[k];","          if (v) {","            _results.push(k + '=\"' + v + '\"');","          }","        }","        return _results;","      })()).join(' ');","      return \"&lt;query \" + headAttrs + \" &gt;\" + (this.getJoinXML()) + (this.getConstraintXML()) + \"&lt;/query&gt;\";","    };","","    Query.prototype.toJSON = function() {","      var c, direction, path, style, v;","      return noUndefVals({","        name: this.name,","        title: this.title,","        comment: this.comment,","        description: this.description,","        constraintLogic: this.constraintLogic,","        from: this.root,","        select: (function() {","          var _i, _len, _ref, _results;","          _ref = this.views;","          _results = [];","          for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","            v = _ref[_i];","            _results.push(headLess(v));","          }","          return _results;","        }).call(this),","        orderBy: (function() {","          var _i, _len, _ref, _ref1, _results;","          _ref = this.sortOrder;","          _results = [];","          for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","            _ref1 = _ref[_i], path = _ref1.path, direction = _ref1.direction;","            _results.push({","              path: headLess(path),","              direction: direction","            });","          }","          return _results;","        }).call(this),","        joins: (function() {","          var _ref, _results;","          _ref = this.joins;","          _results = [];","          for (path in _ref) {","            style = _ref[path];","            if (style === 'OUTER') {","              _results.push(headLess(path));","            }","          }","          return _results;","        }).call(this),","        where: (function() {","          var _i, _len, _ref, _results;","          _ref = this.constraints;","          _results = [];","          for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","            c = _ref[_i];","            _results.push(conToJSON(c));","          }","          return _results;","        }).call(this)","      });","    };","","    Query.prototype.fetchCode = function(lang, cb) {","      var req;","      req = {","        query: this.toXML(),","        lang: lang","      };","      return withCB(cb, this.service.post('query/code', req).then(this.service.VERIFIER).then(get('code')));","    };","","    Query.prototype.save = function(name, cb) {","      var req, setName,","        _this = this;","      if (name != null) {","        this.name = name;","      }","      req = {","        data: this.toXML(),","        contentType: \"application/xml; charset=UTF-8\",","        url: this.service.root + 'query',","        type: 'POST',","        dataType: 'json'","      };","      setName = function(name) {","        return _this.name = name;","      };","      return withCB(cb, setName, this.service.doReq(req).then(this.service.VERIFIER).then(get('name')));","    };","","    Query.prototype.getCodeURI = function(lang) {","      var req, _ref;","      req = {","        query: this.toXML(),","        lang: lang,","        format: 'text'","      };","      if (((_ref = this.service) != null ? _ref.token : void 0) != null) {","        req.token = this.service.token;","      }","      return \"\" + this.service.root + \"query/code?\" + (toQueryString(req));","    };","","    Query.prototype.getExportURI = function(format) {","      var req, _ref;","      if (format == null) {","        format = 'tab';","      }","      if (__indexOf.call(Query.BIO_FORMATS, format) &gt;= 0) {","        return this[\"get\" + (format.toUpperCase()) + \"URI\"]();","      }","      req = {","        query: this.toXML(),","        format: format","      };","      if (((_ref = this.service) != null ? _ref.token : void 0) != null) {","        req.token = this.service.token;","      }","      return \"\" + this.service.root + \"query/results?\" + (toQueryString(req));","    };","","    Query.prototype.fetchQID = function(cb) {","      return withCB(cb, this.service.post('queries', {","        query: this.toXML()","      }).then(get('id')));","    };","","    addPI = function(p) {","      return p.append('primaryIdentifier').toString();","    };","","    Query.prototype.__bio_req = function(types, n) {","      var isSuitable, toRun;","      toRun = this.makeListQuery();","      isSuitable = function(p) {","        return utils.any(types, function(t) {","          return p.isa(t);","        });","      };","      toRun.views = take(n)((function() {","        var _i, _len, _ref, _results;","        _ref = this.getViewNodes();","        _results = [];","        for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","          n = _ref[_i];","          if (isSuitable(n)) {","            _results.push(addPI(n));","          }","        }","        return _results;","      }).call(this));","      return {","        query: toRun.toXML(),","        format: 'text'","      };","    };","","    Query.prototype._fasta_req = function() {","      return this.__bio_req([\"SequenceFeature\", 'Protein'], 1);","    };","","    Query.prototype._gff3_req = function() {","      return this.__bio_req(['SequenceFeature']);","    };","","    Query.prototype._bed_req = Query.prototype._gff3_req;","","    return Query;","","  })();","","  union = fold(function(xs, ys) {","    return xs.concat(ys);","  });","","  Query.ATTRIBUTE_OPS = union([Query.ATTRIBUTE_VALUE_OPS, Query.MULTIVALUE_OPS, Query.NULL_OPS]);","","  Query.REFERENCE_OPS = union([Query.TERNARY_OPS, Query.LOOP_OPS, Query.LIST_OPS]);","","  _ref = Query.BIO_FORMATS;","  _fn = function(f) {","    var getMeth, reqMeth, uriMeth;","    reqMeth = \"_\" + f + \"_req\";","    getMeth = \"get\" + (f.toUpperCase());","    uriMeth = getMeth + \"URI\";","    Query.prototype[getMeth] = function(opts, cb) {","      var req, v, _ref1;","      if (opts == null) {","        opts = {};","      }","      if (cb == null) {","        cb = function() {};","      }","      if (utils.isFunction(opts)) {","        _ref1 = [{}, opts], opts = _ref1[0], cb = _ref1[1];","      }","      if ((opts != null ? opts.view : void 0) != null) {","        opts.view = (function() {","          var _j, _len1, _ref2, _results;","          _ref2 = opts.view;","          _results = [];","          for (_j = 0, _len1 = _ref2.length; _j &lt; _len1; _j++) {","            v = _ref2[_j];","            _results.push(this.getPathInfo(v).toString());","          }","          return _results;","        }).call(this);","      }","      req = merge(this[reqMeth](), opts);","      return withCB(cb, this.service.post('query/results/' + f, req));","    };","    return Query.prototype[uriMeth] = function(opts, cb) {","      var req, v, _ref1;","      if (opts == null) {","        opts = {};","      }","      if (utils.isFunction(opts)) {","        _ref1 = [{}, opts], opts = _ref1[0], cb = _ref1[1];","      }","      if ((opts != null ? opts.view : void 0) != null) {","        opts.view = (function() {","          var _j, _len1, _ref2, _results;","          _ref2 = opts.view;","          _results = [];","          for (_j = 0, _len1 = _ref2.length; _j &lt; _len1; _j++) {","            v = _ref2[_j];","            _results.push(this.getPathInfo(v).toString());","          }","          return _results;","        }).call(this);","      }","      req = merge(this[reqMeth](), opts);","      if (this.service.token != null) {","        req.token = this.service.token;","      }","      return \"\" + this.service.root + \"query/results/\" + f + \"?\" + (toQueryString(req));","    };","  };","  for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","    f = _ref[_i];","    _fn(f);","  }","","  _get_data_fetcher = function(server_fn) {","    return function() {","      var cbs, page, x, _ref1;","      page = arguments[0], cbs = 2 &lt;= arguments.length ? __slice.call(arguments, 1) : [];","      if (this.service[server_fn]) {","        if (!(page != null)) {","          page = {};","        } else if (utils.isFunction(page)) {","          page = {};","          cbs = (function() {","            var _j, _len1, _results;","            _results = [];","            for (_j = 0, _len1 = arguments.length; _j &lt; _len1; _j++) {","              x = arguments[_j];","              _results.push(x);","            }","            return _results;","          }).apply(this, arguments);","        }","        page = noUndefVals(merge({","          start: this.start,","          size: this.maxRows","        }, page));","        return (_ref1 = this.service)[server_fn].apply(_ref1, [this, page].concat(__slice.call(cbs)));","      } else {","        throw new Error(\"Service does not provide '\" + server_fn + \"'.\");","      }","    };","  };","","  for (_j = 0, _len1 = RESULTS_METHODS.length; _j &lt; _len1; _j++) {","    mth = RESULTS_METHODS[_j];","    Query.prototype[mth] = _get_data_fetcher(mth);","  }","","  intermine.Query = Query;","","}).call(this);"];
_$jscoverage['query.js'][1]++;
(function () {
  _$jscoverage['query.js'][2]++;
  var BASIC_ATTRS, CODES, LIST_PIPE, Query, RESULTS_METHODS, SIMPLE_ATTRS, conAttrs, conStr, conToJSON, conValStr, concatMap, copyCon, decapitate, didntRemove, f, filter, fold, get, get_canonical_op, headLess, id, idConStr, intermine, interpretConArray, interpretConstraint, invoke, merge, mth, multiConStr, noUndefVals, noValueConStr, pairsToObj, partition, removeIrrelevantSortOrders, simpleConStr, stringToSortOrder, take, toQueryString, typeConStr, union, utils, withCB, _fn, _get_data_fetcher, _i, _j, _len, _len1, _ref, __indexOf = ([].indexOf || (function (item) {
  _$jscoverage['query.js'][3]++;
  for (var i = 0, l = this.length; (i < l); (i++)) {
    _$jscoverage['query.js'][3]++;
    if (((i in this) && (this[i] === item))) {
      _$jscoverage['query.js'][3]++;
      return i;
    }
}
  _$jscoverage['query.js'][3]++;
  return -1;
})), __bind = (function (fn, me) {
  _$jscoverage['query.js'][4]++;
  return (function () {
  _$jscoverage['query.js'][4]++;
  return fn.apply(me, arguments);
});
}), __slice = [].slice, __hasProp = ({}).hasOwnProperty;
  _$jscoverage['query.js'][8]++;
  intermine = exports;
  _$jscoverage['query.js'][10]++;
  intermine.xml = require("./xml");
  _$jscoverage['query.js'][12]++;
  utils = require("./util");
  _$jscoverage['query.js'][14]++;
  ((withCB = utils.withCB), (merge = utils.merge), (pairsToObj = utils.pairsToObj), (filter = utils.filter), (partition = utils.partition), (fold = utils.fold), (take = utils.take), (concatMap = utils.concatMap), (id = utils.id), (get = utils.get), (invoke = utils.invoke));
  _$jscoverage['query.js'][16]++;
  toQueryString = utils.querystring;
  _$jscoverage['query.js'][18]++;
  get_canonical_op = (function (orig) {
  _$jscoverage['query.js'][19]++;
  var canonical;
  _$jscoverage['query.js'][20]++;
  canonical = ((((orig != null)? orig.toLowerCase: (void 0)) != null)? Query.OP_DICT[orig.toLowerCase()]: null);
  _$jscoverage['query.js'][21]++;
  if ((! canonical)) {
    _$jscoverage['query.js'][22]++;
    throw new Error(("Illegal constraint operator: " + orig));
  }
  _$jscoverage['query.js'][24]++;
  return canonical;
});
  _$jscoverage['query.js'][27]++;
  BASIC_ATTRS = ["path", "op", "code"];
  _$jscoverage['query.js'][29]++;
  SIMPLE_ATTRS = BASIC_ATTRS.concat(["value", "extraValue"]);
  _$jscoverage['query.js'][31]++;
  RESULTS_METHODS = ["rowByRow", "eachRow", "recordByRecord", "eachRecord", "records", "rows", "table", "tableRows", "values"];
  _$jscoverage['query.js'][33]++;
  LIST_PIPE = (function (service) {
  _$jscoverage['query.js'][34]++;
  return utils.compose(service.fetchList, get("listName"));
});
  _$jscoverage['query.js'][37]++;
  CODES = [null, "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"];
  _$jscoverage['query.js'][39]++;
  decapitate = (function (x) {
  _$jscoverage['query.js'][40]++;
  if ((x == null)) {
    _$jscoverage['query.js'][41]++;
    x = "";
  }
  _$jscoverage['query.js'][43]++;
  return x.substr(x.indexOf("."));
});
  _$jscoverage['query.js'][46]++;
  conValStr = (function (v) {
  _$jscoverage['query.js'][47]++;
  if ((v != null)) {
    _$jscoverage['query.js'][48]++;
    return ("<value>" + utils.escape(v) + "</value>");
  }
  else {
    _$jscoverage['query.js'][50]++;
    return "<nullValue/>";
  }
});
  _$jscoverage['query.js'][54]++;
  conAttrs = (function (c, names) {
  _$jscoverage['query.js'][55]++;
  var k, v;
  _$jscoverage['query.js'][56]++;
  return (function () {
  _$jscoverage['query.js'][57]++;
  var _results;
  _$jscoverage['query.js'][58]++;
  _results = [];
  _$jscoverage['query.js'][59]++;
  for (k in c) {
    _$jscoverage['query.js'][60]++;
    v = c[k];
    _$jscoverage['query.js'][61]++;
    if ((__indexOf.call(names, k) >= 0)) {
      _$jscoverage['query.js'][62]++;
      _results.push(("" + k + "=\"" + utils.escape(v) + "\" "));
    }
}
  _$jscoverage['query.js'][65]++;
  return _results;
})().join("");
});
  _$jscoverage['query.js'][69]++;
  noValueConStr = (function (c) {
  _$jscoverage['query.js'][70]++;
  return ("<constraint " + conAttrs(c, BASIC_ATTRS) + "/>");
});
  _$jscoverage['query.js'][73]++;
  typeConStr = (function (c) {
  _$jscoverage['query.js'][74]++;
  return ("<constraint " + conAttrs(c, ["path", "type"]) + "/>");
});
  _$jscoverage['query.js'][77]++;
  simpleConStr = (function (c) {
  _$jscoverage['query.js'][78]++;
  return ("<constraint " + conAttrs(c, SIMPLE_ATTRS) + "/>");
});
  _$jscoverage['query.js'][81]++;
  multiConStr = (function (c) {
  _$jscoverage['query.js'][82]++;
  return ("<constraint " + conAttrs(c, BASIC_ATTRS) + ">" + (concatMap(conValStr))(c.values) + "</constraint>");
});
  _$jscoverage['query.js'][85]++;
  idConStr = (function (c) {
  _$jscoverage['query.js'][86]++;
  return ("<constraint " + conAttrs(c, BASIC_ATTRS) + "ids=\"" + c.ids.join(",") + "\"/>");
});
  _$jscoverage['query.js'][89]++;
  conStr = (function (c) {
  _$jscoverage['query.js'][90]++;
  var _ref;
  _$jscoverage['query.js'][91]++;
  if ((c.values != null)) {
    _$jscoverage['query.js'][92]++;
    return multiConStr(c);
  }
  else {
    _$jscoverage['query.js'][93]++;
    if ((c.ids != null)) {
      _$jscoverage['query.js'][94]++;
      return idConStr(c);
    }
    else {
      _$jscoverage['query.js'][95]++;
      if ((! (c.op != null))) {
        _$jscoverage['query.js'][96]++;
        return typeConStr(c);
      }
      else {
        _$jscoverage['query.js'][97]++;
        if (((_ref = c.op), (__indexOf.call(Query.NULL_OPS, _ref) >= 0))) {
          _$jscoverage['query.js'][98]++;
          return noValueConStr(c);
        }
        else {
          _$jscoverage['query.js'][100]++;
          return simpleConStr(c);
        }
      }
    }
  }
});
  _$jscoverage['query.js'][104]++;
  headLess = (function (path) {
  _$jscoverage['query.js'][105]++;
  return path.replace(/^[^\.]+\./, "");
});
  _$jscoverage['query.js'][108]++;
  copyCon = (function (con) {
  _$jscoverage['query.js'][109]++;
  var code, extraValue, ids, op, path, type, value, values;
  _$jscoverage['query.js'][110]++;
  ((path = con.path), (type = con.type), (op = con.op), (value = con.value), (values = con.values), (extraValue = con.extraValue), (ids = con.ids), (code = con.code));
  _$jscoverage['query.js'][111]++;
  ids = ((ids != null)? ids.slice(): (void 0));
  _$jscoverage['query.js'][112]++;
  values = ((values != null)? values.slice(): (void 0));
  _$jscoverage['query.js'][113]++;
  return noUndefVals({path: path, type: type, op: op, value: value, values: values, extraValue: extraValue, ids: ids, code: code});
});
  _$jscoverage['query.js'][125]++;
  conToJSON = (function (con) {
  _$jscoverage['query.js'][126]++;
  var copy;
  _$jscoverage['query.js'][127]++;
  copy = copyCon(con);
  _$jscoverage['query.js'][128]++;
  copy.path = headLess(copy.path);
  _$jscoverage['query.js'][129]++;
  return copy;
});
  _$jscoverage['query.js'][132]++;
  noUndefVals = (function (x) {
  _$jscoverage['query.js'][133]++;
  var k, v;
  _$jscoverage['query.js'][134]++;
  for (k in x) {
    _$jscoverage['query.js'][135]++;
    v = x[k];
    _$jscoverage['query.js'][136]++;
    if ((v == null)) {
      _$jscoverage['query.js'][137]++;
      (delete x[k]);
    }
}
  _$jscoverage['query.js'][140]++;
  return x;
});
  _$jscoverage['query.js'][143]++;
  didntRemove = (function (orig, reduced) {
  _$jscoverage['query.js'][144]++;
  return ("Did not remove a single constraint. original = " + orig + ", reduced = " + reduced);
});
  _$jscoverage['query.js'][147]++;
  interpretConstraint = (function (path, con) {
  _$jscoverage['query.js'][148]++;
  var constraint, k, keys, v, x, _ref, _ref1;
  _$jscoverage['query.js'][149]++;
  constraint = {path: path};
  _$jscoverage['query.js'][152]++;
  if ((con === null)) {
    _$jscoverage['query.js'][153]++;
    constraint.op = "IS NULL";
  }
  else {
    _$jscoverage['query.js'][154]++;
    if (utils.isArray(con)) {
      _$jscoverage['query.js'][155]++;
      constraint.op = "ONE OF";
      _$jscoverage['query.js'][156]++;
      constraint.values = con;
    }
    else {
      _$jscoverage['query.js'][157]++;
      if ((((_ref = (typeof con)) === "string") || (_ref === "number"))) {
        _$jscoverage['query.js'][158]++;
        if (((_ref1 = (((typeof con.toUpperCase) === "function")? con.toUpperCase(): (void 0))), (__indexOf.call(Query.NULL_OPS, _ref1) >= 0))) {
          _$jscoverage['query.js'][159]++;
          constraint.op = con;
        }
        else {
          _$jscoverage['query.js'][161]++;
          constraint.op = "=";
          _$jscoverage['query.js'][162]++;
          constraint.value = con;
        }
      }
      else {
        _$jscoverage['query.js'][165]++;
        keys = (function () {
  _$jscoverage['query.js'][166]++;
  var _results;
  _$jscoverage['query.js'][167]++;
  _results = [];
  _$jscoverage['query.js'][168]++;
  for (k in con) {
    _$jscoverage['query.js'][169]++;
    x = con[k];
    _$jscoverage['query.js'][170]++;
    _results.push(k);
}
  _$jscoverage['query.js'][172]++;
  return _results;
})();
        _$jscoverage['query.js'][174]++;
        if ((__indexOf.call(keys, "isa") >= 0)) {
          _$jscoverage['query.js'][175]++;
          if (utils.isArray(con.isa)) {
            _$jscoverage['query.js'][176]++;
            constraint.op = k;
            _$jscoverage['query.js'][177]++;
            constraint.values = con.isa;
          }
          else {
            _$jscoverage['query.js'][179]++;
            constraint.type = con.isa;
          }
        }
        else {
          _$jscoverage['query.js'][182]++;
          if ((__indexOf.call(keys, "extraValue") >= 0)) {
            _$jscoverage['query.js'][183]++;
            constraint.extraValue = con.extraValue;
          }
          _$jscoverage['query.js'][185]++;
          for (k in con) {
            _$jscoverage['query.js'][186]++;
            v = con[k];
            _$jscoverage['query.js'][187]++;
            if ((! (k !== "extraValue"))) {
              _$jscoverage['query.js'][188]++;
              continue;
            }
            _$jscoverage['query.js'][190]++;
            constraint.op = k;
            _$jscoverage['query.js'][191]++;
            if (utils.isArray(v)) {
              _$jscoverage['query.js'][192]++;
              constraint.values = v;
            }
            else {
              _$jscoverage['query.js'][194]++;
              constraint.value = v;
            }
}
        }
      }
    }
  }
  _$jscoverage['query.js'][199]++;
  return constraint;
});
  _$jscoverage['query.js'][202]++;
  interpretConArray = (function (conArgs) {
  _$jscoverage['query.js'][203]++;
  var a0, constraint, v, _ref;
  _$jscoverage['query.js'][204]++;
  conArgs = conArgs.slice();
  _$jscoverage['query.js'][205]++;
  constraint = {path: conArgs.shift()};
  _$jscoverage['query.js'][208]++;
  if ((conArgs.length === 1)) {
    _$jscoverage['query.js'][209]++;
    a0 = conArgs[0];
    _$jscoverage['query.js'][210]++;
    if (((_ref = (((typeof a0.toUpperCase) === "function")? a0.toUpperCase(): (void 0))), (__indexOf.call(Query.NULL_OPS, _ref) >= 0))) {
      _$jscoverage['query.js'][211]++;
      constraint.op = a0;
    }
    else {
      _$jscoverage['query.js'][213]++;
      constraint.type = a0;
    }
  }
  else {
    _$jscoverage['query.js'][215]++;
    if ((conArgs.length >= 2)) {
      _$jscoverage['query.js'][216]++;
      constraint.op = conArgs[0];
      _$jscoverage['query.js'][217]++;
      v = conArgs[1];
      _$jscoverage['query.js'][218]++;
      if (utils.isArray(v)) {
        _$jscoverage['query.js'][219]++;
        constraint.values = v;
      }
      else {
        _$jscoverage['query.js'][221]++;
        constraint.value = v;
      }
      _$jscoverage['query.js'][223]++;
      if ((conArgs.length === 3)) {
        _$jscoverage['query.js'][224]++;
        constraint.extraValue = conArgs[2];
      }
    }
  }
  _$jscoverage['query.js'][227]++;
  return constraint;
});
  _$jscoverage['query.js'][230]++;
  stringToSortOrder = (function (str) {
  _$jscoverage['query.js'][231]++;
  var i, parts, pathIndices, x, _i, _len, _results;
  _$jscoverage['query.js'][232]++;
  if ((str == null)) {
    _$jscoverage['query.js'][233]++;
    return [];
  }
  _$jscoverage['query.js'][235]++;
  parts = str.split(/\s+/);
  _$jscoverage['query.js'][236]++;
  pathIndices = (function () {
  _$jscoverage['query.js'][237]++;
  var _i, _ref, _results;
  _$jscoverage['query.js'][238]++;
  _results = [];
  _$jscoverage['query.js'][239]++;
  for (((x = (_i = 0)), (_ref = (parts.length / 2))); ((0 <= _ref)? (_i < _ref): (_i > _ref)); (x = ((0 <= _ref)? (++_i): (--_i)))) {
    _$jscoverage['query.js'][240]++;
    _results.push((x * 2));
}
  _$jscoverage['query.js'][242]++;
  return _results;
})();
  _$jscoverage['query.js'][244]++;
  _results = [];
  _$jscoverage['query.js'][245]++;
  for (((_i = 0), (_len = pathIndices.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][246]++;
    i = pathIndices[_i];
    _$jscoverage['query.js'][247]++;
    _results.push([parts[i], parts[(i + 1)]]);
}
  _$jscoverage['query.js'][249]++;
  return _results;
});
  _$jscoverage['query.js'][252]++;
  removeIrrelevantSortOrders = (function () {
  _$jscoverage['query.js'][253]++;
  var oe, oldOrder;
  _$jscoverage['query.js'][254]++;
  oldOrder = this.sortOrder;
  _$jscoverage['query.js'][255]++;
  this.sortOrder = (function () {
  _$jscoverage['query.js'][256]++;
  var _i, _len, _results;
  _$jscoverage['query.js'][257]++;
  _results = [];
  _$jscoverage['query.js'][258]++;
  for (((_i = 0), (_len = oldOrder.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][259]++;
    oe = oldOrder[_i];
    _$jscoverage['query.js'][260]++;
    if (this.isRelevant(oe.path)) {
      _$jscoverage['query.js'][261]++;
      _results.push(oe);
    }
}
  _$jscoverage['query.js'][264]++;
  return _results;
}).call(this);
  _$jscoverage['query.js'][266]++;
  if ((oldOrder.length !== this.sortOrder.length)) {
    _$jscoverage['query.js'][267]++;
    return this.trigger("change:sortorder change:orderby", this.sortOrder.slice());
  }
});
  _$jscoverage['query.js'][271]++;
  Query = (function () {
  _$jscoverage['query.js'][272]++;
  var addPI, cAttrs, kids, parseSummary, qAttrs, scFold, toAttrPairs, toPathAndType, xmlAttr;
  _$jscoverage['query.js'][274]++;
  Query.JOIN_STYLES = ["INNER", "OUTER"];
  _$jscoverage['query.js'][276]++;
  Query.BIO_FORMATS = ["gff3", "fasta", "bed"];
  _$jscoverage['query.js'][278]++;
  Query.NULL_OPS = ["IS NULL", "IS NOT NULL"];
  _$jscoverage['query.js'][280]++;
  Query.ATTRIBUTE_VALUE_OPS = ["=", "!=", ">", ">=", "<", "<=", "CONTAINS", "LIKE", "NOT LIKE"];
  _$jscoverage['query.js'][282]++;
  Query.MULTIVALUE_OPS = ["ONE OF", "NONE OF"];
  _$jscoverage['query.js'][284]++;
  Query.TERNARY_OPS = ["LOOKUP"];
  _$jscoverage['query.js'][286]++;
  Query.LOOP_OPS = ["=", "!="];
  _$jscoverage['query.js'][288]++;
  Query.LIST_OPS = ["IN", "NOT IN"];
  _$jscoverage['query.js'][290]++;
  Query.OP_DICT = {"=": "=", "==": "==", "eq": "=", "eqq": "==", "!=": "!=", "ne": "!=", ">": ">", "gt": ">", ">=": ">=", "ge": ">=", "<": "<", "lt": "<", "<=": "<=", "le": "<=", "contains": "CONTAINS", "CONTAINS": "CONTAINS", "like": "LIKE", "LIKE": "LIKE", "not like": "NOT LIKE", "NOT LIKE": "NOT LIKE", "lookup": "LOOKUP", "IS NULL": "IS NULL", "is null": "IS NULL", "IS NOT NULL": "IS NOT NULL", "is not null": "IS NOT NULL", "ONE OF": "ONE OF", "one of": "ONE OF", "NONE OF": "NONE OF", "none of": "NONE OF", "in": "IN", "not in": "NOT IN", "IN": "IN", "NOT IN": "NOT IN", "WITHIN": "WITHIN", "within": "WITHIN", "OVERLAPS": "OVERLAPS", "overlaps": "OVERLAPS", "ISA": "ISA", "isa": "ISA"};
  _$jscoverage['query.js'][332]++;
  Query.prototype.on = (function (events, callback, context) {
  _$jscoverage['query.js'][333]++;
  var calls, ev, list, tail, _ref, _ref1, _ref2;
  _$jscoverage['query.js'][334]++;
  events = events.split(/\s+/);
  _$jscoverage['query.js'][335]++;
  calls = (((_ref = this._callbacks) != null)? _ref: (this._callbacks = {}));
  _$jscoverage['query.js'][336]++;
  while ((ev = events.shift())) {
    _$jscoverage['query.js'][337]++;
    list = (((_ref1 = calls[ev]) != null)? _ref1: (calls[ev] = {}));
    _$jscoverage['query.js'][338]++;
    tail = (((_ref2 = list.tail) != null)? _ref2: (list.tail = (list.next = {})));
    _$jscoverage['query.js'][339]++;
    tail.callback = callback;
    _$jscoverage['query.js'][340]++;
    tail.context = context;
    _$jscoverage['query.js'][341]++;
    list.tail = (tail.next = {});
}
  _$jscoverage['query.js'][343]++;
  return this;
});
  _$jscoverage['query.js'][346]++;
  Query.prototype.bind = (function () {
  _$jscoverage['query.js'][347]++;
  var args;
  _$jscoverage['query.js'][348]++;
  args = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['query.js'][349]++;
  return this.on.apply(this, args);
});
  _$jscoverage['query.js'][352]++;
  Query.prototype.off = (function (events, callback, context) {
  _$jscoverage['query.js'][353]++;
  var calls, current, ev, last, linkedList, node, remove, _i, _len, _ref;
  _$jscoverage['query.js'][354]++;
  if ((events == null)) {
    _$jscoverage['query.js'][355]++;
    this._callbacks = {};
    _$jscoverage['query.js'][356]++;
    return this;
  }
  _$jscoverage['query.js'][358]++;
  events = events.split(/\s+/);
  _$jscoverage['query.js'][359]++;
  calls = (((_ref = this._callbacks) != null)? _ref: (this._callbacks = {}));
  _$jscoverage['query.js'][360]++;
  for (((_i = 0), (_len = events.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][361]++;
    ev = events[_i];
    _$jscoverage['query.js'][362]++;
    if ((callback != null)) {
      _$jscoverage['query.js'][363]++;
      current = (linkedList = (calls[ev] || {}));
      _$jscoverage['query.js'][364]++;
      last = linkedList.tail;
      _$jscoverage['query.js'][365]++;
      while (((node = current.next) !== last)) {
        _$jscoverage['query.js'][366]++;
        remove = (((! (context != null)) || (node.context === context)) && (callback === node.callback));
        _$jscoverage['query.js'][367]++;
        if (remove) {
          _$jscoverage['query.js'][368]++;
          current.next = (node.next || last);
          _$jscoverage['query.js'][369]++;
          node = current;
        }
        else {
          _$jscoverage['query.js'][371]++;
          current = node;
        }
}
    }
    else {
      _$jscoverage['query.js'][375]++;
      (delete calls[ev]);
    }
}
  _$jscoverage['query.js'][378]++;
  return this;
});
  _$jscoverage['query.js'][381]++;
  Query.prototype.unbind = (function () {
  _$jscoverage['query.js'][382]++;
  var args;
  _$jscoverage['query.js'][383]++;
  args = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['query.js'][384]++;
  return this.off.apply(this, args);
});
  _$jscoverage['query.js'][387]++;
  Query.prototype.once = (function (events, callback, context) {
  _$jscoverage['query.js'][388]++;
  var f, _this = this;
  _$jscoverage['query.js'][390]++;
  f = (function () {
  _$jscoverage['query.js'][391]++;
  var args;
  _$jscoverage['query.js'][392]++;
  args = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['query.js'][393]++;
  callback.apply(context, args);
  _$jscoverage['query.js'][394]++;
  return _this.off(events, f);
});
  _$jscoverage['query.js'][396]++;
  return this.on(events, f);
});
  _$jscoverage['query.js'][399]++;
  Query.prototype.emit = (function () {
  _$jscoverage['query.js'][400]++;
  var args;
  _$jscoverage['query.js'][401]++;
  args = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['query.js'][402]++;
  return this.trigger.apply(this, args);
});
  _$jscoverage['query.js'][405]++;
  Query.prototype.trigger = (function () {
  _$jscoverage['query.js'][406]++;
  var all, args, calls, event, events, node, rest, tail;
  _$jscoverage['query.js'][407]++;
  ((events = arguments[0]), (rest = ((2 <= arguments.length)? __slice.call(arguments, 1): [])));
  _$jscoverage['query.js'][408]++;
  calls = this._callbacks;
  _$jscoverage['query.js'][409]++;
  if ((! calls)) {
    _$jscoverage['query.js'][410]++;
    return this;
  }
  _$jscoverage['query.js'][412]++;
  all = calls.all;
  _$jscoverage['query.js'][413]++;
  (events = events.split(/\s+/)).push(null);
  _$jscoverage['query.js'][414]++;
  while ((event = events.shift())) {
    _$jscoverage['query.js'][415]++;
    if (all) {
      _$jscoverage['query.js'][416]++;
      events.push({next: all.next, tail: all.tail, event: event});
    }
    _$jscoverage['query.js'][422]++;
    if ((! (node = calls[event]))) {
      _$jscoverage['query.js'][423]++;
      continue;
    }
    _$jscoverage['query.js'][425]++;
    events.push({next: node.next, tail: node.tail});
}
  _$jscoverage['query.js'][430]++;
  while ((node = events.pop())) {
    _$jscoverage['query.js'][431]++;
    tail = node.tail;
    _$jscoverage['query.js'][432]++;
    args = (node.event? [node.event].concat(rest): rest);
    _$jscoverage['query.js'][433]++;
    while (((node = node.next) !== tail)) {
      _$jscoverage['query.js'][434]++;
      node.callback.apply((node.context || this), args);
}
}
  _$jscoverage['query.js'][437]++;
  return this;
});
  _$jscoverage['query.js'][440]++;
  qAttrs = ["name", "view", "sortOrder", "constraintLogic", "title", "description", "comment"];
  _$jscoverage['query.js'][442]++;
  cAttrs = ["path", "type", "op", "code", "value", "ids"];
  _$jscoverage['query.js'][444]++;
  toAttrPairs = (function (el, attrs) {
  _$jscoverage['query.js'][445]++;
  var x, _i, _len, _results;
  _$jscoverage['query.js'][446]++;
  _results = [];
  _$jscoverage['query.js'][447]++;
  for (((_i = 0), (_len = attrs.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][448]++;
    x = attrs[_i];
    _$jscoverage['query.js'][449]++;
    if (el.hasAttribute(x)) {
      _$jscoverage['query.js'][450]++;
      _results.push([x, el.getAttribute(x)]);
    }
}
  _$jscoverage['query.js'][453]++;
  return _results;
});
  _$jscoverage['query.js'][456]++;
  kids = (function (el, name) {
  _$jscoverage['query.js'][457]++;
  var kid, _i, _len, _ref, _results;
  _$jscoverage['query.js'][458]++;
  _ref = el.getElementsByTagName(name);
  _$jscoverage['query.js'][459]++;
  _results = [];
  _$jscoverage['query.js'][460]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][461]++;
    kid = _ref[_i];
    _$jscoverage['query.js'][462]++;
    _results.push(kid);
}
  _$jscoverage['query.js'][464]++;
  return _results;
});
  _$jscoverage['query.js'][467]++;
  xmlAttr = (function (name) {
  _$jscoverage['query.js'][468]++;
  return (function (el) {
  _$jscoverage['query.js'][469]++;
  return el.getAttribute(name);
});
});
  _$jscoverage['query.js'][473]++;
  Query.fromXML = (function (xml) {
  _$jscoverage['query.js'][474]++;
  var con, dom, j, pathOf, q, query, styleOf;
  _$jscoverage['query.js'][475]++;
  dom = intermine.xml.parse(xml);
  _$jscoverage['query.js'][476]++;
  query = (kids(dom, "query")[0] || kids(dom, "template")[0]);
  _$jscoverage['query.js'][477]++;
  if ((! query)) {
    _$jscoverage['query.js'][478]++;
    throw new Error("no query in xml");
  }
  _$jscoverage['query.js'][480]++;
  pathOf = xmlAttr("path");
  _$jscoverage['query.js'][481]++;
  styleOf = xmlAttr("style");
  _$jscoverage['query.js'][482]++;
  q = pairsToObj(toAttrPairs(query, qAttrs));
  _$jscoverage['query.js'][483]++;
  q.view = q.view.split(/\s+/);
  _$jscoverage['query.js'][484]++;
  q.sortOrder = stringToSortOrder(q.sortOrder);
  _$jscoverage['query.js'][485]++;
  q.joins = (function () {
  _$jscoverage['query.js'][486]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][487]++;
  _ref = kids(query, "join");
  _$jscoverage['query.js'][488]++;
  _results = [];
  _$jscoverage['query.js'][489]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][490]++;
    j = _ref[_i];
    _$jscoverage['query.js'][491]++;
    if ((styleOf(j) === "OUTER")) {
      _$jscoverage['query.js'][492]++;
      _results.push(pathOf(j));
    }
}
  _$jscoverage['query.js'][495]++;
  return _results;
})();
  _$jscoverage['query.js'][497]++;
  q.constraints = (function () {
  _$jscoverage['query.js'][498]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][499]++;
  _ref = kids(query, "constraint");
  _$jscoverage['query.js'][500]++;
  _results = [];
  _$jscoverage['query.js'][501]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][502]++;
    con = _ref[_i];
    _$jscoverage['query.js'][503]++;
    _results.push((function (con) {
  _$jscoverage['query.js'][504]++;
  var c, tn, v, values, x;
  _$jscoverage['query.js'][505]++;
  c = pairsToObj(toAttrPairs(con, cAttrs));
  _$jscoverage['query.js'][506]++;
  if ((c.ids != null)) {
    _$jscoverage['query.js'][507]++;
    c.ids = (function () {
  _$jscoverage['query.js'][508]++;
  var _j, _len1, _ref1, _results1;
  _$jscoverage['query.js'][509]++;
  _ref1 = c.ids.split(",");
  _$jscoverage['query.js'][510]++;
  _results1 = [];
  _$jscoverage['query.js'][511]++;
  for (((_j = 0), (_len1 = _ref1.length)); (_j < _len1); (_j++)) {
    _$jscoverage['query.js'][512]++;
    x = _ref1[_j];
    _$jscoverage['query.js'][513]++;
    _results1.push(parseInt(x, 10));
}
  _$jscoverage['query.js'][515]++;
  return _results1;
})();
  }
  _$jscoverage['query.js'][518]++;
  values = kids(con, "value");
  _$jscoverage['query.js'][519]++;
  if (values.length) {
    _$jscoverage['query.js'][520]++;
    c.values = (function () {
  _$jscoverage['query.js'][521]++;
  var _j, _len1, _results1;
  _$jscoverage['query.js'][522]++;
  _results1 = [];
  _$jscoverage['query.js'][523]++;
  for (((_j = 0), (_len1 = values.length)); (_j < _len1); (_j++)) {
    _$jscoverage['query.js'][524]++;
    v = values[_j];
    _$jscoverage['query.js'][525]++;
    _results1.push((function () {
  _$jscoverage['query.js'][526]++;
  var _k, _len2, _ref1, _results2;
  _$jscoverage['query.js'][527]++;
  _ref1 = v.childNodes;
  _$jscoverage['query.js'][528]++;
  _results2 = [];
  _$jscoverage['query.js'][529]++;
  for (((_k = 0), (_len2 = _ref1.length)); (_k < _len2); (_k++)) {
    _$jscoverage['query.js'][530]++;
    tn = _ref1[_k];
    _$jscoverage['query.js'][531]++;
    _results2.push(tn.data);
}
  _$jscoverage['query.js'][533]++;
  return _results2;
})().join(""));
}
  _$jscoverage['query.js'][536]++;
  return _results1;
})();
  }
  _$jscoverage['query.js'][539]++;
  return c;
})(con));
}
  _$jscoverage['query.js'][542]++;
  return _results;
})();
  _$jscoverage['query.js'][544]++;
  return q;
});
  _$jscoverage['query.js'][547]++;
  Query.prototype.constraints = [];
  _$jscoverage['query.js'][549]++;
  Query.prototype.views = [];
  _$jscoverage['query.js'][551]++;
  Query.prototype.joins = {};
  _$jscoverage['query.js'][553]++;
  Query.prototype.constraintLogic = "";
  _$jscoverage['query.js'][555]++;
  Query.prototype.sortOrder = "";
  _$jscoverage['query.js'][557]++;
  Query.prototype.name = null;
  _$jscoverage['query.js'][559]++;
  Query.prototype.title = null;
  _$jscoverage['query.js'][561]++;
  Query.prototype.comment = null;
  _$jscoverage['query.js'][563]++;
  Query.prototype.description = null;
  _$jscoverage['query.js'][565]++;
  function Query(properties, service) {
    _$jscoverage['query.js'][566]++;
    this.addConstraint = __bind(this.addConstraint, this);
    _$jscoverage['query.js'][568]++;
    this.expandStar = __bind(this.expandStar, this);
    _$jscoverage['query.js'][570]++;
    this.adjustPath = __bind(this.adjustPath, this);
    _$jscoverage['query.js'][572]++;
    this.select = __bind(this.select, this);
    _$jscoverage['query.js'][574]++;
    var prop, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    _$jscoverage['query.js'][575]++;
    if ((properties == null)) {
      _$jscoverage['query.js'][576]++;
      properties = {};
    }
    _$jscoverage['query.js'][578]++;
    this.constraints = [];
    _$jscoverage['query.js'][579]++;
    this.views = [];
    _$jscoverage['query.js'][580]++;
    this.joins = {};
    _$jscoverage['query.js'][581]++;
    this.displayNames = utils.copy((((_ref = (((_ref1 = properties.displayNames) != null)? _ref1: properties.aliases)) != null)? _ref: {}));
    _$jscoverage['query.js'][582]++;
    _ref2 = ["name", "title", "comment", "description"];
    _$jscoverage['query.js'][583]++;
    for (((_i = 0), (_len = _ref2.length)); (_i < _len); (_i++)) {
      _$jscoverage['query.js'][584]++;
      prop = _ref2[_i];
      _$jscoverage['query.js'][585]++;
      if ((properties[prop] != null)) {
        _$jscoverage['query.js'][586]++;
        this[prop] = properties[prop];
      }
}
    _$jscoverage['query.js'][589]++;
    this.service = ((service != null)? service: {});
    _$jscoverage['query.js'][590]++;
    this.model = (((_ref3 = properties.model) != null)? _ref3: {});
    _$jscoverage['query.js'][591]++;
    this.summaryFields = (((_ref4 = properties.summaryFields) != null)? _ref4: {});
    _$jscoverage['query.js'][592]++;
    this.root = (((_ref5 = properties.root) != null)? _ref5: properties.from);
    _$jscoverage['query.js'][593]++;
    this.maxRows = (((_ref6 = (((_ref7 = properties.size) != null)? _ref7: properties.limit)) != null)? _ref6: properties.maxRows);
    _$jscoverage['query.js'][594]++;
    this.start = (((_ref8 = (((_ref9 = properties.start) != null)? _ref9: properties.offset)) != null)? _ref8: 0);
    _$jscoverage['query.js'][595]++;
    this.select((properties.views || properties.view || properties.select || []));
    _$jscoverage['query.js'][596]++;
    this.addConstraints((properties.constraints || properties.where || []));
    _$jscoverage['query.js'][597]++;
    this.addJoins((properties.joins || properties.join || []));
    _$jscoverage['query.js'][598]++;
    this.orderBy((properties.sortOrder || properties.orderBy || []));
    _$jscoverage['query.js'][599]++;
    if ((properties.constraintLogic != null)) {
      _$jscoverage['query.js'][600]++;
      this.constraintLogic = properties.constraintLogic;
    }
    _$jscoverage['query.js'][602]++;
    this.on("change:views", removeIrrelevantSortOrders, this);
}
  _$jscoverage['query.js'][605]++;
  Query.prototype.removeFromSelect = (function (unwanted) {
  _$jscoverage['query.js'][606]++;
  var mapFn, so, uw, v;
  _$jscoverage['query.js'][607]++;
  if ((unwanted == null)) {
    _$jscoverage['query.js'][608]++;
    unwanted = [];
  }
  _$jscoverage['query.js'][610]++;
  unwanted = utils.stringList(unwanted);
  _$jscoverage['query.js'][611]++;
  mapFn = utils.compose(this.expandStar, this.adjustPath);
  _$jscoverage['query.js'][612]++;
  unwanted = utils.flatten((function () {
  _$jscoverage['query.js'][613]++;
  var _i, _len, _results;
  _$jscoverage['query.js'][614]++;
  _results = [];
  _$jscoverage['query.js'][615]++;
  for (((_i = 0), (_len = unwanted.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][616]++;
    uw = unwanted[_i];
    _$jscoverage['query.js'][617]++;
    _results.push(mapFn(uw));
}
  _$jscoverage['query.js'][619]++;
  return _results;
})());
  _$jscoverage['query.js'][621]++;
  this.sortOrder = (function () {
  _$jscoverage['query.js'][622]++;
  var _i, _len, _ref, _ref1, _results;
  _$jscoverage['query.js'][623]++;
  _ref = this.sortOrder;
  _$jscoverage['query.js'][624]++;
  _results = [];
  _$jscoverage['query.js'][625]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][626]++;
    so = _ref[_i];
    _$jscoverage['query.js'][627]++;
    if ((! ((_ref1 = so.path), (__indexOf.call(unwanted, _ref1) >= 0)))) {
      _$jscoverage['query.js'][628]++;
      _results.push(so);
    }
}
  _$jscoverage['query.js'][631]++;
  return _results;
}).call(this);
  _$jscoverage['query.js'][633]++;
  this.views = (function () {
  _$jscoverage['query.js'][634]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][635]++;
  _ref = this.views;
  _$jscoverage['query.js'][636]++;
  _results = [];
  _$jscoverage['query.js'][637]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][638]++;
    v = _ref[_i];
    _$jscoverage['query.js'][639]++;
    if ((! (__indexOf.call(unwanted, v) >= 0))) {
      _$jscoverage['query.js'][640]++;
      _results.push(v);
    }
}
  _$jscoverage['query.js'][643]++;
  return _results;
}).call(this);
  _$jscoverage['query.js'][645]++;
  this.trigger("remove:view", unwanted);
  _$jscoverage['query.js'][646]++;
  return this.trigger("change:views", this.views);
});
  _$jscoverage['query.js'][649]++;
  Query.prototype.removeConstraint = (function (con, silent) {
  _$jscoverage['query.js'][650]++;
  var c, iscon, orig, reduced;
  _$jscoverage['query.js'][651]++;
  if ((silent == null)) {
    _$jscoverage['query.js'][652]++;
    silent = false;
  }
  _$jscoverage['query.js'][654]++;
  orig = this.constraints;
  _$jscoverage['query.js'][655]++;
  iscon = (((typeof con) === "string")? (function (c) {
  _$jscoverage['query.js'][656]++;
  return (c.code === con);
}): (function (c) {
  _$jscoverage['query.js'][658]++;
  var _ref, _ref1;
  _$jscoverage['query.js'][659]++;
  return ((c.path === con.path) && (c.op === con.op) && (c.value === con.value) && (c.extraValue === con.extraValue) && (con.type === c.type) && ((((_ref = c.values) != null)? _ref.join("%%"): (void 0)) === (((_ref1 = con.values) != null)? _ref1.join("%%"): (void 0))));
}));
  _$jscoverage['query.js'][661]++;
  reduced = (function () {
  _$jscoverage['query.js'][662]++;
  var _i, _len, _results;
  _$jscoverage['query.js'][663]++;
  _results = [];
  _$jscoverage['query.js'][664]++;
  for (((_i = 0), (_len = orig.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][665]++;
    c = orig[_i];
    _$jscoverage['query.js'][666]++;
    if ((! iscon(c))) {
      _$jscoverage['query.js'][667]++;
      _results.push(c);
    }
}
  _$jscoverage['query.js'][670]++;
  return _results;
})();
  _$jscoverage['query.js'][672]++;
  if ((reduced.length !== (orig.length - 1))) {
    _$jscoverage['query.js'][673]++;
    throw new Error(didntRemove(orig, reduced));
  }
  _$jscoverage['query.js'][675]++;
  this.constraints = reduced;
  _$jscoverage['query.js'][676]++;
  if ((! silent)) {
    _$jscoverage['query.js'][677]++;
    this.trigger("change:constraints");
    _$jscoverage['query.js'][678]++;
    return this.trigger("removed:constraint", utils.find(orig, iscon));
  }
});
  _$jscoverage['query.js'][682]++;
  Query.prototype.addToSelect = (function (views) {
  _$jscoverage['query.js'][683]++;
  var dups, mapFn, p, toAdd, v, x, _ref;
  _$jscoverage['query.js'][684]++;
  if ((views == null)) {
    _$jscoverage['query.js'][685]++;
    views = [];
  }
  _$jscoverage['query.js'][687]++;
  views = utils.stringList(views);
  _$jscoverage['query.js'][688]++;
  mapFn = utils.compose(this.expandStar, this.adjustPath);
  _$jscoverage['query.js'][689]++;
  toAdd = utils.flatten((function () {
  _$jscoverage['query.js'][690]++;
  var _i, _len, _results;
  _$jscoverage['query.js'][691]++;
  _results = [];
  _$jscoverage['query.js'][692]++;
  for (((_i = 0), (_len = views.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][693]++;
    v = views[_i];
    _$jscoverage['query.js'][694]++;
    _results.push(mapFn(v));
}
  _$jscoverage['query.js'][696]++;
  return _results;
})());
  _$jscoverage['query.js'][698]++;
  dups = (function () {
  _$jscoverage['query.js'][699]++;
  var _i, _len, _results;
  _$jscoverage['query.js'][700]++;
  _results = [];
  _$jscoverage['query.js'][701]++;
  for (((_i = 0), (_len = toAdd.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][702]++;
    p = toAdd[_i];
    _$jscoverage['query.js'][703]++;
    if ((__indexOf.call(this.views, p) >= 0)) {
      _$jscoverage['query.js'][704]++;
      _results.push(p);
    }
}
  _$jscoverage['query.js'][707]++;
  return _results;
}).call(this);
  _$jscoverage['query.js'][709]++;
  if (dups.length) {
    _$jscoverage['query.js'][710]++;
    throw new Error(("" + dups + " already in the select list"));
  }
  _$jscoverage['query.js'][712]++;
  dups = (function () {
  _$jscoverage['query.js'][713]++;
  var _i, _len, _results;
  _$jscoverage['query.js'][714]++;
  _results = [];
  _$jscoverage['query.js'][715]++;
  for (((_i = 0), (_len = toAdd.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][716]++;
    p = toAdd[_i];
    _$jscoverage['query.js'][717]++;
    if (((function () {
  _$jscoverage['query.js'][718]++;
  var _j, _len1, _results1;
  _$jscoverage['query.js'][719]++;
  _results1 = [];
  _$jscoverage['query.js'][720]++;
  for (((_j = 0), (_len1 = toAdd.length)); (_j < _len1); (_j++)) {
    _$jscoverage['query.js'][721]++;
    x = toAdd[_j];
    _$jscoverage['query.js'][722]++;
    if ((x === p)) {
      _$jscoverage['query.js'][723]++;
      _results1.push(x);
    }
}
  _$jscoverage['query.js'][726]++;
  return _results1;
})().length > 1)) {
      _$jscoverage['query.js'][728]++;
      _results.push(p);
    }
}
  _$jscoverage['query.js'][731]++;
  return _results;
})();
  _$jscoverage['query.js'][733]++;
  if (dups.length) {
    _$jscoverage['query.js'][734]++;
    throw new Error(("" + dups + " specified multiple times as arguments to addToSelect"));
  }
  _$jscoverage['query.js'][736]++;
  (_ref = this.views).push.apply(_ref, toAdd);
  _$jscoverage['query.js'][737]++;
  return this.trigger("add:view change:views", toAdd);
});
  _$jscoverage['query.js'][740]++;
  Query.prototype.select = (function (views) {
  _$jscoverage['query.js'][741]++;
  var oldViews;
  _$jscoverage['query.js'][742]++;
  oldViews = this.views.slice();
  _$jscoverage['query.js'][743]++;
  try {
    _$jscoverage['query.js'][744]++;
    this.views = [];
    _$jscoverage['query.js'][745]++;
    this.addToSelect(views);
  }
  catch (e) {
    _$jscoverage['query.js'][747]++;
    this.views = oldViews;
    _$jscoverage['query.js'][748]++;
    utils.error(e);
  }
  _$jscoverage['query.js'][750]++;
  return this;
});
  _$jscoverage['query.js'][753]++;
  Query.prototype.adjustPath = (function (path) {
  _$jscoverage['query.js'][754]++;
  path = ((path && path.name)? path.name: ("" + path));
  _$jscoverage['query.js'][755]++;
  if ((this.root != null)) {
    _$jscoverage['query.js'][756]++;
    if ((! path.match(("^" + this.root)))) {
      _$jscoverage['query.js'][757]++;
      path = (this.root + "." + path);
    }
  }
  else {
    _$jscoverage['query.js'][760]++;
    this.root = path.split(".")[0];
  }
  _$jscoverage['query.js'][762]++;
  return path;
});
  _$jscoverage['query.js'][765]++;
  Query.prototype.getPossiblePaths = (function (depth) {
  _$jscoverage['query.js'][766]++;
  var getPaths, _base, _ref, _ref1, _this = this;
  _$jscoverage['query.js'][768]++;
  if ((depth == null)) {
    _$jscoverage['query.js'][769]++;
    depth = 3;
  }
  _$jscoverage['query.js'][771]++;
  getPaths = (function (root, d) {
  _$jscoverage['query.js'][772]++;
  var cd, field, name, others, path, ret, subPaths;
  _$jscoverage['query.js'][773]++;
  ret = [root];
  _$jscoverage['query.js'][774]++;
  path = _this.getPathInfo(root);
  _$jscoverage['query.js'][775]++;
  if (path.isAttribute()) {
    _$jscoverage['query.js'][776]++;
    return ret;
  }
  else {
    _$jscoverage['query.js'][778]++;
    cd = _this.getPathInfo(root).getType();
    _$jscoverage['query.js'][779]++;
    subPaths = concatMap((function (ref) {
  _$jscoverage['query.js'][780]++;
  return getPaths(("" + root + "." + ref.name), (d - 1));
}));
    _$jscoverage['query.js'][782]++;
    others = ((cd && (d > 0))? subPaths((function () {
  _$jscoverage['query.js'][783]++;
  var _ref, _results;
  _$jscoverage['query.js'][784]++;
  _ref = cd.fields;
  _$jscoverage['query.js'][785]++;
  _results = [];
  _$jscoverage['query.js'][786]++;
  for (name in _ref) {
    _$jscoverage['query.js'][787]++;
    field = _ref[name];
    _$jscoverage['query.js'][788]++;
    _results.push(field);
}
  _$jscoverage['query.js'][790]++;
  return _results;
})()): []);
    _$jscoverage['query.js'][792]++;
    return ret.concat(others);
  }
});
  _$jscoverage['query.js'][795]++;
  if (((_ref = this._possiblePaths) == null)) {
    _$jscoverage['query.js'][796]++;
    this._possiblePaths = {};
  }
  _$jscoverage['query.js'][798]++;
  return (((_ref1 = (_base = this._possiblePaths)[depth]) != null)? _ref1: (_base[depth] = getPaths(this.root, depth)));
});
  _$jscoverage['query.js'][801]++;
  Query.prototype.getPathInfo = (function (path) {
  _$jscoverage['query.js'][802]++;
  var adjusted, pi, _ref;
  _$jscoverage['query.js'][803]++;
  adjusted = this.adjustPath(path);
  _$jscoverage['query.js'][804]++;
  pi = (((_ref = this.model) != null)? (((typeof _ref.getPathInfo) === "function")? _ref.getPathInfo(adjusted, this.getSubclasses()): (void 0)): (void 0));
  _$jscoverage['query.js'][805]++;
  if ((pi && (adjusted in this.displayNames))) {
    _$jscoverage['query.js'][806]++;
    pi.displayName = this.displayNames[adjusted];
  }
  _$jscoverage['query.js'][808]++;
  return pi;
});
  _$jscoverage['query.js'][811]++;
  Query.prototype.makePath = Query.prototype.getPathInfo;
  _$jscoverage['query.js'][813]++;
  toPathAndType = (function (c) {
  _$jscoverage['query.js'][814]++;
  return [c.path, c.type];
});
  _$jscoverage['query.js'][817]++;
  scFold = utils.compose(pairsToObj, utils.map(toPathAndType), filter(get("type")));
  _$jscoverage['query.js'][819]++;
  Query.prototype.getSubclasses = (function () {
  _$jscoverage['query.js'][820]++;
  return scFold(this.constraints);
});
  _$jscoverage['query.js'][823]++;
  Query.prototype.getType = (function (path) {
  _$jscoverage['query.js'][824]++;
  return this.getPathInfo(path).getType();
});
  _$jscoverage['query.js'][827]++;
  Query.prototype.getViewNodes = (function () {
  _$jscoverage['query.js'][828]++;
  var p, toParentNode, _this = this;
  _$jscoverage['query.js'][830]++;
  toParentNode = (function (v) {
  _$jscoverage['query.js'][831]++;
  return _this.getPathInfo(v).getParent();
});
  _$jscoverage['query.js'][833]++;
  return utils.uniqBy(String, (function () {
  _$jscoverage['query.js'][834]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][835]++;
  _ref = this.views;
  _$jscoverage['query.js'][836]++;
  _results = [];
  _$jscoverage['query.js'][837]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][838]++;
    p = _ref[_i];
    _$jscoverage['query.js'][839]++;
    _results.push(toParentNode(p));
}
  _$jscoverage['query.js'][841]++;
  return _results;
}).call(this));
});
  _$jscoverage['query.js'][845]++;
  Query.prototype.isInView = (function (path) {
  _$jscoverage['query.js'][846]++;
  var pi, pstr, _ref;
  _$jscoverage['query.js'][847]++;
  pi = this.getPathInfo(path);
  _$jscoverage['query.js'][848]++;
  if ((! pi)) {
    _$jscoverage['query.js'][849]++;
    throw new Error(("Invalid path: " + path));
  }
  _$jscoverage['query.js'][851]++;
  if (pi.isAttribute()) {
    _$jscoverage['query.js'][852]++;
    return ((_ref = pi.toString()), (__indexOf.call(this.views, _ref) >= 0));
  }
  else {
    _$jscoverage['query.js'][854]++;
    pstr = pi.toString();
    _$jscoverage['query.js'][855]++;
    return utils.any(this.getViewNodes(), (function (n) {
  _$jscoverage['query.js'][856]++;
  return (n.toString() === pstr);
}));
  }
});
  _$jscoverage['query.js'][861]++;
  Query.prototype.isConstrained = (function (path, includeAttrs) {
  _$jscoverage['query.js'][862]++;
  var pi, test, _this = this;
  _$jscoverage['query.js'][864]++;
  if ((includeAttrs == null)) {
    _$jscoverage['query.js'][865]++;
    includeAttrs = false;
  }
  _$jscoverage['query.js'][867]++;
  pi = this.getPathInfo(path);
  _$jscoverage['query.js'][868]++;
  if ((! pi)) {
    _$jscoverage['query.js'][869]++;
    throw new Error(("Invalid path: " + path));
  }
  _$jscoverage['query.js'][871]++;
  test = (function (c) {
  _$jscoverage['query.js'][872]++;
  return ((c.op != null) && (c.path === pi.toString()));
});
  _$jscoverage['query.js'][874]++;
  if (((! pi.isAttribute()) && includeAttrs)) {
    _$jscoverage['query.js'][875]++;
    test = (function (c) {
  _$jscoverage['query.js'][876]++;
  return ((c.op != null) && ((c.path === pi.toString()) || pi.equals(_this.getPathInfo(c.path).getParent())));
});
  }
  _$jscoverage['query.js'][879]++;
  return utils.any(this.constraints, test);
});
  _$jscoverage['query.js'][882]++;
  Query.prototype.canHaveMultipleValues = (function (path) {
  _$jscoverage['query.js'][883]++;
  return this.getPathInfo(path).containsCollection();
});
  _$jscoverage['query.js'][886]++;
  Query.prototype.getQueryNodes = (function () {
  _$jscoverage['query.js'][887]++;
  var c, constrainedNodes, pi, viewNodes;
  _$jscoverage['query.js'][888]++;
  viewNodes = this.getViewNodes();
  _$jscoverage['query.js'][889]++;
  constrainedNodes = (function () {
  _$jscoverage['query.js'][890]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][891]++;
  _ref = this.constraints;
  _$jscoverage['query.js'][892]++;
  _results = [];
  _$jscoverage['query.js'][893]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][894]++;
    c = _ref[_i];
    _$jscoverage['query.js'][895]++;
    if ((! (! (c.type != null)))) {
      _$jscoverage['query.js'][896]++;
      continue;
    }
    _$jscoverage['query.js'][898]++;
    pi = this.getPathInfo(c.path);
    _$jscoverage['query.js'][899]++;
    if (pi.isAttribute()) {
      _$jscoverage['query.js'][900]++;
      _results.push(pi.getParent());
    }
    else {
      _$jscoverage['query.js'][902]++;
      _results.push(pi);
    }
}
  _$jscoverage['query.js'][905]++;
  return _results;
}).call(this);
  _$jscoverage['query.js'][907]++;
  return utils.uniqBy(String, viewNodes.concat(constrainedNodes));
});
  _$jscoverage['query.js'][910]++;
  Query.prototype.isInQuery = (function (p) {
  _$jscoverage['query.js'][911]++;
  var c, pi, pstr, _i, _len, _ref;
  _$jscoverage['query.js'][912]++;
  pi = this.getPathInfo(p);
  _$jscoverage['query.js'][913]++;
  if (pi) {
    _$jscoverage['query.js'][914]++;
    pstr = pi.toPathString();
    _$jscoverage['query.js'][915]++;
    _ref = this.views.concat((function () {
  _$jscoverage['query.js'][916]++;
  var _j, _len, _ref, _results;
  _$jscoverage['query.js'][917]++;
  _ref = this.constraints;
  _$jscoverage['query.js'][918]++;
  _results = [];
  _$jscoverage['query.js'][919]++;
  for (((_j = 0), (_len = _ref.length)); (_j < _len); (_j++)) {
    _$jscoverage['query.js'][920]++;
    c = _ref[_j];
    _$jscoverage['query.js'][921]++;
    if ((! (c.type != null))) {
      _$jscoverage['query.js'][922]++;
      _results.push(c.path);
    }
}
  _$jscoverage['query.js'][925]++;
  return _results;
}).call(this));
    _$jscoverage['query.js'][927]++;
    for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
      _$jscoverage['query.js'][928]++;
      p = _ref[_i];
      _$jscoverage['query.js'][929]++;
      if ((0 === p.indexOf(pstr))) {
        _$jscoverage['query.js'][930]++;
        return true;
      }
}
    _$jscoverage['query.js'][933]++;
    return false;
  }
  _$jscoverage['query.js'][935]++;
  return true;
});
  _$jscoverage['query.js'][938]++;
  Query.prototype.isRelevant = (function (path) {
  _$jscoverage['query.js'][939]++;
  var nodes, pi, sought;
  _$jscoverage['query.js'][940]++;
  pi = this.getPathInfo(path);
  _$jscoverage['query.js'][941]++;
  if (pi.isAttribute()) {
    _$jscoverage['query.js'][942]++;
    pi = pi.getParent();
  }
  _$jscoverage['query.js'][944]++;
  sought = pi.toString();
  _$jscoverage['query.js'][945]++;
  nodes = this.getViewNodes();
  _$jscoverage['query.js'][946]++;
  return utils.any(nodes, (function (n) {
  _$jscoverage['query.js'][947]++;
  return (n.toPathString() === sought);
}));
});
  _$jscoverage['query.js'][951]++;
  Query.prototype.expandStar = (function (path) {
  _$jscoverage['query.js'][952]++;
  var attrViews, cd, expand, fn, n, name, pathStem, starViews;
  _$jscoverage['query.js'][953]++;
  if (/\*$/.test(path)) {
    _$jscoverage['query.js'][954]++;
    pathStem = path.substr(0, path.lastIndexOf("."));
    _$jscoverage['query.js'][955]++;
    expand = (function (x) {
  _$jscoverage['query.js'][956]++;
  return (pathStem + x);
});
    _$jscoverage['query.js'][958]++;
    cd = this.getType(pathStem);
    _$jscoverage['query.js'][959]++;
    if (/\.\*$/.test(path)) {
      _$jscoverage['query.js'][960]++;
      if ((cd && this.summaryFields[cd.name])) {
        _$jscoverage['query.js'][961]++;
        fn = utils.compose(expand, decapitate);
        _$jscoverage['query.js'][962]++;
        return (function () {
  _$jscoverage['query.js'][963]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][964]++;
  _ref = this.summaryFields[cd.name];
  _$jscoverage['query.js'][965]++;
  _results = [];
  _$jscoverage['query.js'][966]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][967]++;
    n = _ref[_i];
    _$jscoverage['query.js'][968]++;
    if ((! this.hasView(n))) {
      _$jscoverage['query.js'][969]++;
      _results.push(fn(n));
    }
}
  _$jscoverage['query.js'][972]++;
  return _results;
}).call(this);
      }
    }
    else {
      _$jscoverage['query.js'][975]++;
      if (/\.\*\*$/.test(path)) {
        _$jscoverage['query.js'][976]++;
        starViews = this.expandStar((pathStem + ".*"));
        _$jscoverage['query.js'][977]++;
        attrViews = (function () {
  _$jscoverage['query.js'][978]++;
  var _results;
  _$jscoverage['query.js'][979]++;
  _results = [];
  _$jscoverage['query.js'][980]++;
  for (name in cd.attributes) {
    _$jscoverage['query.js'][981]++;
    _results.push(expand(("." + name)));
}
  _$jscoverage['query.js'][983]++;
  return _results;
})();
        _$jscoverage['query.js'][985]++;
        return utils.uniqBy(id, starViews.concat(attrViews));
      }
    }
  }
  _$jscoverage['query.js'][988]++;
  return path;
});
  _$jscoverage['query.js'][991]++;
  Query.prototype.isOuterJoin = (function (p) {
  _$jscoverage['query.js'][992]++;
  return (this.joins[this.adjustPath(p)] === "OUTER");
});
  _$jscoverage['query.js'][995]++;
  Query.prototype.hasView = (function (v) {
  _$jscoverage['query.js'][996]++;
  var _ref;
  _$jscoverage['query.js'][997]++;
  return (this.views && ((_ref = this.adjustPath(v)), (__indexOf.call(this.views, _ref) >= 0)));
});
  _$jscoverage['query.js'][1000]++;
  Query.prototype.count = (function (cont) {
  _$jscoverage['query.js'][1001]++;
  if (this.service.count) {
    _$jscoverage['query.js'][1002]++;
    return this.service.count(this, cont);
  }
  else {
    _$jscoverage['query.js'][1004]++;
    throw new Error("This query has no service with count functionality attached.");
  }
});
  _$jscoverage['query.js'][1008]++;
  Query.prototype.appendToList = (function (target, cb) {
  _$jscoverage['query.js'][1009]++;
  var name, processor, req, toRun, updateTarget;
  _$jscoverage['query.js'][1010]++;
  if (((target != null)? target.name: (void 0))) {
    _$jscoverage['query.js'][1011]++;
    name = target.name;
    _$jscoverage['query.js'][1012]++;
    updateTarget = (function (err, list) {
  _$jscoverage['query.js'][1013]++;
  if ((err == null)) {
    _$jscoverage['query.js'][1014]++;
    return (target.size = list.size);
  }
});
  }
  else {
    _$jscoverage['query.js'][1018]++;
    name = String(target);
    _$jscoverage['query.js'][1019]++;
    updateTarget = null;
  }
  _$jscoverage['query.js'][1021]++;
  toRun = this.makeListQuery();
  _$jscoverage['query.js'][1022]++;
  req = {listName: name, query: toRun.toXML()};
  _$jscoverage['query.js'][1026]++;
  processor = LIST_PIPE(this.service);
  _$jscoverage['query.js'][1027]++;
  return withCB(updateTarget, cb, this.service.post("query/append/tolist", req).then(processor));
});
  _$jscoverage['query.js'][1030]++;
  Query.prototype.makeListQuery = (function () {
  _$jscoverage['query.js'][1031]++;
  var n, toRun, _i, _len, _ref;
  _$jscoverage['query.js'][1032]++;
  toRun = this.clone();
  _$jscoverage['query.js'][1033]++;
  if (((toRun.views.length !== 1) || (toRun.views[0] === null) || (! toRun.views[0].match(/\.id$/)))) {
    _$jscoverage['query.js'][1034]++;
    toRun.select(["id"]);
  }
  _$jscoverage['query.js'][1036]++;
  _ref = this.getViewNodes();
  _$jscoverage['query.js'][1037]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1038]++;
    n = _ref[_i];
    _$jscoverage['query.js'][1039]++;
    if ((! this.isOuterJoined(n))) {
      _$jscoverage['query.js'][1040]++;
      if (((! toRun.isInView((n || toRun.isConstrained(n)))) && (n.getEndClass().fields.id != null))) {
        _$jscoverage['query.js'][1041]++;
        toRun.addConstraint([n.append("id"), "IS NOT NULL"]);
      }
    }
}
  _$jscoverage['query.js'][1045]++;
  return toRun;
});
  _$jscoverage['query.js'][1048]++;
  Query.prototype.saveAsList = (function (options, cb) {
  _$jscoverage['query.js'][1049]++;
  var req, toRun;
  _$jscoverage['query.js'][1050]++;
  toRun = this.makeListQuery();
  _$jscoverage['query.js'][1051]++;
  req = utils.copy(options);
  _$jscoverage['query.js'][1052]++;
  req.listName = (req.listName || req.name);
  _$jscoverage['query.js'][1053]++;
  req.query = toRun.toXML();
  _$jscoverage['query.js'][1054]++;
  if (options.tags) {
    _$jscoverage['query.js'][1055]++;
    req.tags = options.tags.join(";");
  }
  _$jscoverage['query.js'][1057]++;
  return withCB(cb, this.service.post("query/tolist", req).then(LIST_PIPE(this.service)));
});
  _$jscoverage['query.js'][1060]++;
  Query.prototype.summarise = (function (path, limit, cont) {
  _$jscoverage['query.js'][1061]++;
  return this.filterSummary(path, "", limit, cont);
});
  _$jscoverage['query.js'][1064]++;
  Query.prototype.summarize = (function () {
  _$jscoverage['query.js'][1065]++;
  var args;
  _$jscoverage['query.js'][1066]++;
  args = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['query.js'][1067]++;
  return this.summarise.apply(this, args);
});
  _$jscoverage['query.js'][1070]++;
  parseSummary = (function (data) {
  _$jscoverage['query.js'][1071]++;
  var isNumeric, r, stats, _i, _len, _ref, _ref1;
  _$jscoverage['query.js'][1072]++;
  isNumeric = ((((_ref = data.results[0]) != null)? _ref.max: (void 0)) != null);
  _$jscoverage['query.js'][1073]++;
  _ref1 = data.results;
  _$jscoverage['query.js'][1074]++;
  for (((_i = 0), (_len = _ref1.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1075]++;
    r = _ref1[_i];
    _$jscoverage['query.js'][1076]++;
    r.count = parseInt(r.count, 10);
}
  _$jscoverage['query.js'][1078]++;
  stats = {uniqueValues: data.uniqueValues, filteredCount: data.filteredCount};
  _$jscoverage['query.js'][1082]++;
  if (isNumeric) {
    _$jscoverage['query.js'][1083]++;
    stats = merge(stats, data.results[0]);
  }
  _$jscoverage['query.js'][1085]++;
  data.stats = stats;
  _$jscoverage['query.js'][1086]++;
  return data;
});
  _$jscoverage['query.js'][1089]++;
  Query.prototype.filterSummary = (function (path, term, limit, cont) {
  _$jscoverage['query.js'][1090]++;
  var req, toRun, _ref;
  _$jscoverage['query.js'][1091]++;
  if ((cont == null)) {
    _$jscoverage['query.js'][1092]++;
    cont = (function () {
});
  }
  _$jscoverage['query.js'][1094]++;
  if (utils.isFunction(limit)) {
    _$jscoverage['query.js'][1095]++;
    ((_ref = [limit, null]), (cont = _ref[0]), (limit = _ref[1]));
  }
  _$jscoverage['query.js'][1097]++;
  path = this.adjustPath(path);
  _$jscoverage['query.js'][1098]++;
  toRun = this.clone();
  _$jscoverage['query.js'][1099]++;
  if ((__indexOf.call(toRun.views, path) < 0)) {
    _$jscoverage['query.js'][1100]++;
    toRun.views.push(path);
  }
  _$jscoverage['query.js'][1102]++;
  req = {query: toRun.toXML(), summaryPath: path, format: "jsonrows"};
  _$jscoverage['query.js'][1107]++;
  if (limit) {
    _$jscoverage['query.js'][1108]++;
    req.size = limit;
  }
  _$jscoverage['query.js'][1110]++;
  if (term) {
    _$jscoverage['query.js'][1111]++;
    req.filterTerm = term;
  }
  _$jscoverage['query.js'][1113]++;
  return withCB(cont, this.service.post("query/results", req).then(parseSummary));
});
  _$jscoverage['query.js'][1116]++;
  Query.prototype.clone = (function (cloneEvents) {
  _$jscoverage['query.js'][1117]++;
  var cloned, k, v, _ref, _ref1;
  _$jscoverage['query.js'][1118]++;
  cloned = new Query(this, this.service);
  _$jscoverage['query.js'][1119]++;
  if (((_ref = cloned._callbacks) == null)) {
    _$jscoverage['query.js'][1120]++;
    cloned._callbacks = {};
  }
  _$jscoverage['query.js'][1122]++;
  if (cloneEvents) {
    _$jscoverage['query.js'][1123]++;
    _ref1 = this._callbacks;
    _$jscoverage['query.js'][1124]++;
    for (k in _ref1) {
      _$jscoverage['query.js'][1125]++;
      if ((! __hasProp.call(_ref1, k))) {
        _$jscoverage['query.js'][1125]++;
        continue;
      }
      _$jscoverage['query.js'][1126]++;
      v = _ref1[k];
      _$jscoverage['query.js'][1127]++;
      cloned._callbacks[k] = v;
}
    _$jscoverage['query.js'][1129]++;
    cloned.off("change:views", removeIrrelevantSortOrders, this);
  }
  _$jscoverage['query.js'][1131]++;
  return cloned;
});
  _$jscoverage['query.js'][1134]++;
  Query.prototype.next = (function () {
  _$jscoverage['query.js'][1135]++;
  var clone;
  _$jscoverage['query.js'][1136]++;
  clone = this.clone();
  _$jscoverage['query.js'][1137]++;
  if (this.maxRows) {
    _$jscoverage['query.js'][1138]++;
    clone.start = (this.start + this.maxRows);
  }
  _$jscoverage['query.js'][1140]++;
  return clone;
});
  _$jscoverage['query.js'][1143]++;
  Query.prototype.previous = (function () {
  _$jscoverage['query.js'][1144]++;
  var clone;
  _$jscoverage['query.js'][1145]++;
  clone = this.clone();
  _$jscoverage['query.js'][1146]++;
  if (this.maxRows) {
    _$jscoverage['query.js'][1147]++;
    clone.start = (this.start - this.maxRows);
  }
  else {
    _$jscoverage['query.js'][1149]++;
    clone.start = 0;
  }
  _$jscoverage['query.js'][1151]++;
  return clone;
});
  _$jscoverage['query.js'][1154]++;
  Query.prototype.getSortDirection = (function (path) {
  _$jscoverage['query.js'][1155]++;
  var dir, so, _i, _len, _ref;
  _$jscoverage['query.js'][1156]++;
  path = this.adjustPath(path);
  _$jscoverage['query.js'][1157]++;
  _ref = this.sortOrder;
  _$jscoverage['query.js'][1158]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1159]++;
    so = _ref[_i];
    _$jscoverage['query.js'][1160]++;
    if ((so.path === path)) {
      _$jscoverage['query.js'][1161]++;
      dir = so.direction;
    }
}
  _$jscoverage['query.js'][1164]++;
  return dir;
});
  _$jscoverage['query.js'][1167]++;
  Query.prototype.isOuterJoined = (function (path) {
  _$jscoverage['query.js'][1168]++;
  var dir, jp, _ref;
  _$jscoverage['query.js'][1169]++;
  path = this.adjustPath(path);
  _$jscoverage['query.js'][1170]++;
  _ref = this.joins;
  _$jscoverage['query.js'][1171]++;
  for (jp in _ref) {
    _$jscoverage['query.js'][1172]++;
    dir = _ref[jp];
    _$jscoverage['query.js'][1173]++;
    if (((dir === "OUTER") && (path.indexOf(jp) === 0))) {
      _$jscoverage['query.js'][1174]++;
      return true;
    }
}
  _$jscoverage['query.js'][1177]++;
  return false;
});
  _$jscoverage['query.js'][1180]++;
  Query.prototype.getOuterJoin = (function (path) {
  _$jscoverage['query.js'][1181]++;
  var joinPaths, k, _this = this;
  _$jscoverage['query.js'][1183]++;
  path = this.adjustPath(path);
  _$jscoverage['query.js'][1184]++;
  joinPaths = (function () {
  _$jscoverage['query.js'][1185]++;
  var _results;
  _$jscoverage['query.js'][1186]++;
  _results = [];
  _$jscoverage['query.js'][1187]++;
  for (k in this.joins) {
    _$jscoverage['query.js'][1188]++;
    _results.push(k);
}
  _$jscoverage['query.js'][1190]++;
  return _results;
}).call(this).sort((function (a, b) {
  _$jscoverage['query.js'][1192]++;
  return (b.length - a.length);
}));
  _$jscoverage['query.js'][1194]++;
  return utils.find(joinPaths, (function (p) {
  _$jscoverage['query.js'][1195]++;
  return ((_this.joins[p] === "OUTER") && (path.indexOf(p) === 0));
}));
});
  _$jscoverage['query.js'][1199]++;
  Query.prototype._parse_sort_order = (function (input) {
  _$jscoverage['query.js'][1200]++;
  var direction, k, path, so, v, _ref;
  _$jscoverage['query.js'][1201]++;
  so = input;
  _$jscoverage['query.js'][1202]++;
  if (((typeof input) === "string")) {
    _$jscoverage['query.js'][1203]++;
    so = {path: input, direction: "ASC"};
  }
  else {
    _$jscoverage['query.js'][1207]++;
    if (utils.isArray(input)) {
      _$jscoverage['query.js'][1208]++;
      ((path = input[0]), (direction = input[1]));
      _$jscoverage['query.js'][1209]++;
      so = {path: path, direction: direction};
    }
    else {
      _$jscoverage['query.js'][1213]++;
      if ((! (input.path != null))) {
        _$jscoverage['query.js'][1214]++;
        for (k in input) {
          _$jscoverage['query.js'][1215]++;
          v = input[k];
          _$jscoverage['query.js'][1216]++;
          ((_ref = [k, v]), (path = _ref[0]), (direction = _ref[1]));
}
        _$jscoverage['query.js'][1218]++;
        so = {path: path, direction: direction};
      }
    }
  }
  _$jscoverage['query.js'][1223]++;
  so.path = this.adjustPath(so.path);
  _$jscoverage['query.js'][1224]++;
  so.direction = so.direction.toUpperCase();
  _$jscoverage['query.js'][1225]++;
  return so;
});
  _$jscoverage['query.js'][1228]++;
  Query.prototype.addOrSetSortOrder = (function (so) {
  _$jscoverage['query.js'][1229]++;
  var currentDirection, oe, _i, _len, _ref;
  _$jscoverage['query.js'][1230]++;
  so = this._parse_sort_order(so);
  _$jscoverage['query.js'][1231]++;
  currentDirection = this.getSortDirection(so.path);
  _$jscoverage['query.js'][1232]++;
  if ((! (currentDirection != null))) {
    _$jscoverage['query.js'][1233]++;
    return this.addSortOrder(so);
  }
  else {
    _$jscoverage['query.js'][1234]++;
    if ((currentDirection !== so.direction)) {
      _$jscoverage['query.js'][1235]++;
      _ref = this.sortOrder;
      _$jscoverage['query.js'][1236]++;
      for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
        _$jscoverage['query.js'][1237]++;
        oe = _ref[_i];
        _$jscoverage['query.js'][1238]++;
        if ((oe.path === so.path)) {
          _$jscoverage['query.js'][1239]++;
          oe.direction = so.direction;
        }
}
      _$jscoverage['query.js'][1242]++;
      return this.trigger("change:sortorder", this.sortOrder);
    }
  }
});
  _$jscoverage['query.js'][1246]++;
  Query.prototype.addSortOrder = (function (so) {
  _$jscoverage['query.js'][1247]++;
  this.sortOrder.push(this._parse_sort_order(so));
  _$jscoverage['query.js'][1248]++;
  this.trigger("add:sortorder", so);
  _$jscoverage['query.js'][1249]++;
  return this.trigger("change:sortorder", this.sortOrder);
});
  _$jscoverage['query.js'][1252]++;
  Query.prototype.orderBy = (function (oes) {
  _$jscoverage['query.js'][1253]++;
  var oe, _i, _len;
  _$jscoverage['query.js'][1254]++;
  this.sortOrder = [];
  _$jscoverage['query.js'][1255]++;
  for (((_i = 0), (_len = oes.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1256]++;
    oe = oes[_i];
    _$jscoverage['query.js'][1257]++;
    this.addSortOrder(this._parse_sort_order(oe));
}
  _$jscoverage['query.js'][1259]++;
  return this.trigger("set:sortorder change:sortorder", this.sortOrder);
});
  _$jscoverage['query.js'][1262]++;
  Query.prototype.addJoins = (function (joins) {
  _$jscoverage['query.js'][1263]++;
  var j, k, v, _i, _len, _results, _results1;
  _$jscoverage['query.js'][1264]++;
  if (utils.isArray(joins)) {
    _$jscoverage['query.js'][1265]++;
    _results = [];
    _$jscoverage['query.js'][1266]++;
    for (((_i = 0), (_len = joins.length)); (_i < _len); (_i++)) {
      _$jscoverage['query.js'][1267]++;
      j = joins[_i];
      _$jscoverage['query.js'][1268]++;
      _results.push(this.addJoin(j));
}
    _$jscoverage['query.js'][1270]++;
    return _results;
  }
  else {
    _$jscoverage['query.js'][1272]++;
    _results1 = [];
    _$jscoverage['query.js'][1273]++;
    for (k in joins) {
      _$jscoverage['query.js'][1274]++;
      v = joins[k];
      _$jscoverage['query.js'][1275]++;
      _results1.push(this.addJoin({path: k, style: v}));
}
    _$jscoverage['query.js'][1280]++;
    return _results1;
  }
});
  _$jscoverage['query.js'][1284]++;
  Query.prototype.addJoin = (function (join) {
  _$jscoverage['query.js'][1285]++;
  var _ref, _ref1, _ref2;
  _$jscoverage['query.js'][1286]++;
  if (((typeof join) === "string")) {
    _$jscoverage['query.js'][1287]++;
    join = {path: join, style: "OUTER"};
  }
  _$jscoverage['query.js'][1292]++;
  join.path = this.adjustPath(join.path);
  _$jscoverage['query.js'][1293]++;
  join.style = (((_ref = (((_ref1 = join.style) != null)? _ref1.toUpperCase(): (void 0))) != null)? _ref: join.style);
  _$jscoverage['query.js'][1294]++;
  if (((_ref2 = join.style), (__indexOf.call(Query.JOIN_STYLES, _ref2) < 0))) {
    _$jscoverage['query.js'][1295]++;
    throw new Error(("Invalid join style: " + join.style));
  }
  _$jscoverage['query.js'][1297]++;
  this.joins[join.path] = join.style;
  _$jscoverage['query.js'][1298]++;
  return this.trigger("set:join", join.path, join.style);
});
  _$jscoverage['query.js'][1301]++;
  Query.prototype.setJoinStyle = (function (path, style) {
  _$jscoverage['query.js'][1302]++;
  if ((style == null)) {
    _$jscoverage['query.js'][1303]++;
    style = "OUTER";
  }
  _$jscoverage['query.js'][1305]++;
  path = this.adjustPath(path);
  _$jscoverage['query.js'][1306]++;
  style = style.toUpperCase();
  _$jscoverage['query.js'][1307]++;
  if ((this.joins[path] !== style)) {
    _$jscoverage['query.js'][1308]++;
    this.joins[path] = style;
    _$jscoverage['query.js'][1309]++;
    this.trigger("change:joins", {path: path, style: style});
  }
  _$jscoverage['query.js'][1314]++;
  return this;
});
  _$jscoverage['query.js'][1317]++;
  Query.prototype.addConstraints = (function (constraints) {
  _$jscoverage['query.js'][1318]++;
  var c, con, path, _fn, _i, _len, _this = this;
  _$jscoverage['query.js'][1320]++;
  this.__silent__ = true;
  _$jscoverage['query.js'][1321]++;
  if (utils.isArray(constraints)) {
    _$jscoverage['query.js'][1322]++;
    for (((_i = 0), (_len = constraints.length)); (_i < _len); (_i++)) {
      _$jscoverage['query.js'][1323]++;
      c = constraints[_i];
      _$jscoverage['query.js'][1324]++;
      this.addConstraint(c);
}
  }
  else {
    _$jscoverage['query.js'][1327]++;
    _fn = (function (path, con) {
  _$jscoverage['query.js'][1328]++;
  return _this.addConstraint(interpretConstraint(path, con));
});
    _$jscoverage['query.js'][1330]++;
    for (path in constraints) {
      _$jscoverage['query.js'][1331]++;
      con = constraints[path];
      _$jscoverage['query.js'][1332]++;
      _fn(path, con);
}
  }
  _$jscoverage['query.js'][1335]++;
  this.__silent__ = false;
  _$jscoverage['query.js'][1336]++;
  this.trigger("add:constraint");
  _$jscoverage['query.js'][1337]++;
  return this.trigger("change:constraints");
});
  _$jscoverage['query.js'][1340]++;
  Query.prototype.addConstraint = (function (constraint) {
  _$jscoverage['query.js'][1341]++;
  if (utils.isArray(constraint)) {
    _$jscoverage['query.js'][1342]++;
    constraint = interpretConArray(constraint);
  }
  else {
    _$jscoverage['query.js'][1344]++;
    constraint = copyCon(constraint);
  }
  _$jscoverage['query.js'][1346]++;
  constraint.path = this.adjustPath(constraint.path);
  _$jscoverage['query.js'][1347]++;
  if ((constraint.type == null)) {
    _$jscoverage['query.js'][1348]++;
    try {
      _$jscoverage['query.js'][1349]++;
      constraint.op = get_canonical_op(constraint.op);
    }
    catch (error) {
      _$jscoverage['query.js'][1351]++;
      throw new Error(("Illegal operator: " + constraint.op));
    }
  }
  _$jscoverage['query.js'][1354]++;
  this.constraints.push(constraint);
  _$jscoverage['query.js'][1355]++;
  if (((this.constraintLogic != null) && (this.constraintLogic !== ""))) {
    _$jscoverage['query.js'][1356]++;
    this.constraintLogic = ("(" + this.constraintLogic + ") and " + CODES[this.constraints.length]);
  }
  _$jscoverage['query.js'][1358]++;
  if ((! this.__silent__)) {
    _$jscoverage['query.js'][1359]++;
    this.trigger("add:constraint", constraint);
    _$jscoverage['query.js'][1360]++;
    this.trigger("change:constraints");
  }
  _$jscoverage['query.js'][1362]++;
  return this;
});
  _$jscoverage['query.js'][1365]++;
  Query.prototype.getSorting = (function () {
  _$jscoverage['query.js'][1366]++;
  var oe;
  _$jscoverage['query.js'][1367]++;
  return (function () {
  _$jscoverage['query.js'][1368]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][1369]++;
  _ref = this.sortOrder;
  _$jscoverage['query.js'][1370]++;
  _results = [];
  _$jscoverage['query.js'][1371]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1372]++;
    oe = _ref[_i];
    _$jscoverage['query.js'][1373]++;
    _results.push(("" + oe.path + " " + oe.direction));
}
  _$jscoverage['query.js'][1375]++;
  return _results;
}).call(this).join(" ");
});
  _$jscoverage['query.js'][1379]++;
  Query.prototype.getConstraintXML = (function () {
  _$jscoverage['query.js'][1380]++;
  var c, toSerialise;
  _$jscoverage['query.js'][1381]++;
  toSerialise = (function () {
  _$jscoverage['query.js'][1382]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][1383]++;
  _ref = this.constraints;
  _$jscoverage['query.js'][1384]++;
  _results = [];
  _$jscoverage['query.js'][1385]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1386]++;
    c = _ref[_i];
    _$jscoverage['query.js'][1387]++;
    if (((! (c.type != null)) || this.isInQuery(c.path))) {
      _$jscoverage['query.js'][1388]++;
      _results.push(c);
    }
}
  _$jscoverage['query.js'][1391]++;
  return _results;
}).call(this);
  _$jscoverage['query.js'][1393]++;
  if (toSerialise.length) {
    _$jscoverage['query.js'][1394]++;
    return (concatMap(conStr))((concatMap(id))((partition((function (c) {
  _$jscoverage['query.js'][1395]++;
  return (c.type != null);
})))(toSerialise)));
  }
  else {
    _$jscoverage['query.js'][1398]++;
    return "";
  }
});
  _$jscoverage['query.js'][1402]++;
  Query.prototype.getJoinXML = (function () {
  _$jscoverage['query.js'][1403]++;
  var p, s, strs;
  _$jscoverage['query.js'][1404]++;
  strs = (function () {
  _$jscoverage['query.js'][1405]++;
  var _ref, _results;
  _$jscoverage['query.js'][1406]++;
  _ref = this.joins;
  _$jscoverage['query.js'][1407]++;
  _results = [];
  _$jscoverage['query.js'][1408]++;
  for (p in _ref) {
    _$jscoverage['query.js'][1409]++;
    s = _ref[p];
    _$jscoverage['query.js'][1410]++;
    if ((this.isInQuery(p) && (s === "OUTER"))) {
      _$jscoverage['query.js'][1411]++;
      _results.push(("<join path=\"" + p + "\" style=\"OUTER\"/>"));
    }
}
  _$jscoverage['query.js'][1414]++;
  return _results;
}).call(this);
  _$jscoverage['query.js'][1416]++;
  return strs.join("");
});
  _$jscoverage['query.js'][1419]++;
  Query.prototype.toXML = (function () {
  _$jscoverage['query.js'][1420]++;
  var attrs, headAttrs, k, v;
  _$jscoverage['query.js'][1421]++;
  attrs = {model: this.model.name, view: this.views.join(" "), sortOrder: this.getSorting(), constraintLogic: this.constraintLogic};
  _$jscoverage['query.js'][1427]++;
  if ((this.name != null)) {
    _$jscoverage['query.js'][1428]++;
    attrs.name = this.name;
  }
  _$jscoverage['query.js'][1430]++;
  headAttrs = (function () {
  _$jscoverage['query.js'][1431]++;
  var _results;
  _$jscoverage['query.js'][1432]++;
  _results = [];
  _$jscoverage['query.js'][1433]++;
  for (k in attrs) {
    _$jscoverage['query.js'][1434]++;
    v = attrs[k];
    _$jscoverage['query.js'][1435]++;
    if (v) {
      _$jscoverage['query.js'][1436]++;
      _results.push((k + "=\"" + v + "\""));
    }
}
  _$jscoverage['query.js'][1439]++;
  return _results;
})().join(" ");
  _$jscoverage['query.js'][1441]++;
  return ("<query " + headAttrs + " >" + this.getJoinXML() + this.getConstraintXML() + "</query>");
});
  _$jscoverage['query.js'][1444]++;
  Query.prototype.toJSON = (function () {
  _$jscoverage['query.js'][1445]++;
  var c, direction, path, style, v;
  _$jscoverage['query.js'][1446]++;
  return noUndefVals({name: this.name, title: this.title, comment: this.comment, description: this.description, constraintLogic: this.constraintLogic, from: this.root, select: (function () {
  _$jscoverage['query.js'][1454]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][1455]++;
  _ref = this.views;
  _$jscoverage['query.js'][1456]++;
  _results = [];
  _$jscoverage['query.js'][1457]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1458]++;
    v = _ref[_i];
    _$jscoverage['query.js'][1459]++;
    _results.push(headLess(v));
}
  _$jscoverage['query.js'][1461]++;
  return _results;
}).call(this), orderBy: (function () {
  _$jscoverage['query.js'][1464]++;
  var _i, _len, _ref, _ref1, _results;
  _$jscoverage['query.js'][1465]++;
  _ref = this.sortOrder;
  _$jscoverage['query.js'][1466]++;
  _results = [];
  _$jscoverage['query.js'][1467]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1468]++;
    ((_ref1 = _ref[_i]), (path = _ref1.path), (direction = _ref1.direction));
    _$jscoverage['query.js'][1469]++;
    _results.push({path: headLess(path), direction: direction});
}
  _$jscoverage['query.js'][1474]++;
  return _results;
}).call(this), joins: (function () {
  _$jscoverage['query.js'][1477]++;
  var _ref, _results;
  _$jscoverage['query.js'][1478]++;
  _ref = this.joins;
  _$jscoverage['query.js'][1479]++;
  _results = [];
  _$jscoverage['query.js'][1480]++;
  for (path in _ref) {
    _$jscoverage['query.js'][1481]++;
    style = _ref[path];
    _$jscoverage['query.js'][1482]++;
    if ((style === "OUTER")) {
      _$jscoverage['query.js'][1483]++;
      _results.push(headLess(path));
    }
}
  _$jscoverage['query.js'][1486]++;
  return _results;
}).call(this), where: (function () {
  _$jscoverage['query.js'][1489]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][1490]++;
  _ref = this.constraints;
  _$jscoverage['query.js'][1491]++;
  _results = [];
  _$jscoverage['query.js'][1492]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1493]++;
    c = _ref[_i];
    _$jscoverage['query.js'][1494]++;
    _results.push(conToJSON(c));
}
  _$jscoverage['query.js'][1496]++;
  return _results;
}).call(this)});
});
  _$jscoverage['query.js'][1501]++;
  Query.prototype.fetchCode = (function (lang, cb) {
  _$jscoverage['query.js'][1502]++;
  var req;
  _$jscoverage['query.js'][1503]++;
  req = {query: this.toXML(), lang: lang};
  _$jscoverage['query.js'][1507]++;
  return withCB(cb, this.service.post("query/code", req).then(this.service.VERIFIER).then(get("code")));
});
  _$jscoverage['query.js'][1510]++;
  Query.prototype.save = (function (name, cb) {
  _$jscoverage['query.js'][1511]++;
  var req, setName, _this = this;
  _$jscoverage['query.js'][1513]++;
  if ((name != null)) {
    _$jscoverage['query.js'][1514]++;
    this.name = name;
  }
  _$jscoverage['query.js'][1516]++;
  req = {data: this.toXML(), contentType: "application/xml; charset=UTF-8", url: (this.service.root + "query"), type: "POST", dataType: "json"};
  _$jscoverage['query.js'][1523]++;
  setName = (function (name) {
  _$jscoverage['query.js'][1524]++;
  return (_this.name = name);
});
  _$jscoverage['query.js'][1526]++;
  return withCB(cb, setName, this.service.doReq(req).then(this.service.VERIFIER).then(get("name")));
});
  _$jscoverage['query.js'][1529]++;
  Query.prototype.getCodeURI = (function (lang) {
  _$jscoverage['query.js'][1530]++;
  var req, _ref;
  _$jscoverage['query.js'][1531]++;
  req = {query: this.toXML(), lang: lang, format: "text"};
  _$jscoverage['query.js'][1536]++;
  if (((((_ref = this.service) != null)? _ref.token: (void 0)) != null)) {
    _$jscoverage['query.js'][1537]++;
    req.token = this.service.token;
  }
  _$jscoverage['query.js'][1539]++;
  return ("" + this.service.root + "query/code?" + toQueryString(req));
});
  _$jscoverage['query.js'][1542]++;
  Query.prototype.getExportURI = (function (format) {
  _$jscoverage['query.js'][1543]++;
  var req, _ref;
  _$jscoverage['query.js'][1544]++;
  if ((format == null)) {
    _$jscoverage['query.js'][1545]++;
    format = "tab";
  }
  _$jscoverage['query.js'][1547]++;
  if ((__indexOf.call(Query.BIO_FORMATS, format) >= 0)) {
    _$jscoverage['query.js'][1548]++;
    return (this[("get" + format.toUpperCase() + "URI")])();
  }
  _$jscoverage['query.js'][1550]++;
  req = {query: this.toXML(), format: format};
  _$jscoverage['query.js'][1554]++;
  if (((((_ref = this.service) != null)? _ref.token: (void 0)) != null)) {
    _$jscoverage['query.js'][1555]++;
    req.token = this.service.token;
  }
  _$jscoverage['query.js'][1557]++;
  return ("" + this.service.root + "query/results?" + toQueryString(req));
});
  _$jscoverage['query.js'][1560]++;
  Query.prototype.fetchQID = (function (cb) {
  _$jscoverage['query.js'][1561]++;
  return withCB(cb, this.service.post("queries", {query: this.toXML()}).then(get("id")));
});
  _$jscoverage['query.js'][1566]++;
  addPI = (function (p) {
  _$jscoverage['query.js'][1567]++;
  return p.append("primaryIdentifier").toString();
});
  _$jscoverage['query.js'][1570]++;
  Query.prototype.__bio_req = (function (types, n) {
  _$jscoverage['query.js'][1571]++;
  var isSuitable, toRun;
  _$jscoverage['query.js'][1572]++;
  toRun = this.makeListQuery();
  _$jscoverage['query.js'][1573]++;
  isSuitable = (function (p) {
  _$jscoverage['query.js'][1574]++;
  return utils.any(types, (function (t) {
  _$jscoverage['query.js'][1575]++;
  return p.isa(t);
}));
});
  _$jscoverage['query.js'][1578]++;
  toRun.views = (take(n))((function () {
  _$jscoverage['query.js'][1579]++;
  var _i, _len, _ref, _results;
  _$jscoverage['query.js'][1580]++;
  _ref = this.getViewNodes();
  _$jscoverage['query.js'][1581]++;
  _results = [];
  _$jscoverage['query.js'][1582]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1583]++;
    n = _ref[_i];
    _$jscoverage['query.js'][1584]++;
    if (isSuitable(n)) {
      _$jscoverage['query.js'][1585]++;
      _results.push(addPI(n));
    }
}
  _$jscoverage['query.js'][1588]++;
  return _results;
}).call(this));
  _$jscoverage['query.js'][1590]++;
  return ({query: toRun.toXML(), format: "text"});
});
  _$jscoverage['query.js'][1596]++;
  Query.prototype._fasta_req = (function () {
  _$jscoverage['query.js'][1597]++;
  return this.__bio_req(["SequenceFeature", "Protein"], 1);
});
  _$jscoverage['query.js'][1600]++;
  Query.prototype._gff3_req = (function () {
  _$jscoverage['query.js'][1601]++;
  return this.__bio_req(["SequenceFeature"]);
});
  _$jscoverage['query.js'][1604]++;
  Query.prototype._bed_req = Query.prototype._gff3_req;
  _$jscoverage['query.js'][1606]++;
  return Query;
})();
  _$jscoverage['query.js'][1610]++;
  union = fold((function (xs, ys) {
  _$jscoverage['query.js'][1611]++;
  return xs.concat(ys);
}));
  _$jscoverage['query.js'][1614]++;
  Query.ATTRIBUTE_OPS = union([Query.ATTRIBUTE_VALUE_OPS, Query.MULTIVALUE_OPS, Query.NULL_OPS]);
  _$jscoverage['query.js'][1616]++;
  Query.REFERENCE_OPS = union([Query.TERNARY_OPS, Query.LOOP_OPS, Query.LIST_OPS]);
  _$jscoverage['query.js'][1618]++;
  _ref = Query.BIO_FORMATS;
  _$jscoverage['query.js'][1619]++;
  _fn = (function (f) {
  _$jscoverage['query.js'][1620]++;
  var getMeth, reqMeth, uriMeth;
  _$jscoverage['query.js'][1621]++;
  reqMeth = ("_" + f + "_req");
  _$jscoverage['query.js'][1622]++;
  getMeth = ("get" + f.toUpperCase());
  _$jscoverage['query.js'][1623]++;
  uriMeth = (getMeth + "URI");
  _$jscoverage['query.js'][1624]++;
  Query.prototype[getMeth] = (function (opts, cb) {
  _$jscoverage['query.js'][1625]++;
  var req, v, _ref1;
  _$jscoverage['query.js'][1626]++;
  if ((opts == null)) {
    _$jscoverage['query.js'][1627]++;
    opts = {};
  }
  _$jscoverage['query.js'][1629]++;
  if ((cb == null)) {
    _$jscoverage['query.js'][1630]++;
    cb = (function () {
});
  }
  _$jscoverage['query.js'][1632]++;
  if (utils.isFunction(opts)) {
    _$jscoverage['query.js'][1633]++;
    ((_ref1 = [{}, opts]), (opts = _ref1[0]), (cb = _ref1[1]));
  }
  _$jscoverage['query.js'][1635]++;
  if ((((opts != null)? opts.view: (void 0)) != null)) {
    _$jscoverage['query.js'][1636]++;
    opts.view = (function () {
  _$jscoverage['query.js'][1637]++;
  var _j, _len1, _ref2, _results;
  _$jscoverage['query.js'][1638]++;
  _ref2 = opts.view;
  _$jscoverage['query.js'][1639]++;
  _results = [];
  _$jscoverage['query.js'][1640]++;
  for (((_j = 0), (_len1 = _ref2.length)); (_j < _len1); (_j++)) {
    _$jscoverage['query.js'][1641]++;
    v = _ref2[_j];
    _$jscoverage['query.js'][1642]++;
    _results.push(this.getPathInfo(v).toString());
}
  _$jscoverage['query.js'][1644]++;
  return _results;
}).call(this);
  }
  _$jscoverage['query.js'][1647]++;
  req = merge((this[reqMeth])(), opts);
  _$jscoverage['query.js'][1648]++;
  return withCB(cb, this.service.post(("query/results/" + f), req));
});
  _$jscoverage['query.js'][1650]++;
  return (Query.prototype[uriMeth] = (function (opts, cb) {
  _$jscoverage['query.js'][1651]++;
  var req, v, _ref1;
  _$jscoverage['query.js'][1652]++;
  if ((opts == null)) {
    _$jscoverage['query.js'][1653]++;
    opts = {};
  }
  _$jscoverage['query.js'][1655]++;
  if (utils.isFunction(opts)) {
    _$jscoverage['query.js'][1656]++;
    ((_ref1 = [{}, opts]), (opts = _ref1[0]), (cb = _ref1[1]));
  }
  _$jscoverage['query.js'][1658]++;
  if ((((opts != null)? opts.view: (void 0)) != null)) {
    _$jscoverage['query.js'][1659]++;
    opts.view = (function () {
  _$jscoverage['query.js'][1660]++;
  var _j, _len1, _ref2, _results;
  _$jscoverage['query.js'][1661]++;
  _ref2 = opts.view;
  _$jscoverage['query.js'][1662]++;
  _results = [];
  _$jscoverage['query.js'][1663]++;
  for (((_j = 0), (_len1 = _ref2.length)); (_j < _len1); (_j++)) {
    _$jscoverage['query.js'][1664]++;
    v = _ref2[_j];
    _$jscoverage['query.js'][1665]++;
    _results.push(this.getPathInfo(v).toString());
}
  _$jscoverage['query.js'][1667]++;
  return _results;
}).call(this);
  }
  _$jscoverage['query.js'][1670]++;
  req = merge((this[reqMeth])(), opts);
  _$jscoverage['query.js'][1671]++;
  if ((this.service.token != null)) {
    _$jscoverage['query.js'][1672]++;
    req.token = this.service.token;
  }
  _$jscoverage['query.js'][1674]++;
  return ("" + this.service.root + "query/results/" + f + "?" + toQueryString(req));
}));
});
  _$jscoverage['query.js'][1677]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['query.js'][1678]++;
    f = _ref[_i];
    _$jscoverage['query.js'][1679]++;
    _fn(f);
}
  _$jscoverage['query.js'][1682]++;
  _get_data_fetcher = (function (server_fn) {
  _$jscoverage['query.js'][1683]++;
  return (function () {
  _$jscoverage['query.js'][1684]++;
  var cbs, page, x, _ref1;
  _$jscoverage['query.js'][1685]++;
  ((page = arguments[0]), (cbs = ((2 <= arguments.length)? __slice.call(arguments, 1): [])));
  _$jscoverage['query.js'][1686]++;
  if (this.service[server_fn]) {
    _$jscoverage['query.js'][1687]++;
    if ((! (page != null))) {
      _$jscoverage['query.js'][1688]++;
      page = {};
    }
    else {
      _$jscoverage['query.js'][1689]++;
      if (utils.isFunction(page)) {
        _$jscoverage['query.js'][1690]++;
        page = {};
        _$jscoverage['query.js'][1691]++;
        cbs = (function () {
  _$jscoverage['query.js'][1692]++;
  var _j, _len1, _results;
  _$jscoverage['query.js'][1693]++;
  _results = [];
  _$jscoverage['query.js'][1694]++;
  for (((_j = 0), (_len1 = arguments.length)); (_j < _len1); (_j++)) {
    _$jscoverage['query.js'][1695]++;
    x = arguments[_j];
    _$jscoverage['query.js'][1696]++;
    _results.push(x);
}
  _$jscoverage['query.js'][1698]++;
  return _results;
}).apply(this, arguments);
      }
    }
    _$jscoverage['query.js'][1701]++;
    page = noUndefVals(merge({start: this.start, size: this.maxRows}, page));
    _$jscoverage['query.js'][1705]++;
    return (_ref1 = this.service)[server_fn].apply(_ref1, [this, page].concat(__slice.call(cbs)));
  }
  else {
    _$jscoverage['query.js'][1707]++;
    throw new Error(("Service does not provide '" + server_fn + "'."));
  }
});
});
  _$jscoverage['query.js'][1712]++;
  for (((_j = 0), (_len1 = RESULTS_METHODS.length)); (_j < _len1); (_j++)) {
    _$jscoverage['query.js'][1713]++;
    mth = RESULTS_METHODS[_j];
    _$jscoverage['query.js'][1714]++;
    Query.prototype[mth] = _get_data_fetcher(mth);
}
  _$jscoverage['query.js'][1717]++;
  intermine.Query = Query;
}).call(this);

},{"./util":11,"./xml":13}],8:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['service.js']) {
  _$jscoverage['service.js'] = [];
  _$jscoverage['service.js'][1] = 0;
  _$jscoverage['service.js'][2] = 0;
  _$jscoverage['service.js'][3] = 0;
  _$jscoverage['service.js'][7] = 0;
  _$jscoverage['service.js'][9] = 0;
  _$jscoverage['service.js'][11] = 0;
  _$jscoverage['service.js'][13] = 0;
  _$jscoverage['service.js'][15] = 0;
  _$jscoverage['service.js'][17] = 0;
  _$jscoverage['service.js'][19] = 0;
  _$jscoverage['service.js'][21] = 0;
  _$jscoverage['service.js'][23] = 0;
  _$jscoverage['service.js'][25] = 0;
  _$jscoverage['service.js'][27] = 0;
  _$jscoverage['service.js'][29] = 0;
  _$jscoverage['service.js'][31] = 0;
  _$jscoverage['service.js'][33] = 0;
  _$jscoverage['service.js'][35] = 0;
  _$jscoverage['service.js'][37] = 0;
  _$jscoverage['service.js'][39] = 0;
  _$jscoverage['service.js'][41] = 0;
  _$jscoverage['service.js'][43] = 0;
  _$jscoverage['service.js'][45] = 0;
  _$jscoverage['service.js'][47] = 0;
  _$jscoverage['service.js'][49] = 0;
  _$jscoverage['service.js'][51] = 0;
  _$jscoverage['service.js'][53] = 0;
  _$jscoverage['service.js'][55] = 0;
  _$jscoverage['service.js'][57] = 0;
  _$jscoverage['service.js'][59] = 0;
  _$jscoverage['service.js'][61] = 0;
  _$jscoverage['service.js'][63] = 0;
  _$jscoverage['service.js'][65] = 0;
  _$jscoverage['service.js'][67] = 0;
  _$jscoverage['service.js'][69] = 0;
  _$jscoverage['service.js'][71] = 0;
  _$jscoverage['service.js'][77] = 0;
  _$jscoverage['service.js'][79] = 0;
  _$jscoverage['service.js'][81] = 0;
  _$jscoverage['service.js'][83] = 0;
  _$jscoverage['service.js'][85] = 0;
  _$jscoverage['service.js'][87] = 0;
  _$jscoverage['service.js'][89] = 0;
  _$jscoverage['service.js'][91] = 0;
  _$jscoverage['service.js'][93] = 0;
  _$jscoverage['service.js'][94] = 0;
  _$jscoverage['service.js'][95] = 0;
  _$jscoverage['service.js'][96] = 0;
  _$jscoverage['service.js'][99] = 0;
  _$jscoverage['service.js'][100] = 0;
  _$jscoverage['service.js'][101] = 0;
  _$jscoverage['service.js'][102] = 0;
  _$jscoverage['service.js'][111] = 0;
  _$jscoverage['service.js'][113] = 0;
  _$jscoverage['service.js'][116] = 0;
  _$jscoverage['service.js'][117] = 0;
  _$jscoverage['service.js'][118] = 0;
  _$jscoverage['service.js'][119] = 0;
  _$jscoverage['service.js'][120] = 0;
  _$jscoverage['service.js'][121] = 0;
  _$jscoverage['service.js'][123] = 0;
  _$jscoverage['service.js'][125] = 0;
  _$jscoverage['service.js'][131] = 0;
  _$jscoverage['service.js'][132] = 0;
  _$jscoverage['service.js'][133] = 0;
  _$jscoverage['service.js'][135] = 0;
  _$jscoverage['service.js'][138] = 0;
  _$jscoverage['service.js'][139] = 0;
  _$jscoverage['service.js'][140] = 0;
  _$jscoverage['service.js'][141] = 0;
  _$jscoverage['service.js'][143] = 0;
  _$jscoverage['service.js'][144] = 0;
  _$jscoverage['service.js'][145] = 0;
  _$jscoverage['service.js'][146] = 0;
  _$jscoverage['service.js'][147] = 0;
  _$jscoverage['service.js'][149] = 0;
  _$jscoverage['service.js'][152] = 0;
  _$jscoverage['service.js'][153] = 0;
  _$jscoverage['service.js'][155] = 0;
  _$jscoverage['service.js'][157] = 0;
  _$jscoverage['service.js'][158] = 0;
  _$jscoverage['service.js'][160] = 0;
  _$jscoverage['service.js'][161] = 0;
  _$jscoverage['service.js'][163] = 0;
  _$jscoverage['service.js'][165] = 0;
  _$jscoverage['service.js'][167] = 0;
  _$jscoverage['service.js'][169] = 0;
  _$jscoverage['service.js'][171] = 0;
  _$jscoverage['service.js'][173] = 0;
  _$jscoverage['service.js'][175] = 0;
  _$jscoverage['service.js'][177] = 0;
  _$jscoverage['service.js'][179] = 0;
  _$jscoverage['service.js'][181] = 0;
  _$jscoverage['service.js'][183] = 0;
  _$jscoverage['service.js'][185] = 0;
  _$jscoverage['service.js'][187] = 0;
  _$jscoverage['service.js'][189] = 0;
  _$jscoverage['service.js'][191] = 0;
  _$jscoverage['service.js'][193] = 0;
  _$jscoverage['service.js'][195] = 0;
  _$jscoverage['service.js'][197] = 0;
  _$jscoverage['service.js'][199] = 0;
  _$jscoverage['service.js'][201] = 0;
  _$jscoverage['service.js'][203] = 0;
  _$jscoverage['service.js'][205] = 0;
  _$jscoverage['service.js'][207] = 0;
  _$jscoverage['service.js'][209] = 0;
  _$jscoverage['service.js'][211] = 0;
  _$jscoverage['service.js'][213] = 0;
  _$jscoverage['service.js'][215] = 0;
  _$jscoverage['service.js'][217] = 0;
  _$jscoverage['service.js'][218] = 0;
  _$jscoverage['service.js'][220] = 0;
  _$jscoverage['service.js'][221] = 0;
  _$jscoverage['service.js'][223] = 0;
  _$jscoverage['service.js'][224] = 0;
  _$jscoverage['service.js'][226] = 0;
  _$jscoverage['service.js'][227] = 0;
  _$jscoverage['service.js'][228] = 0;
  _$jscoverage['service.js'][230] = 0;
  _$jscoverage['service.js'][231] = 0;
  _$jscoverage['service.js'][233] = 0;
  _$jscoverage['service.js'][234] = 0;
  _$jscoverage['service.js'][235] = 0;
  _$jscoverage['service.js'][236] = 0;
  _$jscoverage['service.js'][238] = 0;
  _$jscoverage['service.js'][242] = 0;
  _$jscoverage['service.js'][243] = 0;
  _$jscoverage['service.js'][246] = 0;
  _$jscoverage['service.js'][247] = 0;
  _$jscoverage['service.js'][250] = 0;
  _$jscoverage['service.js'][251] = 0;
  _$jscoverage['service.js'][252] = 0;
  _$jscoverage['service.js'][253] = 0;
  _$jscoverage['service.js'][255] = 0;
  _$jscoverage['service.js'][256] = 0;
  _$jscoverage['service.js'][258] = 0;
  _$jscoverage['service.js'][259] = 0;
  _$jscoverage['service.js'][261] = 0;
  _$jscoverage['service.js'][262] = 0;
  _$jscoverage['service.js'][264] = 0;
  _$jscoverage['service.js'][265] = 0;
  _$jscoverage['service.js'][267] = 0;
  _$jscoverage['service.js'][268] = 0;
  _$jscoverage['service.js'][269] = 0;
  _$jscoverage['service.js'][270] = 0;
  _$jscoverage['service.js'][272] = 0;
  _$jscoverage['service.js'][273] = 0;
  _$jscoverage['service.js'][275] = 0;
  _$jscoverage['service.js'][276] = 0;
  _$jscoverage['service.js'][277] = 0;
  _$jscoverage['service.js'][279] = 0;
  _$jscoverage['service.js'][280] = 0;
  _$jscoverage['service.js'][281] = 0;
  _$jscoverage['service.js'][282] = 0;
  _$jscoverage['service.js'][283] = 0;
  _$jscoverage['service.js'][284] = 0;
  _$jscoverage['service.js'][286] = 0;
  _$jscoverage['service.js'][287] = 0;
  _$jscoverage['service.js'][288] = 0;
  _$jscoverage['service.js'][290] = 0;
  _$jscoverage['service.js'][298] = 0;
  _$jscoverage['service.js'][299] = 0;
  _$jscoverage['service.js'][300] = 0;
  _$jscoverage['service.js'][302] = 0;
  _$jscoverage['service.js'][303] = 0;
  _$jscoverage['service.js'][304] = 0;
  _$jscoverage['service.js'][305] = 0;
  _$jscoverage['service.js'][307] = 0;
  _$jscoverage['service.js'][309] = 0;
  _$jscoverage['service.js'][312] = 0;
  _$jscoverage['service.js'][313] = 0;
  _$jscoverage['service.js'][314] = 0;
  _$jscoverage['service.js'][316] = 0;
  _$jscoverage['service.js'][320] = 0;
  _$jscoverage['service.js'][321] = 0;
  _$jscoverage['service.js'][322] = 0;
  _$jscoverage['service.js'][323] = 0;
  _$jscoverage['service.js'][324] = 0;
  _$jscoverage['service.js'][328] = 0;
  _$jscoverage['service.js'][332] = 0;
  _$jscoverage['service.js'][333] = 0;
  _$jscoverage['service.js'][334] = 0;
  _$jscoverage['service.js'][335] = 0;
  _$jscoverage['service.js'][337] = 0;
  _$jscoverage['service.js'][338] = 0;
  _$jscoverage['service.js'][340] = 0;
  _$jscoverage['service.js'][341] = 0;
  _$jscoverage['service.js'][342] = 0;
  _$jscoverage['service.js'][343] = 0;
  _$jscoverage['service.js'][345] = 0;
  _$jscoverage['service.js'][346] = 0;
  _$jscoverage['service.js'][350] = 0;
  _$jscoverage['service.js'][353] = 0;
  _$jscoverage['service.js'][354] = 0;
  _$jscoverage['service.js'][355] = 0;
  _$jscoverage['service.js'][356] = 0;
  _$jscoverage['service.js'][357] = 0;
  _$jscoverage['service.js'][361] = 0;
  _$jscoverage['service.js'][365] = 0;
  _$jscoverage['service.js'][366] = 0;
  _$jscoverage['service.js'][367] = 0;
  _$jscoverage['service.js'][368] = 0;
  _$jscoverage['service.js'][370] = 0;
  _$jscoverage['service.js'][376] = 0;
  _$jscoverage['service.js'][377] = 0;
  _$jscoverage['service.js'][386] = 0;
  _$jscoverage['service.js'][387] = 0;
  _$jscoverage['service.js'][388] = 0;
  _$jscoverage['service.js'][389] = 0;
  _$jscoverage['service.js'][391] = 0;
  _$jscoverage['service.js'][398] = 0;
  _$jscoverage['service.js'][399] = 0;
  _$jscoverage['service.js'][400] = 0;
  _$jscoverage['service.js'][401] = 0;
  _$jscoverage['service.js'][403] = 0;
  _$jscoverage['service.js'][404] = 0;
  _$jscoverage['service.js'][405] = 0;
  _$jscoverage['service.js'][406] = 0;
  _$jscoverage['service.js'][407] = 0;
  _$jscoverage['service.js'][409] = 0;
  _$jscoverage['service.js'][414] = 0;
  _$jscoverage['service.js'][415] = 0;
  _$jscoverage['service.js'][416] = 0;
  _$jscoverage['service.js'][417] = 0;
  _$jscoverage['service.js'][418] = 0;
  _$jscoverage['service.js'][423] = 0;
  _$jscoverage['service.js'][424] = 0;
  _$jscoverage['service.js'][425] = 0;
  _$jscoverage['service.js'][426] = 0;
  _$jscoverage['service.js'][429] = 0;
  _$jscoverage['service.js'][430] = 0;
  _$jscoverage['service.js'][431] = 0;
  _$jscoverage['service.js'][432] = 0;
  _$jscoverage['service.js'][434] = 0;
  _$jscoverage['service.js'][435] = 0;
  _$jscoverage['service.js'][436] = 0;
  _$jscoverage['service.js'][437] = 0;
  _$jscoverage['service.js'][438] = 0;
  _$jscoverage['service.js'][440] = 0;
  _$jscoverage['service.js'][441] = 0;
  _$jscoverage['service.js'][443] = 0;
  _$jscoverage['service.js'][444] = 0;
  _$jscoverage['service.js'][446] = 0;
  _$jscoverage['service.js'][447] = 0;
  _$jscoverage['service.js'][448] = 0;
  _$jscoverage['service.js'][449] = 0;
  _$jscoverage['service.js'][454] = 0;
  _$jscoverage['service.js'][456] = 0;
  _$jscoverage['service.js'][457] = 0;
  _$jscoverage['service.js'][459] = 0;
  _$jscoverage['service.js'][464] = 0;
  _$jscoverage['service.js'][465] = 0;
  _$jscoverage['service.js'][467] = 0;
  _$jscoverage['service.js'][468] = 0;
  _$jscoverage['service.js'][470] = 0;
  _$jscoverage['service.js'][471] = 0;
  _$jscoverage['service.js'][473] = 0;
  _$jscoverage['service.js'][474] = 0;
  _$jscoverage['service.js'][475] = 0;
  _$jscoverage['service.js'][477] = 0;
  _$jscoverage['service.js'][481] = 0;
  _$jscoverage['service.js'][483] = 0;
  _$jscoverage['service.js'][484] = 0;
  _$jscoverage['service.js'][489] = 0;
  _$jscoverage['service.js'][490] = 0;
  _$jscoverage['service.js'][493] = 0;
  _$jscoverage['service.js'][494] = 0;
  _$jscoverage['service.js'][497] = 0;
  _$jscoverage['service.js'][498] = 0;
  _$jscoverage['service.js'][501] = 0;
  _$jscoverage['service.js'][502] = 0;
  _$jscoverage['service.js'][504] = 0;
  _$jscoverage['service.js'][505] = 0;
  _$jscoverage['service.js'][507] = 0;
  _$jscoverage['service.js'][508] = 0;
  _$jscoverage['service.js'][510] = 0;
  _$jscoverage['service.js'][513] = 0;
  _$jscoverage['service.js'][514] = 0;
  _$jscoverage['service.js'][517] = 0;
  _$jscoverage['service.js'][518] = 0;
  _$jscoverage['service.js'][521] = 0;
  _$jscoverage['service.js'][522] = 0;
  _$jscoverage['service.js'][525] = 0;
  _$jscoverage['service.js'][526] = 0;
  _$jscoverage['service.js'][527] = 0;
  _$jscoverage['service.js'][528] = 0;
  _$jscoverage['service.js'][530] = 0;
  _$jscoverage['service.js'][531] = 0;
  _$jscoverage['service.js'][533] = 0;
  _$jscoverage['service.js'][534] = 0;
  _$jscoverage['service.js'][535] = 0;
  _$jscoverage['service.js'][536] = 0;
  _$jscoverage['service.js'][537] = 0;
  _$jscoverage['service.js'][538] = 0;
  _$jscoverage['service.js'][539] = 0;
  _$jscoverage['service.js'][540] = 0;
  _$jscoverage['service.js'][542] = 0;
  _$jscoverage['service.js'][549] = 0;
  _$jscoverage['service.js'][550] = 0;
  _$jscoverage['service.js'][551] = 0;
  _$jscoverage['service.js'][552] = 0;
  _$jscoverage['service.js'][556] = 0;
  _$jscoverage['service.js'][557] = 0;
  _$jscoverage['service.js'][559] = 0;
  _$jscoverage['service.js'][560] = 0;
  _$jscoverage['service.js'][561] = 0;
  _$jscoverage['service.js'][562] = 0;
  _$jscoverage['service.js'][563] = 0;
  _$jscoverage['service.js'][564] = 0;
  _$jscoverage['service.js'][566] = 0;
  _$jscoverage['service.js'][568] = 0;
  _$jscoverage['service.js'][571] = 0;
  _$jscoverage['service.js'][572] = 0;
  _$jscoverage['service.js'][573] = 0;
  _$jscoverage['service.js'][577] = 0;
  _$jscoverage['service.js'][581] = 0;
  _$jscoverage['service.js'][582] = 0;
  _$jscoverage['service.js'][584] = 0;
  _$jscoverage['service.js'][585] = 0;
  _$jscoverage['service.js'][586] = 0;
  _$jscoverage['service.js'][589] = 0;
  _$jscoverage['service.js'][590] = 0;
  _$jscoverage['service.js'][593] = 0;
  _$jscoverage['service.js'][594] = 0;
  _$jscoverage['service.js'][597] = 0;
  _$jscoverage['service.js'][598] = 0;
  _$jscoverage['service.js'][601] = 0;
  _$jscoverage['service.js'][602] = 0;
  _$jscoverage['service.js'][603] = 0;
  _$jscoverage['service.js'][604] = 0;
  _$jscoverage['service.js'][606] = 0;
  _$jscoverage['service.js'][607] = 0;
  _$jscoverage['service.js'][609] = 0;
  _$jscoverage['service.js'][610] = 0;
  _$jscoverage['service.js'][611] = 0;
  _$jscoverage['service.js'][613] = 0;
  _$jscoverage['service.js'][614] = 0;
  _$jscoverage['service.js'][615] = 0;
  _$jscoverage['service.js'][616] = 0;
  _$jscoverage['service.js'][618] = 0;
  _$jscoverage['service.js'][619] = 0;
  _$jscoverage['service.js'][621] = 0;
  _$jscoverage['service.js'][622] = 0;
  _$jscoverage['service.js'][624] = 0;
  _$jscoverage['service.js'][631] = 0;
  _$jscoverage['service.js'][634] = 0;
  _$jscoverage['service.js'][635] = 0;
  _$jscoverage['service.js'][636] = 0;
  _$jscoverage['service.js'][637] = 0;
  _$jscoverage['service.js'][641] = 0;
  _$jscoverage['service.js'][642] = 0;
  _$jscoverage['service.js'][645] = 0;
  _$jscoverage['service.js'][646] = 0;
  _$jscoverage['service.js'][647] = 0;
  _$jscoverage['service.js'][648] = 0;
  _$jscoverage['service.js'][649] = 0;
  _$jscoverage['service.js'][653] = 0;
  _$jscoverage['service.js'][654] = 0;
  _$jscoverage['service.js'][659] = 0;
  _$jscoverage['service.js'][660] = 0;
  _$jscoverage['service.js'][663] = 0;
  _$jscoverage['service.js'][664] = 0;
  _$jscoverage['service.js'][667] = 0;
  _$jscoverage['service.js'][668] = 0;
  _$jscoverage['service.js'][671] = 0;
  _$jscoverage['service.js'][672] = 0;
  _$jscoverage['service.js'][675] = 0;
  _$jscoverage['service.js'][676] = 0;
  _$jscoverage['service.js'][678] = 0;
  _$jscoverage['service.js'][679] = 0;
  _$jscoverage['service.js'][680] = 0;
  _$jscoverage['service.js'][681] = 0;
  _$jscoverage['service.js'][682] = 0;
  _$jscoverage['service.js'][687] = 0;
  _$jscoverage['service.js'][690] = 0;
  _$jscoverage['service.js'][691] = 0;
  _$jscoverage['service.js'][692] = 0;
  _$jscoverage['service.js'][693] = 0;
  _$jscoverage['service.js'][697] = 0;
  _$jscoverage['service.js'][698] = 0;
  _$jscoverage['service.js'][699] = 0;
  _$jscoverage['service.js'][700] = 0;
  _$jscoverage['service.js'][701] = 0;
  _$jscoverage['service.js'][708] = 0;
  _$jscoverage['service.js'][712] = 0;
  _$jscoverage['service.js'][713] = 0;
  _$jscoverage['service.js'][715] = 0;
  _$jscoverage['service.js'][716] = 0;
  _$jscoverage['service.js'][718] = 0;
  _$jscoverage['service.js'][719] = 0;
  _$jscoverage['service.js'][721] = 0;
  _$jscoverage['service.js'][722] = 0;
  _$jscoverage['service.js'][724] = 0;
  _$jscoverage['service.js'][725] = 0;
  _$jscoverage['service.js'][730] = 0;
  _$jscoverage['service.js'][732] = 0;
  _$jscoverage['service.js'][739] = 0;
  _$jscoverage['service.js'][742] = 0;
  _$jscoverage['service.js'][743] = 0;
  _$jscoverage['service.js'][746] = 0;
  _$jscoverage['service.js'][747] = 0;
  _$jscoverage['service.js'][753] = 0;
  _$jscoverage['service.js'][754] = 0;
  _$jscoverage['service.js'][755] = 0;
  _$jscoverage['service.js'][756] = 0;
  _$jscoverage['service.js'][763] = 0;
  _$jscoverage['service.js'][765] = 0;
  _$jscoverage['service.js'][766] = 0;
  _$jscoverage['service.js'][767] = 0;
  _$jscoverage['service.js'][768] = 0;
  _$jscoverage['service.js'][770] = 0;
  _$jscoverage['service.js'][771] = 0;
  _$jscoverage['service.js'][772] = 0;
  _$jscoverage['service.js'][775] = 0;
  _$jscoverage['service.js'][779] = 0;
  _$jscoverage['service.js'][780] = 0;
  _$jscoverage['service.js'][781] = 0;
  _$jscoverage['service.js'][782] = 0;
  _$jscoverage['service.js'][789] = 0;
  _$jscoverage['service.js'][790] = 0;
  _$jscoverage['service.js'][791] = 0;
  _$jscoverage['service.js'][792] = 0;
  _$jscoverage['service.js'][793] = 0;
  _$jscoverage['service.js'][796] = 0;
  _$jscoverage['service.js'][797] = 0;
  _$jscoverage['service.js'][804] = 0;
  _$jscoverage['service.js'][805] = 0;
  _$jscoverage['service.js'][808] = 0;
  _$jscoverage['service.js'][812] = 0;
  _$jscoverage['service.js'][813] = 0;
  _$jscoverage['service.js'][815] = 0;
  _$jscoverage['service.js'][816] = 0;
  _$jscoverage['service.js'][817] = 0;
  _$jscoverage['service.js'][818] = 0;
  _$jscoverage['service.js'][820] = 0;
  _$jscoverage['service.js'][821] = 0;
  _$jscoverage['service.js'][826] = 0;
  _$jscoverage['service.js'][828] = 0;
  _$jscoverage['service.js'][829] = 0;
  _$jscoverage['service.js'][831] = 0;
  _$jscoverage['service.js'][832] = 0;
  _$jscoverage['service.js'][833] = 0;
  _$jscoverage['service.js'][834] = 0;
  _$jscoverage['service.js'][836] = 0;
  _$jscoverage['service.js'][837] = 0;
  _$jscoverage['service.js'][842] = 0;
  _$jscoverage['service.js'][844] = 0;
  _$jscoverage['service.js'][846] = 0;
  _$jscoverage['service.js'][848] = 0;
  _$jscoverage['service.js'][850] = 0;
  _$jscoverage['service.js'][852] = 0;
  _$jscoverage['service.js'][854] = 0;
  _$jscoverage['service.js'][855] = 0;
  _$jscoverage['service.js'][856] = 0;
  _$jscoverage['service.js'][857] = 0;
  _$jscoverage['service.js'][858] = 0;
  _$jscoverage['service.js'][859] = 0;
  _$jscoverage['service.js'][860] = 0;
  _$jscoverage['service.js'][863] = 0;
  _$jscoverage['service.js'][864] = 0;
  _$jscoverage['service.js'][865] = 0;
  _$jscoverage['service.js'][867] = 0;
  _$jscoverage['service.js'][870] = 0;
  _$jscoverage['service.js'][872] = 0;
  _$jscoverage['service.js'][874] = 0;
  _$jscoverage['service.js'][876] = 0;
}
_$jscoverage['service.js'].source = ["(function() {","  var CLASSKEYS, CLASSKEY_PATH, DEFAULT_ERROR_HANDLER, DEFAULT_PROTOCOL, ENRICHMENT_PATH, HAS_PROTOCOL, HAS_SUFFIX, IDResolutionJob, LISTS_PATH, LIST_OPERATION_PATHS, LIST_PIPE, List, MODELS, MODEL_PATH, Model, PATH_VALUES_PATH, PREF_PATH, Promise, QUERY_RESULTS_PATH, QUICKSEARCH_PATH, Query, RELEASES, RELEASE_PATH, REQUIRES_VERSION, SUBTRACT_PATH, SUFFIX, SUMMARYFIELDS_PATH, SUMMARY_FIELDS, Service, TABLE_ROW_PATH, TEMPLATES_PATH, TO_NAMES, User, VERSIONS, VERSION_PATH, WHOAMI_PATH, WIDGETS, WIDGETS_PATH, WITH_OBJ_PATH, base64, dejoin, error, get, getListFinder, http, intermine, invoke, map, merge, set, success, to_query_string, utils, version, withCB, _get_or_fetch,","    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },","    __hasProp = {}.hasOwnProperty,","    __slice = [].slice;","","  Promise = require('./promise');","","  Model = require('./model').Model;","","  Query = require('./query').Query;","","  List = require('./lists').List;","","  User = require('./user').User;","","  IDResolutionJob = require('./id-resolution-job').IDResolutionJob;","","  base64 = require('./base64');","","  version = require('./version');","","  utils = require('./util');","","  to_query_string = utils.querystring;","","  http = require('./http');","","  intermine = exports;","","  withCB = utils.withCB, map = utils.map, merge = utils.merge, get = utils.get, set = utils.set, invoke = utils.invoke, success = utils.success, error = utils.error, REQUIRES_VERSION = utils.REQUIRES_VERSION, dejoin = utils.dejoin;","","  VERSIONS = {};","","  CLASSKEYS = {};","","  RELEASES = {};","","  MODELS = {};","","  SUMMARY_FIELDS = {};","","  WIDGETS = {};","","  DEFAULT_PROTOCOL = \"http://\";","","  VERSION_PATH = \"version\";","","  TEMPLATES_PATH = \"templates\";","","  RELEASE_PATH = \"version/release\";","","  CLASSKEY_PATH = \"classkeys\";","","  LISTS_PATH = \"lists\";","","  MODEL_PATH = \"model\";","","  SUMMARYFIELDS_PATH = \"summaryfields\";","","  QUERY_RESULTS_PATH = \"query/results\";","","  QUICKSEARCH_PATH = \"search\";","","  WIDGETS_PATH = \"widgets\";","","  ENRICHMENT_PATH = \"list/enrichment\";","","  WITH_OBJ_PATH = \"listswithobject\";","","  LIST_OPERATION_PATHS = {","    union: \"lists/union\",","    intersection: \"lists/intersect\",","    difference: \"lists/diff\"","  };","","  SUBTRACT_PATH = 'lists/subtract';","","  WHOAMI_PATH = \"user/whoami\";","","  TABLE_ROW_PATH = QUERY_RESULTS_PATH + '/tablerows';","","  PREF_PATH = 'user/preferences';","","  PATH_VALUES_PATH = 'path/values';","","  HAS_PROTOCOL = /^https?:\\/\\//i;","","  HAS_SUFFIX = /service\\/?$/i;","","  SUFFIX = \"/service/\";","","  DEFAULT_ERROR_HANDLER = function(e) {","    var f, _ref;","    f = (_ref = console.error) != null ? _ref : console.log;","    return f(e);","  };","","  _get_or_fetch = function(propName, store, path, key, cb) {","    var opts, promise, root, useCache, value, _ref;","    root = this.root, useCache = this.useCache;","    promise = (_ref = this[propName]) != null ? _ref : this[propName] = useCache &amp;&amp; (value = store[root]) ? success(value) : (opts = {","      type: 'GET',","      dataType: 'json',","      data: {","        format: 'json'","      }","    }, this.doReq(merge(opts, {","      url: this.root + path","    })).then(function(x) {","      return store[root] = x[key];","    }));","    return withCB(cb, promise);","  };","","  getListFinder = function(name) {","    return function(lists) {","      return new Promise(function(resolve, reject) {","        var list;","        if (list = utils.find(lists, function(l) {","          return l.name === name;","        })) {","          return resolve(list);","        } else {","          return reject(\"List \\\"\" + name + \"\\\" not found among: \" + (lists.map(get('name'))));","        }","      });","    };","  };","","  LIST_PIPE = function(service, prop) {","    if (prop == null) {","      prop = 'listName';","    }","    return utils.compose(service.fetchList, get(prop));","  };","","  TO_NAMES = function(xs) {","    var x, _i, _len, _ref, _ref1, _results;","    if (xs == null) {","      xs = [];","    }","    _ref = (utils.isArray(xs) ? xs : [xs]);","    _results = [];","    for (_i = 0, _len = _ref.length; _i &lt; _len; _i++) {","      x = _ref[_i];","      _results.push((_ref1 = x.name) != null ? _ref1 : x);","    }","    return _results;","  };","","  Service = (function() {","    var FIVE_MIN, getNewUserToken, toMapByName;","","    Service.prototype.doReq = http.doReq;","","    function Service(_arg) {","      var noCache, _ref, _ref1,","        _this = this;","      this.root = _arg.root, this.token = _arg.token, this.errorHandler = _arg.errorHandler, this.DEBUG = _arg.DEBUG, this.help = _arg.help, noCache = _arg.noCache;","      this.connectAs = __bind(this.connectAs, this);","","      this.createList = __bind(this.createList, this);","","      this.resolveIds = __bind(this.resolveIds, this);","","      this.query = __bind(this.query, this);","","      this.fetchRelease = __bind(this.fetchRelease, this);","","      this.fetchClassKeys = __bind(this.fetchClassKeys, this);","","      this.fetchVersion = __bind(this.fetchVersion, this);","","      this.fetchSummaryFields = __bind(this.fetchSummaryFields, this);","","      this.fetchModel = __bind(this.fetchModel, this);","","      this.fetchWidgetMap = __bind(this.fetchWidgetMap, this);","","      this.fetchWidgets = __bind(this.fetchWidgets, this);","","      this.complement = __bind(this.complement, this);","","      this.fetchListsContaining = __bind(this.fetchListsContaining, this);","","      this.fetchList = __bind(this.fetchList, this);","","      this.findLists = __bind(this.findLists, this);","","      this.fetchLists = __bind(this.fetchLists, this);","","      this.fetchTemplates = __bind(this.fetchTemplates, this);","","      this.tableRows = __bind(this.tableRows, this);","","      this.values = __bind(this.values, this);","","      this.rows = __bind(this.rows, this);","","      this.records = __bind(this.records, this);","","      this.table = __bind(this.table, this);","","      this.pathValues = __bind(this.pathValues, this);","","      this.fetchUser = __bind(this.fetchUser, this);","","      this.whoami = __bind(this.whoami, this);","","      this.findById = __bind(this.findById, this);","","      this.count = __bind(this.count, this);","","      this.enrichment = __bind(this.enrichment, this);","","      if (this.root == null) {","        throw new Error(\"No service root provided. This is required\");","      }","      if (!HAS_PROTOCOL.test(this.root)) {","        this.root = DEFAULT_PROTOCOL + this.root;","      }","      if (!HAS_SUFFIX.test(this.root)) {","        this.root = this.root + SUFFIX;","      }","      this.root = this.root.replace(/ice$/, \"ice/\");","      if ((_ref = this.errorHandler) == null) {","        this.errorHandler = DEFAULT_ERROR_HANDLER;","      }","      if ((_ref1 = this.help) == null) {","        this.help = 'no.help.available@dev.null';","      }","      this.useCache = !noCache;","      this.getFormat = function(intended) {","        if (intended == null) {","          intended = 'json';","        }","        return intended;","      };","    }","","    Service.prototype.post = function(path, data) {","      return this.makeRequest('POST', path, data);","    };","","    Service.prototype.get = function(path, data) {","      return this.makeRequest('GET', path, data);","    };","","    Service.prototype.makeRequest = function(method, path, data, cb, indiv) {","      var _this = this;","      if (method == null) {","        method = 'GET';","      }","      if (path == null) {","        path = '';","      }","      if (data == null) {","        data = {};","      }","      if (cb == null) {","        cb = (function() {});","      }","      if (indiv == null) {","        indiv = false;","      }","      return this.fetchVersion().then(function(version) {","        var dataType, errBack, opts, timeout, url, _ref, _ref1, _ref2, _ref3;","        if (utils.isArray(cb)) {","          _ref = cb, cb = _ref[0], errBack = _ref[1];","        }","        if (utils.isArray(data)) {","          data = utils.pairsToObj(data);","        }","        url = _this.root + path;","        if (errBack == null) {","          errBack = _this.errorHandler;","        }","        data = utils.copy(data);","        data.format = _this.getFormat(data.format);","        if (/jsonp/.test(data.format)) {","          data.method = method;","          method = 'GET';","          url += '?callback=?';","        }","        dataType = /json/.test(data.format) ? 'json' : 'text';","        if (!http.supports(method)) {","          _ref1 = [method, http.getMethod(method)], data.method = _ref1[0], method = _ref1[1];","        }","        opts = {","          data: data,","          dataType: dataType,","          success: cb,","          error: errBack,","          url: url,","          type: method","        };","        if ('headers' in data) {","          opts.headers = utils.copy(data.headers);","          delete opts.data.headers;","        }","        if (_this.token != null) {","          if (version &gt;= 14) {","            if ((_ref2 = opts.headers) == null) {","              opts.headers = {};","            }","            opts.headers.Authorization = \"Token \" + _this.token;","          } else {","            opts.data.token = _this.token;","          }","        }","        if (timeout = (_ref3 = data.timeout) != null ? _ref3 : _this.timeout) {","          opts.timeout = timeout;","          delete data.timeout;","        }","        return _this.doReq(opts, indiv);","      });","    };","","    Service.prototype.enrichment = function(opts, cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 8, function() {","        var req;","        req = merge({","          maxp: 0.05,","          correction: 'Holm-Bonferroni'","        }, opts);","        return _this.get(ENRICHMENT_PATH, req).then(get('results')).nodeify(cb);","      });","    };","","    Service.prototype.search = function(options, cb) {","      var _this = this;","      if (options == null) {","        options = {};","      }","      if (cb == null) {","        cb = (function() {});","      }","      return REQUIRES_VERSION(this, 9, function() {","        var k, req, v, _ref;","        if (utils.isFunction(options)) {","          _ref = [options, {}], cb = _ref[0], options = _ref[1];","        }","        if (typeof options === 'string') {","          req = {","            q: options","          };","        } else {","          req = {","            q: options.q","          };","          for (k in options) {","            if (!__hasProp.call(options, k)) continue;","            v = options[k];","            if (k !== 'q') {","              req[\"facet_\" + k] = v;","            }","          }","        }","        return withCB(cb, _this.post(QUICKSEARCH_PATH, req));","      });","    };","","    Service.prototype.count = function(q, cb) {","      var p, req;","      if (cb == null) {","        cb = (function() {});","      }","      return withCB(cb, !q ? error(\"Not enough arguments\") : q.toPathString != null ? (p = q.isClass() ? q.append('id') : q, this.pathValues(p, 'count')) : q.toXML != null ? (req = {","        query: q.toXML(),","        format: 'jsoncount'","      }, this.post(QUERY_RESULTS_PATH, req).then(get('count'))) : typeof q === 'string' ? this.fetchModel().then(invoke('makePath', q.replace(/\\.\\*$/, '.id'))).then(this.count) : this.query(q).then(this.count));","    };","","    Service.prototype.findById = function(type, id, cb) {","      return withCB(cb, this.query({","        from: type,","        select: ['**'],","        where: {","          id: id","        }","      }).then(dejoin).then(invoke('records')).then(get(0)));","    };","","    Service.prototype.lookup = function(type, term, context, cb) {","      var _ref;","      if (utils.isFunction(context)) {","        _ref = [null, context], context = _ref[0], cb = _ref[1];","      }","      return withCB(cb, this.query({","        from: type,","        select: ['**'],","        where: [[type, 'LOOKUP', term, context]]","      }).then(dejoin).then(invoke('records')));","    };","","    Service.prototype.find = function(type, term, context, cb) {","      var _ref;","      if (utils.isFunction(context)) {","        _ref = [null, context], context = _ref[0], cb = _ref[1];","      }","      return withCB(cb, this.lookup(type, term, context).then(function(found) {","        if (!(found != null) || found.length === 0) {","          return error(\"Nothing found\");","        } else if (found.length &gt; 1) {","          return error(\"Multiple items found: \" + (found.slice(0, 3)) + \"...\");","        } else {","          return success(found[0]);","        }","      }));","    };","","    Service.prototype.whoami = function(cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 9, function() {","        return withCB(cb, _this.get(WHOAMI_PATH).then(get('user')).then(function(x) {","          return new User(_this, x);","        }));","      });","    };","","    Service.prototype.fetchUser = function() {","      var args;","      args = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","      return this.whoami.apply(this, args);","    };","","    Service.prototype.pathValues = function(path, typeConstraints, cb) {","      var _this = this;","      if (typeConstraints == null) {","        typeConstraints = {};","      }","      return REQUIRES_VERSION(this, 6, function() {","        var wanted, _pathValues, _ref, _ref1;","        if (typeof typeConstraints === 'string') {","          wanted = typeConstraints;","          typeConstraints = {};","        }","        if (utils.isFunction(typeConstraints)) {","          _ref = [cb, typeConstraints], typeConstraints = _ref[0], cb = _ref[1];","        }","        if (wanted !== 'count') {","          wanted = 'results';","        }","        _pathValues = function(path) {","          var format, req;","          format = wanted === 'count' ? 'jsoncount' : 'json';","          req = {","            format: format,","            path: path.toString(),","            typeConstraints: JSON.stringify(path.subclasses)","          };","          return _this.post(PATH_VALUES_PATH, req).then(get(wanted));","        };","        try {","          return withCB(cb, _this.fetchModel().then(invoke('makePath', path, (_ref1 = path.subclasses) != null ? _ref1 : typeConstraints)).then(_pathValues));","        } catch (e) {","          return error(e);","        }","      });","    };","","    Service.prototype.doPagedRequest = function(q, path, page, format, cb) {","      var req, _ref,","        _this = this;","      if (page == null) {","        page = {};","      }","      if (cb == null) {","        cb = (function() {});","      }","      if (q.toXML != null) {","        if (utils.isFunction(page)) {","          _ref = [page, {}], cb = _ref[0], page = _ref[1];","        }","        req = merge(page, {","          query: q.toXML(),","          format: format","        });","        return withCB(cb, this.post(path, req).then(get('results')));","      } else {","        return this.query(q).then(function(query) {","          return _this.doPagedRequest(query, path, page, format, cb);","        });","      }","    };","","    Service.prototype.table = function(q, page, cb) {","      return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, 'jsontable', cb);","    };","","    Service.prototype.records = function(q, page, cb) {","      return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, 'jsonobjects', cb);","    };","","    Service.prototype.rows = function(q, page, cb) {","      return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, 'json', cb);","    };","","    Service.prototype.values = function(q, opts, cb) {","      var resp, _ref,","        _this = this;","      if (utils.isFunction(opts)) {","        _ref = [opts, cb], cb = _ref[0], opts = _ref[1];","      }","      resp = !(q != null) ? error(\"No query term supplied\") : (q.descriptors != null) || typeof q === 'string' ? this.pathValues(q, opts).then(map(get('value'))) : q.toXML != null ? q.views.length !== 1 ? error(\"Expected one column, got \" + q.views.length) : this.rows(q, opts).then(map(get(0))) : this.query(q).then(function(query) {","        return _this.values(query, opts);","      });","      return withCB(cb, resp);","    };","","    Service.prototype.tableRows = function(q, page, cb) {","      return this.doPagedRequest(q, TABLE_ROW_PATH, page, 'json', cb);","    };","","    Service.prototype.fetchTemplates = function(cb) {","      return this.get(TEMPLATES_PATH).then(get('templates')).done(cb);","    };","","    Service.prototype.fetchLists = function(cb) {","      return this.findLists('', cb);","    };","","    Service.prototype.findLists = function(name, cb) {","      var _this = this;","      if (name == null) {","        name = '';","      }","      if (cb == null) {","        cb = (function() {});","      }","      return this.fetchVersion().then(function(v) {","        var fn;","        return withCB(cb, name &amp;&amp; v &lt; 13 ? error(\"Finding lists by name on the server requires version 13. This is only \" + v) : (fn = function(ls) {","          var data, _i, _len, _results;","          _results = [];","          for (_i = 0, _len = ls.length; _i &lt; _len; _i++) {","            data = ls[_i];","            _results.push(new List(data, _this));","          }","          return _results;","        }, _this.get(LISTS_PATH, {","          name: name","        }).then(get('lists')).then(fn)));","      });","    };","","    Service.prototype.fetchList = function(name, cb) {","      var _this = this;","      return this.fetchVersion().then(function(v) {","        return withCB(cb, v &lt; 13 ? _this.findLists().then(getListFinder(name)) : _this.findLists(name).then(get(0)));","      });","    };","","    Service.prototype.fetchListsContaining = function(opts, cb) {","      var fn,","        _this = this;","      fn = function(xs) {","        var x, _i, _len, _results;","        _results = [];","        for (_i = 0, _len = xs.length; _i &lt; _len; _i++) {","          x = xs[_i];","          _results.push(new List(x, _this));","        }","        return _results;","      };","      return withCB(cb, this.get(WITH_OBJ_PATH, opts).then(get('lists')).then(fn));","    };","","    Service.prototype.combineLists = function(operation, options, cb) {","      var description, lists, name, req, tags, _ref, _ref1;","      _ref = merge({","        lists: [],","        tags: []","      }, options), name = _ref.name, lists = _ref.lists, tags = _ref.tags, description = _ref.description;","      req = {","        name: name,","        description: description","      };","      if ((_ref1 = req.description) == null) {","        req.description = \"\" + operation + \" of \" + (lists.join(', '));","      }","      req.tags = tags.join(';');","      req.lists = lists.join(';');","      return withCB(cb, this.get(LIST_OPERATION_PATHS[operation], req).then(LIST_PIPE(this)));","    };","","    Service.prototype.merge = function() {","      return this.combineLists.apply(this, ['union'].concat(__slice.call(arguments)));","    };","","    Service.prototype.intersect = function() {","      return this.combineLists.apply(this, ['intersection'].concat(__slice.call(arguments)));","    };","","    Service.prototype.diff = function() {","      return this.combineLists.apply(this, ['difference'].concat(__slice.call(arguments)));","    };","","    Service.prototype.complement = function(options, cb) {","      var defaultDesc, description, exclude, from, lists, name, references, req, tags;","      if (options == null) {","        options = {};","      }","      if (cb == null) {","        cb = function() {};","      }","      from = options.from, exclude = options.exclude, name = options.name, description = options.description, tags = options.tags;","      defaultDesc = function() {","        return \"Relative complement of \" + (lists.join(' and ')) + \" in \" + (references.join(' and '));","      };","      references = TO_NAMES(from);","      lists = TO_NAMES(exclude);","      if (name == null) {","        name = defaultDesc();","      }","      if (description == null) {","        description = defaultDesc();","      }","      if (tags == null) {","        tags = [];","      }","      req = {","        name: name,","        description: description,","        tags: tags,","        lists: lists,","        references: references","      };","      return withCB(cb, this.post(SUBTRACT_PATH, req).then(LIST_PIPE(this)));","    };","","    Service.prototype.fetchWidgets = function(cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 8, function() {","        return _get_or_fetch.call(_this, 'widgets', WIDGETS, WIDGETS_PATH, 'widgets', cb);","      });","    };","","    toMapByName = utils.omap(function(w) {","      return [w.name, w];","    });","","    Service.prototype.fetchWidgetMap = function(cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 8, function() {","        var _ref;","        return withCB(cb, ((_ref = _this.__wmap__) != null ? _ref : _this.__wmap__ = _this.fetchWidgets().then(toMapByName)));","      });","    };","","    Service.prototype.fetchModel = function(cb) {","      return _get_or_fetch.call(this, 'model', MODELS, MODEL_PATH, 'model').then(Model.load).then(set({","        service: this","      })).nodeify(cb);","    };","","    Service.prototype.fetchSummaryFields = function(cb) {","      return _get_or_fetch.call(this, 'summaryFields', SUMMARY_FIELDS, SUMMARYFIELDS_PATH, 'classes', cb);","    };","","    Service.prototype.fetchVersion = function(cb) {","      return _get_or_fetch.call(this, 'version', VERSIONS, VERSION_PATH, 'version', cb);","    };","","    Service.prototype.fetchClassKeys = function(cb) {","      return _get_or_fetch.call(this, 'classkeys', CLASSKEYS, CLASSKEY_PATH, 'classes', cb);","    };","","    Service.prototype.fetchRelease = function(cb) {","      return _get_or_fetch.call(this, 'release', RELEASES, RELEASE_PATH, 'version', cb);","    };","","    Service.prototype.query = function(options, cb) {","      var buildQuery, deps,","        _this = this;","      deps = [this.fetchModel(), this.fetchSummaryFields()];","      buildQuery = function(_arg) {","        var model, summaryFields;","        model = _arg[0], summaryFields = _arg[1];","        return new Query(merge(options, {","          model: model,","          summaryFields: summaryFields","        }), _this);","      };","      return withCB(cb, Promise.all(deps).then(buildQuery));","    };","","    Service.prototype.manageUserPreferences = function(method, data, cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 11, function() {","        return withCB(cb, _this.makeRequest(method, PREF_PATH, data).then(get('preferences')));","      });","    };","","    Service.prototype.resolveIds = function(opts, cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 10, function() {","        var req;","        req = {","          type: 'POST',","          url: _this.root + 'ids',","          contentType: 'application/json',","          data: JSON.stringify(opts),","          dataType: 'json'","        };","        return withCB(cb, _this.doReq(req).then(get('uid')).then(IDResolutionJob.create(_this)));","      });","    };","","    Service.prototype.createList = function(opts, ids, cb) {","      var adjust, req,","        _this = this;","      if (opts == null) {","        opts = {};","      }","      if (ids == null) {","        ids = '';","      }","      if (cb == null) {","        cb = function() {};","      }","      adjust = function(x) {","        return merge(x, {","          token: _this.token,","          tags: opts.tags || []","        });","      };","      req = {","        data: utils.isArray(ids) ? ids.map(function(x) {","          return \"\\\"\" + x + \"\\\"\";","        }).join(\"\\n\") : ids,","        dataType: 'json',","        url: \"\" + this.root + \"lists?\" + (to_query_string(adjust(opts))),","        type: 'POST',","        contentType: 'text/plain'","      };","      return withCB(cb, this.doReq(req).then(LIST_PIPE(this)));","    };","","    getNewUserToken = function(resp) {","      return resp.user.temporaryToken;","    };","","    Service.prototype.connectAs = function(token) {","      return Service.connect(merge(this, {","        token: token,","        noCache: !this.useCache","      }));","    };","","    Service.prototype.register = function(name, password, cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 9, function() {","        return withCB(cb, _this.post('users', {","          name: name,","          password: password","        }).then(getNewUserToken).then(_this.connectAs));","      });","    };","","    FIVE_MIN = 5 * 60;","","    Service.prototype.getDeregistrationToken = function(validity, cb) {","      var _this = this;","      if (validity == null) {","        validity = FIVE_MIN;","      }","      return REQUIRES_VERSION(this, 16, function() {","        var promise;","        promise = _this.token != null ? _this.post('user/deregistration', {","          validity: validity","        }).then(get('token')) : error(\"Not registered\");","        return withCB(cb, promise);","      });","    };","","    Service.prototype.deregister = function(token, cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 16, function() {","        return withCB(cb, _this.makeRequest('DELETE', 'user', {","          deregistrationToken: token,","          format: 'xml'","        }));","      });","    };","","    Service.prototype.login = function(name, password, cb) {","      var _this = this;","      return REQUIRES_VERSION(this, 9, function() {","        var headers;","        headers = {","          'Authorization': \"Basic \" + base64.encode(\"\" + name + \":\" + password)","        };","        return withCB(cb, _this.logout().then(function(service) {","          return service.get('user/token', {","            headers: headers","          });","        }).then(get('token')).then(_this.connectAs));","      });","    };","","    Service.prototype.logout = function(cb) {","      return withCB(cb, success(this.connectAs()));","    };","","    return Service;","","  })();","","  Service.prototype.rowByRow = function() {","    var args, f, q,","      _this = this;","    q = arguments[0], args = 2 &lt;= arguments.length ? __slice.call(arguments, 1) : [];","    f = http.iterReq('POST', QUERY_RESULTS_PATH, 'json');","    if (q.toXML != null) {","      return f.apply(this, arguments);","    } else {","      return this.query(q).then(function(query) {","        return _this.rowByRow.apply(_this, [query].concat(__slice.call(args)));","      });","    }","  };","","  Service.prototype.eachRow = Service.prototype.rowByRow;","","  Service.prototype.recordByRecord = function() {","    var args, f, q,","      _this = this;","    q = arguments[0], args = 2 &lt;= arguments.length ? __slice.call(arguments, 1) : [];","    f = http.iterReq('POST', QUERY_RESULTS_PATH, 'jsonobjects');","    if (q.toXML != null) {","      return f.apply(this, arguments);","    } else {","      return this.query(q).then(function(query) {","        return _this.recordByRecord.apply(_this, [query].concat(__slice.call(args)));","      });","    }","  };","","  Service.prototype.eachRecord = Service.prototype.recordByRecord;","","  Service.prototype.union = Service.prototype.merge;","","  Service.prototype.difference = Service.prototype.diff;","","  Service.prototype.symmetricDifference = Service.prototype.diff;","","  Service.prototype.relativeComplement = Service.prototype.complement;","","  Service.prototype.subtract = Service.prototype.complement;","","  Service.flushCaches = function() {","    MODELS = {};","    VERSIONS = {};","    RELEASES = {};","    CLASSKEYS = {};","    SUMMARY_FIELDS = {};","    return WIDGETS = {};","  };","","  Service.connect = function(opts) {","    if ((opts != null ? opts.root : void 0) == null) {","      throw new Error(\"Invalid options provided: \" + (JSON.stringify(opts)));","    }","    return new Service(opts);","  };","","  intermine.Service = Service;","","  intermine.Model = Model;","","  intermine.Query = Query;","","  intermine.imjs = version;","","}).call(this);"];
_$jscoverage['service.js'][1]++;
(function () {
  _$jscoverage['service.js'][2]++;
  var CLASSKEYS, CLASSKEY_PATH, DEFAULT_ERROR_HANDLER, DEFAULT_PROTOCOL, ENRICHMENT_PATH, HAS_PROTOCOL, HAS_SUFFIX, IDResolutionJob, LISTS_PATH, LIST_OPERATION_PATHS, LIST_PIPE, List, MODELS, MODEL_PATH, Model, PATH_VALUES_PATH, PREF_PATH, Promise, QUERY_RESULTS_PATH, QUICKSEARCH_PATH, Query, RELEASES, RELEASE_PATH, REQUIRES_VERSION, SUBTRACT_PATH, SUFFIX, SUMMARYFIELDS_PATH, SUMMARY_FIELDS, Service, TABLE_ROW_PATH, TEMPLATES_PATH, TO_NAMES, User, VERSIONS, VERSION_PATH, WHOAMI_PATH, WIDGETS, WIDGETS_PATH, WITH_OBJ_PATH, base64, dejoin, error, get, getListFinder, http, intermine, invoke, map, merge, set, success, to_query_string, utils, version, withCB, _get_or_fetch, __bind = (function (fn, me) {
  _$jscoverage['service.js'][3]++;
  return (function () {
  _$jscoverage['service.js'][3]++;
  return fn.apply(me, arguments);
});
}), __hasProp = ({}).hasOwnProperty, __slice = [].slice;
  _$jscoverage['service.js'][7]++;
  Promise = require("./promise");
  _$jscoverage['service.js'][9]++;
  Model = require("./model").Model;
  _$jscoverage['service.js'][11]++;
  Query = require("./query").Query;
  _$jscoverage['service.js'][13]++;
  List = require("./lists").List;
  _$jscoverage['service.js'][15]++;
  User = require("./user").User;
  _$jscoverage['service.js'][17]++;
  IDResolutionJob = require("./id-resolution-job").IDResolutionJob;
  _$jscoverage['service.js'][19]++;
  base64 = require("./base64");
  _$jscoverage['service.js'][21]++;
  version = require("./version");
  _$jscoverage['service.js'][23]++;
  utils = require("./util");
  _$jscoverage['service.js'][25]++;
  to_query_string = utils.querystring;
  _$jscoverage['service.js'][27]++;
  http = require("./http");
  _$jscoverage['service.js'][29]++;
  intermine = exports;
  _$jscoverage['service.js'][31]++;
  ((withCB = utils.withCB), (map = utils.map), (merge = utils.merge), (get = utils.get), (set = utils.set), (invoke = utils.invoke), (success = utils.success), (error = utils.error), (REQUIRES_VERSION = utils.REQUIRES_VERSION), (dejoin = utils.dejoin));
  _$jscoverage['service.js'][33]++;
  VERSIONS = {};
  _$jscoverage['service.js'][35]++;
  CLASSKEYS = {};
  _$jscoverage['service.js'][37]++;
  RELEASES = {};
  _$jscoverage['service.js'][39]++;
  MODELS = {};
  _$jscoverage['service.js'][41]++;
  SUMMARY_FIELDS = {};
  _$jscoverage['service.js'][43]++;
  WIDGETS = {};
  _$jscoverage['service.js'][45]++;
  DEFAULT_PROTOCOL = "http://";
  _$jscoverage['service.js'][47]++;
  VERSION_PATH = "version";
  _$jscoverage['service.js'][49]++;
  TEMPLATES_PATH = "templates";
  _$jscoverage['service.js'][51]++;
  RELEASE_PATH = "version/release";
  _$jscoverage['service.js'][53]++;
  CLASSKEY_PATH = "classkeys";
  _$jscoverage['service.js'][55]++;
  LISTS_PATH = "lists";
  _$jscoverage['service.js'][57]++;
  MODEL_PATH = "model";
  _$jscoverage['service.js'][59]++;
  SUMMARYFIELDS_PATH = "summaryfields";
  _$jscoverage['service.js'][61]++;
  QUERY_RESULTS_PATH = "query/results";
  _$jscoverage['service.js'][63]++;
  QUICKSEARCH_PATH = "search";
  _$jscoverage['service.js'][65]++;
  WIDGETS_PATH = "widgets";
  _$jscoverage['service.js'][67]++;
  ENRICHMENT_PATH = "list/enrichment";
  _$jscoverage['service.js'][69]++;
  WITH_OBJ_PATH = "listswithobject";
  _$jscoverage['service.js'][71]++;
  LIST_OPERATION_PATHS = {union: "lists/union", intersection: "lists/intersect", difference: "lists/diff"};
  _$jscoverage['service.js'][77]++;
  SUBTRACT_PATH = "lists/subtract";
  _$jscoverage['service.js'][79]++;
  WHOAMI_PATH = "user/whoami";
  _$jscoverage['service.js'][81]++;
  TABLE_ROW_PATH = (QUERY_RESULTS_PATH + "/tablerows");
  _$jscoverage['service.js'][83]++;
  PREF_PATH = "user/preferences";
  _$jscoverage['service.js'][85]++;
  PATH_VALUES_PATH = "path/values";
  _$jscoverage['service.js'][87]++;
  HAS_PROTOCOL = /^https?:\/\//i;
  _$jscoverage['service.js'][89]++;
  HAS_SUFFIX = /service\/?$/i;
  _$jscoverage['service.js'][91]++;
  SUFFIX = "/service/";
  _$jscoverage['service.js'][93]++;
  DEFAULT_ERROR_HANDLER = (function (e) {
  _$jscoverage['service.js'][94]++;
  var f, _ref;
  _$jscoverage['service.js'][95]++;
  f = (((_ref = console.error) != null)? _ref: console.log);
  _$jscoverage['service.js'][96]++;
  return f(e);
});
  _$jscoverage['service.js'][99]++;
  _get_or_fetch = (function (propName, store, path, key, cb) {
  _$jscoverage['service.js'][100]++;
  var opts, promise, root, useCache, value, _ref;
  _$jscoverage['service.js'][101]++;
  ((root = this.root), (useCache = this.useCache));
  _$jscoverage['service.js'][102]++;
  promise = (((_ref = this[propName]) != null)? _ref: (this[propName] = ((useCache && (value = store[root]))? success(value): ((opts = {type: "GET", dataType: "json", data: {format: "json"}}), this.doReq(merge(opts, {url: (this.root + path)})).then((function (x) {
  _$jscoverage['service.js'][111]++;
  return (store[root] = x[key]);
}))))));
  _$jscoverage['service.js'][113]++;
  return withCB(cb, promise);
});
  _$jscoverage['service.js'][116]++;
  getListFinder = (function (name) {
  _$jscoverage['service.js'][117]++;
  return (function (lists) {
  _$jscoverage['service.js'][118]++;
  return new Promise((function (resolve, reject) {
  _$jscoverage['service.js'][119]++;
  var list;
  _$jscoverage['service.js'][120]++;
  if ((list = utils.find(lists, (function (l) {
  _$jscoverage['service.js'][121]++;
  return (l.name === name);
})))) {
    _$jscoverage['service.js'][123]++;
    return resolve(list);
  }
  else {
    _$jscoverage['service.js'][125]++;
    return reject(("List \"" + name + "\" not found among: " + lists.map(get("name"))));
  }
}));
});
});
  _$jscoverage['service.js'][131]++;
  LIST_PIPE = (function (service, prop) {
  _$jscoverage['service.js'][132]++;
  if ((prop == null)) {
    _$jscoverage['service.js'][133]++;
    prop = "listName";
  }
  _$jscoverage['service.js'][135]++;
  return utils.compose(service.fetchList, get(prop));
});
  _$jscoverage['service.js'][138]++;
  TO_NAMES = (function (xs) {
  _$jscoverage['service.js'][139]++;
  var x, _i, _len, _ref, _ref1, _results;
  _$jscoverage['service.js'][140]++;
  if ((xs == null)) {
    _$jscoverage['service.js'][141]++;
    xs = [];
  }
  _$jscoverage['service.js'][143]++;
  _ref = (utils.isArray(xs)? xs: [xs]);
  _$jscoverage['service.js'][144]++;
  _results = [];
  _$jscoverage['service.js'][145]++;
  for (((_i = 0), (_len = _ref.length)); (_i < _len); (_i++)) {
    _$jscoverage['service.js'][146]++;
    x = _ref[_i];
    _$jscoverage['service.js'][147]++;
    _results.push((((_ref1 = x.name) != null)? _ref1: x));
}
  _$jscoverage['service.js'][149]++;
  return _results;
});
  _$jscoverage['service.js'][152]++;
  Service = (function () {
  _$jscoverage['service.js'][153]++;
  var FIVE_MIN, getNewUserToken, toMapByName;
  _$jscoverage['service.js'][155]++;
  Service.prototype.doReq = http.doReq;
  _$jscoverage['service.js'][157]++;
  function Service(_arg) {
    _$jscoverage['service.js'][158]++;
    var noCache, _ref, _ref1, _this = this;
    _$jscoverage['service.js'][160]++;
    ((this.root = _arg.root), (this.token = _arg.token), (this.errorHandler = _arg.errorHandler), (this.DEBUG = _arg.DEBUG), (this.help = _arg.help), (noCache = _arg.noCache));
    _$jscoverage['service.js'][161]++;
    this.connectAs = __bind(this.connectAs, this);
    _$jscoverage['service.js'][163]++;
    this.createList = __bind(this.createList, this);
    _$jscoverage['service.js'][165]++;
    this.resolveIds = __bind(this.resolveIds, this);
    _$jscoverage['service.js'][167]++;
    this.query = __bind(this.query, this);
    _$jscoverage['service.js'][169]++;
    this.fetchRelease = __bind(this.fetchRelease, this);
    _$jscoverage['service.js'][171]++;
    this.fetchClassKeys = __bind(this.fetchClassKeys, this);
    _$jscoverage['service.js'][173]++;
    this.fetchVersion = __bind(this.fetchVersion, this);
    _$jscoverage['service.js'][175]++;
    this.fetchSummaryFields = __bind(this.fetchSummaryFields, this);
    _$jscoverage['service.js'][177]++;
    this.fetchModel = __bind(this.fetchModel, this);
    _$jscoverage['service.js'][179]++;
    this.fetchWidgetMap = __bind(this.fetchWidgetMap, this);
    _$jscoverage['service.js'][181]++;
    this.fetchWidgets = __bind(this.fetchWidgets, this);
    _$jscoverage['service.js'][183]++;
    this.complement = __bind(this.complement, this);
    _$jscoverage['service.js'][185]++;
    this.fetchListsContaining = __bind(this.fetchListsContaining, this);
    _$jscoverage['service.js'][187]++;
    this.fetchList = __bind(this.fetchList, this);
    _$jscoverage['service.js'][189]++;
    this.findLists = __bind(this.findLists, this);
    _$jscoverage['service.js'][191]++;
    this.fetchLists = __bind(this.fetchLists, this);
    _$jscoverage['service.js'][193]++;
    this.fetchTemplates = __bind(this.fetchTemplates, this);
    _$jscoverage['service.js'][195]++;
    this.tableRows = __bind(this.tableRows, this);
    _$jscoverage['service.js'][197]++;
    this.values = __bind(this.values, this);
    _$jscoverage['service.js'][199]++;
    this.rows = __bind(this.rows, this);
    _$jscoverage['service.js'][201]++;
    this.records = __bind(this.records, this);
    _$jscoverage['service.js'][203]++;
    this.table = __bind(this.table, this);
    _$jscoverage['service.js'][205]++;
    this.pathValues = __bind(this.pathValues, this);
    _$jscoverage['service.js'][207]++;
    this.fetchUser = __bind(this.fetchUser, this);
    _$jscoverage['service.js'][209]++;
    this.whoami = __bind(this.whoami, this);
    _$jscoverage['service.js'][211]++;
    this.findById = __bind(this.findById, this);
    _$jscoverage['service.js'][213]++;
    this.count = __bind(this.count, this);
    _$jscoverage['service.js'][215]++;
    this.enrichment = __bind(this.enrichment, this);
    _$jscoverage['service.js'][217]++;
    if ((this.root == null)) {
      _$jscoverage['service.js'][218]++;
      throw new Error("No service root provided. This is required");
    }
    _$jscoverage['service.js'][220]++;
    if ((! HAS_PROTOCOL.test(this.root))) {
      _$jscoverage['service.js'][221]++;
      this.root = (DEFAULT_PROTOCOL + this.root);
    }
    _$jscoverage['service.js'][223]++;
    if ((! HAS_SUFFIX.test(this.root))) {
      _$jscoverage['service.js'][224]++;
      this.root = (this.root + SUFFIX);
    }
    _$jscoverage['service.js'][226]++;
    this.root = this.root.replace(/ice$/, "ice/");
    _$jscoverage['service.js'][227]++;
    if (((_ref = this.errorHandler) == null)) {
      _$jscoverage['service.js'][228]++;
      this.errorHandler = DEFAULT_ERROR_HANDLER;
    }
    _$jscoverage['service.js'][230]++;
    if (((_ref1 = this.help) == null)) {
      _$jscoverage['service.js'][231]++;
      this.help = "no.help.available@dev.null";
    }
    _$jscoverage['service.js'][233]++;
    this.useCache = (! noCache);
    _$jscoverage['service.js'][234]++;
    this.getFormat = (function (intended) {
  _$jscoverage['service.js'][235]++;
  if ((intended == null)) {
    _$jscoverage['service.js'][236]++;
    intended = "json";
  }
  _$jscoverage['service.js'][238]++;
  return intended;
});
}
  _$jscoverage['service.js'][242]++;
  Service.prototype.post = (function (path, data) {
  _$jscoverage['service.js'][243]++;
  return this.makeRequest("POST", path, data);
});
  _$jscoverage['service.js'][246]++;
  Service.prototype.get = (function (path, data) {
  _$jscoverage['service.js'][247]++;
  return this.makeRequest("GET", path, data);
});
  _$jscoverage['service.js'][250]++;
  Service.prototype.makeRequest = (function (method, path, data, cb, indiv) {
  _$jscoverage['service.js'][251]++;
  var _this = this;
  _$jscoverage['service.js'][252]++;
  if ((method == null)) {
    _$jscoverage['service.js'][253]++;
    method = "GET";
  }
  _$jscoverage['service.js'][255]++;
  if ((path == null)) {
    _$jscoverage['service.js'][256]++;
    path = "";
  }
  _$jscoverage['service.js'][258]++;
  if ((data == null)) {
    _$jscoverage['service.js'][259]++;
    data = {};
  }
  _$jscoverage['service.js'][261]++;
  if ((cb == null)) {
    _$jscoverage['service.js'][262]++;
    cb = (function () {
});
  }
  _$jscoverage['service.js'][264]++;
  if ((indiv == null)) {
    _$jscoverage['service.js'][265]++;
    indiv = false;
  }
  _$jscoverage['service.js'][267]++;
  return this.fetchVersion().then((function (version) {
  _$jscoverage['service.js'][268]++;
  var dataType, errBack, opts, timeout, url, _ref, _ref1, _ref2, _ref3;
  _$jscoverage['service.js'][269]++;
  if (utils.isArray(cb)) {
    _$jscoverage['service.js'][270]++;
    ((_ref = cb), (cb = _ref[0]), (errBack = _ref[1]));
  }
  _$jscoverage['service.js'][272]++;
  if (utils.isArray(data)) {
    _$jscoverage['service.js'][273]++;
    data = utils.pairsToObj(data);
  }
  _$jscoverage['service.js'][275]++;
  url = (_this.root + path);
  _$jscoverage['service.js'][276]++;
  if ((errBack == null)) {
    _$jscoverage['service.js'][277]++;
    errBack = _this.errorHandler;
  }
  _$jscoverage['service.js'][279]++;
  data = utils.copy(data);
  _$jscoverage['service.js'][280]++;
  data.format = _this.getFormat(data.format);
  _$jscoverage['service.js'][281]++;
  if (/jsonp/.test(data.format)) {
    _$jscoverage['service.js'][282]++;
    data.method = method;
    _$jscoverage['service.js'][283]++;
    method = "GET";
    _$jscoverage['service.js'][284]++;
    url += "?callback=?";
  }
  _$jscoverage['service.js'][286]++;
  dataType = (/json/.test(data.format)? "json": "text");
  _$jscoverage['service.js'][287]++;
  if ((! http.supports(method))) {
    _$jscoverage['service.js'][288]++;
    ((_ref1 = [method, http.getMethod(method)]), (data.method = _ref1[0]), (method = _ref1[1]));
  }
  _$jscoverage['service.js'][290]++;
  opts = {data: data, dataType: dataType, success: cb, error: errBack, url: url, type: method};
  _$jscoverage['service.js'][298]++;
  if (("headers" in data)) {
    _$jscoverage['service.js'][299]++;
    opts.headers = utils.copy(data.headers);
    _$jscoverage['service.js'][300]++;
    (delete opts.data.headers);
  }
  _$jscoverage['service.js'][302]++;
  if ((_this.token != null)) {
    _$jscoverage['service.js'][303]++;
    if ((version >= 14)) {
      _$jscoverage['service.js'][304]++;
      if (((_ref2 = opts.headers) == null)) {
        _$jscoverage['service.js'][305]++;
        opts.headers = {};
      }
      _$jscoverage['service.js'][307]++;
      opts.headers.Authorization = ("Token " + _this.token);
    }
    else {
      _$jscoverage['service.js'][309]++;
      opts.data.token = _this.token;
    }
  }
  _$jscoverage['service.js'][312]++;
  if ((timeout = (((_ref3 = data.timeout) != null)? _ref3: _this.timeout))) {
    _$jscoverage['service.js'][313]++;
    opts.timeout = timeout;
    _$jscoverage['service.js'][314]++;
    (delete data.timeout);
  }
  _$jscoverage['service.js'][316]++;
  return _this.doReq(opts, indiv);
}));
});
  _$jscoverage['service.js'][320]++;
  Service.prototype.enrichment = (function (opts, cb) {
  _$jscoverage['service.js'][321]++;
  var _this = this;
  _$jscoverage['service.js'][322]++;
  return REQUIRES_VERSION(this, 8, (function () {
  _$jscoverage['service.js'][323]++;
  var req;
  _$jscoverage['service.js'][324]++;
  req = merge({maxp: 0.050000000000000003, correction: "Holm-Bonferroni"}, opts);
  _$jscoverage['service.js'][328]++;
  return _this.get(ENRICHMENT_PATH, req).then(get("results")).nodeify(cb);
}));
});
  _$jscoverage['service.js'][332]++;
  Service.prototype.search = (function (options, cb) {
  _$jscoverage['service.js'][333]++;
  var _this = this;
  _$jscoverage['service.js'][334]++;
  if ((options == null)) {
    _$jscoverage['service.js'][335]++;
    options = {};
  }
  _$jscoverage['service.js'][337]++;
  if ((cb == null)) {
    _$jscoverage['service.js'][338]++;
    cb = (function () {
});
  }
  _$jscoverage['service.js'][340]++;
  return REQUIRES_VERSION(this, 9, (function () {
  _$jscoverage['service.js'][341]++;
  var k, req, v, _ref;
  _$jscoverage['service.js'][342]++;
  if (utils.isFunction(options)) {
    _$jscoverage['service.js'][343]++;
    ((_ref = [options, {}]), (cb = _ref[0]), (options = _ref[1]));
  }
  _$jscoverage['service.js'][345]++;
  if (((typeof options) === "string")) {
    _$jscoverage['service.js'][346]++;
    req = {q: options};
  }
  else {
    _$jscoverage['service.js'][350]++;
    req = {q: options.q};
    _$jscoverage['service.js'][353]++;
    for (k in options) {
      _$jscoverage['service.js'][354]++;
      if ((! __hasProp.call(options, k))) {
        _$jscoverage['service.js'][354]++;
        continue;
      }
      _$jscoverage['service.js'][355]++;
      v = options[k];
      _$jscoverage['service.js'][356]++;
      if ((k !== "q")) {
        _$jscoverage['service.js'][357]++;
        req[("facet_" + k)] = v;
      }
}
  }
  _$jscoverage['service.js'][361]++;
  return withCB(cb, _this.post(QUICKSEARCH_PATH, req));
}));
});
  _$jscoverage['service.js'][365]++;
  Service.prototype.count = (function (q, cb) {
  _$jscoverage['service.js'][366]++;
  var p, req;
  _$jscoverage['service.js'][367]++;
  if ((cb == null)) {
    _$jscoverage['service.js'][368]++;
    cb = (function () {
});
  }
  _$jscoverage['service.js'][370]++;
  return withCB(cb, ((! q)? error("Not enough arguments"): ((q.toPathString != null)? ((p = (q.isClass()? q.append("id"): q)), this.pathValues(p, "count")): ((q.toXML != null)? ((req = {query: q.toXML(), format: "jsoncount"}), this.post(QUERY_RESULTS_PATH, req).then(get("count"))): (((typeof q) === "string")? this.fetchModel().then(invoke("makePath", q.replace(/\.\*$/, ".id"))).then(this.count): this.query(q).then(this.count))))));
});
  _$jscoverage['service.js'][376]++;
  Service.prototype.findById = (function (type, id, cb) {
  _$jscoverage['service.js'][377]++;
  return withCB(cb, this.query({from: type, select: ["**"], where: {id: id}}).then(dejoin).then(invoke("records")).then(get(0)));
});
  _$jscoverage['service.js'][386]++;
  Service.prototype.lookup = (function (type, term, context, cb) {
  _$jscoverage['service.js'][387]++;
  var _ref;
  _$jscoverage['service.js'][388]++;
  if (utils.isFunction(context)) {
    _$jscoverage['service.js'][389]++;
    ((_ref = [null, context]), (context = _ref[0]), (cb = _ref[1]));
  }
  _$jscoverage['service.js'][391]++;
  return withCB(cb, this.query({from: type, select: ["**"], where: [[type, "LOOKUP", term, context]]}).then(dejoin).then(invoke("records")));
});
  _$jscoverage['service.js'][398]++;
  Service.prototype.find = (function (type, term, context, cb) {
  _$jscoverage['service.js'][399]++;
  var _ref;
  _$jscoverage['service.js'][400]++;
  if (utils.isFunction(context)) {
    _$jscoverage['service.js'][401]++;
    ((_ref = [null, context]), (context = _ref[0]), (cb = _ref[1]));
  }
  _$jscoverage['service.js'][403]++;
  return withCB(cb, this.lookup(type, term, context).then((function (found) {
  _$jscoverage['service.js'][404]++;
  if (((! (found != null)) || (found.length === 0))) {
    _$jscoverage['service.js'][405]++;
    return error("Nothing found");
  }
  else {
    _$jscoverage['service.js'][406]++;
    if ((found.length > 1)) {
      _$jscoverage['service.js'][407]++;
      return error(("Multiple items found: " + found.slice(0, 3) + "..."));
    }
    else {
      _$jscoverage['service.js'][409]++;
      return success(found[0]);
    }
  }
})));
});
  _$jscoverage['service.js'][414]++;
  Service.prototype.whoami = (function (cb) {
  _$jscoverage['service.js'][415]++;
  var _this = this;
  _$jscoverage['service.js'][416]++;
  return REQUIRES_VERSION(this, 9, (function () {
  _$jscoverage['service.js'][417]++;
  return withCB(cb, _this.get(WHOAMI_PATH).then(get("user")).then((function (x) {
  _$jscoverage['service.js'][418]++;
  return new User(_this, x);
})));
}));
});
  _$jscoverage['service.js'][423]++;
  Service.prototype.fetchUser = (function () {
  _$jscoverage['service.js'][424]++;
  var args;
  _$jscoverage['service.js'][425]++;
  args = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['service.js'][426]++;
  return this.whoami.apply(this, args);
});
  _$jscoverage['service.js'][429]++;
  Service.prototype.pathValues = (function (path, typeConstraints, cb) {
  _$jscoverage['service.js'][430]++;
  var _this = this;
  _$jscoverage['service.js'][431]++;
  if ((typeConstraints == null)) {
    _$jscoverage['service.js'][432]++;
    typeConstraints = {};
  }
  _$jscoverage['service.js'][434]++;
  return REQUIRES_VERSION(this, 6, (function () {
  _$jscoverage['service.js'][435]++;
  var wanted, _pathValues, _ref, _ref1;
  _$jscoverage['service.js'][436]++;
  if (((typeof typeConstraints) === "string")) {
    _$jscoverage['service.js'][437]++;
    wanted = typeConstraints;
    _$jscoverage['service.js'][438]++;
    typeConstraints = {};
  }
  _$jscoverage['service.js'][440]++;
  if (utils.isFunction(typeConstraints)) {
    _$jscoverage['service.js'][441]++;
    ((_ref = [cb, typeConstraints]), (typeConstraints = _ref[0]), (cb = _ref[1]));
  }
  _$jscoverage['service.js'][443]++;
  if ((wanted !== "count")) {
    _$jscoverage['service.js'][444]++;
    wanted = "results";
  }
  _$jscoverage['service.js'][446]++;
  _pathValues = (function (path) {
  _$jscoverage['service.js'][447]++;
  var format, req;
  _$jscoverage['service.js'][448]++;
  format = ((wanted === "count")? "jsoncount": "json");
  _$jscoverage['service.js'][449]++;
  req = {format: format, path: path.toString(), typeConstraints: JSON.stringify(path.subclasses)};
  _$jscoverage['service.js'][454]++;
  return _this.post(PATH_VALUES_PATH, req).then(get(wanted));
});
  _$jscoverage['service.js'][456]++;
  try {
    _$jscoverage['service.js'][457]++;
    return withCB(cb, _this.fetchModel().then(invoke("makePath", path, (((_ref1 = path.subclasses) != null)? _ref1: typeConstraints))).then(_pathValues));
  }
  catch (e) {
    _$jscoverage['service.js'][459]++;
    return error(e);
  }
}));
});
  _$jscoverage['service.js'][464]++;
  Service.prototype.doPagedRequest = (function (q, path, page, format, cb) {
  _$jscoverage['service.js'][465]++;
  var req, _ref, _this = this;
  _$jscoverage['service.js'][467]++;
  if ((page == null)) {
    _$jscoverage['service.js'][468]++;
    page = {};
  }
  _$jscoverage['service.js'][470]++;
  if ((cb == null)) {
    _$jscoverage['service.js'][471]++;
    cb = (function () {
});
  }
  _$jscoverage['service.js'][473]++;
  if ((q.toXML != null)) {
    _$jscoverage['service.js'][474]++;
    if (utils.isFunction(page)) {
      _$jscoverage['service.js'][475]++;
      ((_ref = [page, {}]), (cb = _ref[0]), (page = _ref[1]));
    }
    _$jscoverage['service.js'][477]++;
    req = merge(page, {query: q.toXML(), format: format});
    _$jscoverage['service.js'][481]++;
    return withCB(cb, this.post(path, req).then(get("results")));
  }
  else {
    _$jscoverage['service.js'][483]++;
    return this.query(q).then((function (query) {
  _$jscoverage['service.js'][484]++;
  return _this.doPagedRequest(query, path, page, format, cb);
}));
  }
});
  _$jscoverage['service.js'][489]++;
  Service.prototype.table = (function (q, page, cb) {
  _$jscoverage['service.js'][490]++;
  return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, "jsontable", cb);
});
  _$jscoverage['service.js'][493]++;
  Service.prototype.records = (function (q, page, cb) {
  _$jscoverage['service.js'][494]++;
  return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, "jsonobjects", cb);
});
  _$jscoverage['service.js'][497]++;
  Service.prototype.rows = (function (q, page, cb) {
  _$jscoverage['service.js'][498]++;
  return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, "json", cb);
});
  _$jscoverage['service.js'][501]++;
  Service.prototype.values = (function (q, opts, cb) {
  _$jscoverage['service.js'][502]++;
  var resp, _ref, _this = this;
  _$jscoverage['service.js'][504]++;
  if (utils.isFunction(opts)) {
    _$jscoverage['service.js'][505]++;
    ((_ref = [opts, cb]), (cb = _ref[0]), (opts = _ref[1]));
  }
  _$jscoverage['service.js'][507]++;
  resp = ((! (q != null))? error("No query term supplied"): (((q.descriptors != null) || ((typeof q) === "string"))? this.pathValues(q, opts).then(map(get("value"))): ((q.toXML != null)? ((q.views.length !== 1)? error(("Expected one column, got " + q.views.length)): this.rows(q, opts).then(map(get(0)))): this.query(q).then((function (query) {
  _$jscoverage['service.js'][508]++;
  return _this.values(query, opts);
})))));
  _$jscoverage['service.js'][510]++;
  return withCB(cb, resp);
});
  _$jscoverage['service.js'][513]++;
  Service.prototype.tableRows = (function (q, page, cb) {
  _$jscoverage['service.js'][514]++;
  return this.doPagedRequest(q, TABLE_ROW_PATH, page, "json", cb);
});
  _$jscoverage['service.js'][517]++;
  Service.prototype.fetchTemplates = (function (cb) {
  _$jscoverage['service.js'][518]++;
  return this.get(TEMPLATES_PATH).then(get("templates")).done(cb);
});
  _$jscoverage['service.js'][521]++;
  Service.prototype.fetchLists = (function (cb) {
  _$jscoverage['service.js'][522]++;
  return this.findLists("", cb);
});
  _$jscoverage['service.js'][525]++;
  Service.prototype.findLists = (function (name, cb) {
  _$jscoverage['service.js'][526]++;
  var _this = this;
  _$jscoverage['service.js'][527]++;
  if ((name == null)) {
    _$jscoverage['service.js'][528]++;
    name = "";
  }
  _$jscoverage['service.js'][530]++;
  if ((cb == null)) {
    _$jscoverage['service.js'][531]++;
    cb = (function () {
});
  }
  _$jscoverage['service.js'][533]++;
  return this.fetchVersion().then((function (v) {
  _$jscoverage['service.js'][534]++;
  var fn;
  _$jscoverage['service.js'][535]++;
  return withCB(cb, ((name && (v < 13))? error(("Finding lists by name on the server requires version 13. This is only " + v)): ((fn = (function (ls) {
  _$jscoverage['service.js'][536]++;
  var data, _i, _len, _results;
  _$jscoverage['service.js'][537]++;
  _results = [];
  _$jscoverage['service.js'][538]++;
  for (((_i = 0), (_len = ls.length)); (_i < _len); (_i++)) {
    _$jscoverage['service.js'][539]++;
    data = ls[_i];
    _$jscoverage['service.js'][540]++;
    _results.push(new List(data, _this));
}
  _$jscoverage['service.js'][542]++;
  return _results;
})), _this.get(LISTS_PATH, {name: name}).then(get("lists")).then(fn))));
}));
});
  _$jscoverage['service.js'][549]++;
  Service.prototype.fetchList = (function (name, cb) {
  _$jscoverage['service.js'][550]++;
  var _this = this;
  _$jscoverage['service.js'][551]++;
  return this.fetchVersion().then((function (v) {
  _$jscoverage['service.js'][552]++;
  return withCB(cb, ((v < 13)? _this.findLists().then(getListFinder(name)): _this.findLists(name).then(get(0))));
}));
});
  _$jscoverage['service.js'][556]++;
  Service.prototype.fetchListsContaining = (function (opts, cb) {
  _$jscoverage['service.js'][557]++;
  var fn, _this = this;
  _$jscoverage['service.js'][559]++;
  fn = (function (xs) {
  _$jscoverage['service.js'][560]++;
  var x, _i, _len, _results;
  _$jscoverage['service.js'][561]++;
  _results = [];
  _$jscoverage['service.js'][562]++;
  for (((_i = 0), (_len = xs.length)); (_i < _len); (_i++)) {
    _$jscoverage['service.js'][563]++;
    x = xs[_i];
    _$jscoverage['service.js'][564]++;
    _results.push(new List(x, _this));
}
  _$jscoverage['service.js'][566]++;
  return _results;
});
  _$jscoverage['service.js'][568]++;
  return withCB(cb, this.get(WITH_OBJ_PATH, opts).then(get("lists")).then(fn));
});
  _$jscoverage['service.js'][571]++;
  Service.prototype.combineLists = (function (operation, options, cb) {
  _$jscoverage['service.js'][572]++;
  var description, lists, name, req, tags, _ref, _ref1;
  _$jscoverage['service.js'][573]++;
  ((_ref = merge({lists: [], tags: []}, options)), (name = _ref.name), (lists = _ref.lists), (tags = _ref.tags), (description = _ref.description));
  _$jscoverage['service.js'][577]++;
  req = {name: name, description: description};
  _$jscoverage['service.js'][581]++;
  if (((_ref1 = req.description) == null)) {
    _$jscoverage['service.js'][582]++;
    req.description = ("" + operation + " of " + lists.join(", "));
  }
  _$jscoverage['service.js'][584]++;
  req.tags = tags.join(";");
  _$jscoverage['service.js'][585]++;
  req.lists = lists.join(";");
  _$jscoverage['service.js'][586]++;
  return withCB(cb, this.get(LIST_OPERATION_PATHS[operation], req).then(LIST_PIPE(this)));
});
  _$jscoverage['service.js'][589]++;
  Service.prototype.merge = (function () {
  _$jscoverage['service.js'][590]++;
  return this.combineLists.apply(this, ["union"].concat(__slice.call(arguments)));
});
  _$jscoverage['service.js'][593]++;
  Service.prototype.intersect = (function () {
  _$jscoverage['service.js'][594]++;
  return this.combineLists.apply(this, ["intersection"].concat(__slice.call(arguments)));
});
  _$jscoverage['service.js'][597]++;
  Service.prototype.diff = (function () {
  _$jscoverage['service.js'][598]++;
  return this.combineLists.apply(this, ["difference"].concat(__slice.call(arguments)));
});
  _$jscoverage['service.js'][601]++;
  Service.prototype.complement = (function (options, cb) {
  _$jscoverage['service.js'][602]++;
  var defaultDesc, description, exclude, from, lists, name, references, req, tags;
  _$jscoverage['service.js'][603]++;
  if ((options == null)) {
    _$jscoverage['service.js'][604]++;
    options = {};
  }
  _$jscoverage['service.js'][606]++;
  if ((cb == null)) {
    _$jscoverage['service.js'][607]++;
    cb = (function () {
});
  }
  _$jscoverage['service.js'][609]++;
  ((from = options.from), (exclude = options.exclude), (name = options.name), (description = options.description), (tags = options.tags));
  _$jscoverage['service.js'][610]++;
  defaultDesc = (function () {
  _$jscoverage['service.js'][611]++;
  return ("Relative complement of " + lists.join(" and ") + " in " + references.join(" and "));
});
  _$jscoverage['service.js'][613]++;
  references = TO_NAMES(from);
  _$jscoverage['service.js'][614]++;
  lists = TO_NAMES(exclude);
  _$jscoverage['service.js'][615]++;
  if ((name == null)) {
    _$jscoverage['service.js'][616]++;
    name = defaultDesc();
  }
  _$jscoverage['service.js'][618]++;
  if ((description == null)) {
    _$jscoverage['service.js'][619]++;
    description = defaultDesc();
  }
  _$jscoverage['service.js'][621]++;
  if ((tags == null)) {
    _$jscoverage['service.js'][622]++;
    tags = [];
  }
  _$jscoverage['service.js'][624]++;
  req = {name: name, description: description, tags: tags, lists: lists, references: references};
  _$jscoverage['service.js'][631]++;
  return withCB(cb, this.post(SUBTRACT_PATH, req).then(LIST_PIPE(this)));
});
  _$jscoverage['service.js'][634]++;
  Service.prototype.fetchWidgets = (function (cb) {
  _$jscoverage['service.js'][635]++;
  var _this = this;
  _$jscoverage['service.js'][636]++;
  return REQUIRES_VERSION(this, 8, (function () {
  _$jscoverage['service.js'][637]++;
  return _get_or_fetch.call(_this, "widgets", WIDGETS, WIDGETS_PATH, "widgets", cb);
}));
});
  _$jscoverage['service.js'][641]++;
  toMapByName = utils.omap((function (w) {
  _$jscoverage['service.js'][642]++;
  return [w.name, w];
}));
  _$jscoverage['service.js'][645]++;
  Service.prototype.fetchWidgetMap = (function (cb) {
  _$jscoverage['service.js'][646]++;
  var _this = this;
  _$jscoverage['service.js'][647]++;
  return REQUIRES_VERSION(this, 8, (function () {
  _$jscoverage['service.js'][648]++;
  var _ref;
  _$jscoverage['service.js'][649]++;
  return withCB(cb, (((_ref = _this.__wmap__) != null)? _ref: (_this.__wmap__ = _this.fetchWidgets().then(toMapByName))));
}));
});
  _$jscoverage['service.js'][653]++;
  Service.prototype.fetchModel = (function (cb) {
  _$jscoverage['service.js'][654]++;
  return _get_or_fetch.call(this, "model", MODELS, MODEL_PATH, "model").then(Model.load).then(set({service: this})).nodeify(cb);
});
  _$jscoverage['service.js'][659]++;
  Service.prototype.fetchSummaryFields = (function (cb) {
  _$jscoverage['service.js'][660]++;
  return _get_or_fetch.call(this, "summaryFields", SUMMARY_FIELDS, SUMMARYFIELDS_PATH, "classes", cb);
});
  _$jscoverage['service.js'][663]++;
  Service.prototype.fetchVersion = (function (cb) {
  _$jscoverage['service.js'][664]++;
  return _get_or_fetch.call(this, "version", VERSIONS, VERSION_PATH, "version", cb);
});
  _$jscoverage['service.js'][667]++;
  Service.prototype.fetchClassKeys = (function (cb) {
  _$jscoverage['service.js'][668]++;
  return _get_or_fetch.call(this, "classkeys", CLASSKEYS, CLASSKEY_PATH, "classes", cb);
});
  _$jscoverage['service.js'][671]++;
  Service.prototype.fetchRelease = (function (cb) {
  _$jscoverage['service.js'][672]++;
  return _get_or_fetch.call(this, "release", RELEASES, RELEASE_PATH, "version", cb);
});
  _$jscoverage['service.js'][675]++;
  Service.prototype.query = (function (options, cb) {
  _$jscoverage['service.js'][676]++;
  var buildQuery, deps, _this = this;
  _$jscoverage['service.js'][678]++;
  deps = [this.fetchModel(), this.fetchSummaryFields()];
  _$jscoverage['service.js'][679]++;
  buildQuery = (function (_arg) {
  _$jscoverage['service.js'][680]++;
  var model, summaryFields;
  _$jscoverage['service.js'][681]++;
  ((model = _arg[0]), (summaryFields = _arg[1]));
  _$jscoverage['service.js'][682]++;
  return new Query(merge(options, {model: model, summaryFields: summaryFields}), _this);
});
  _$jscoverage['service.js'][687]++;
  return withCB(cb, Promise.all(deps).then(buildQuery));
});
  _$jscoverage['service.js'][690]++;
  Service.prototype.manageUserPreferences = (function (method, data, cb) {
  _$jscoverage['service.js'][691]++;
  var _this = this;
  _$jscoverage['service.js'][692]++;
  return REQUIRES_VERSION(this, 11, (function () {
  _$jscoverage['service.js'][693]++;
  return withCB(cb, _this.makeRequest(method, PREF_PATH, data).then(get("preferences")));
}));
});
  _$jscoverage['service.js'][697]++;
  Service.prototype.resolveIds = (function (opts, cb) {
  _$jscoverage['service.js'][698]++;
  var _this = this;
  _$jscoverage['service.js'][699]++;
  return REQUIRES_VERSION(this, 10, (function () {
  _$jscoverage['service.js'][700]++;
  var req;
  _$jscoverage['service.js'][701]++;
  req = {type: "POST", url: (_this.root + "ids"), contentType: "application/json", data: JSON.stringify(opts), dataType: "json"};
  _$jscoverage['service.js'][708]++;
  return withCB(cb, _this.doReq(req).then(get("uid")).then(IDResolutionJob.create(_this)));
}));
});
  _$jscoverage['service.js'][712]++;
  Service.prototype.createList = (function (opts, ids, cb) {
  _$jscoverage['service.js'][713]++;
  var adjust, req, _this = this;
  _$jscoverage['service.js'][715]++;
  if ((opts == null)) {
    _$jscoverage['service.js'][716]++;
    opts = {};
  }
  _$jscoverage['service.js'][718]++;
  if ((ids == null)) {
    _$jscoverage['service.js'][719]++;
    ids = "";
  }
  _$jscoverage['service.js'][721]++;
  if ((cb == null)) {
    _$jscoverage['service.js'][722]++;
    cb = (function () {
});
  }
  _$jscoverage['service.js'][724]++;
  adjust = (function (x) {
  _$jscoverage['service.js'][725]++;
  return merge(x, {token: _this.token, tags: (opts.tags || [])});
});
  _$jscoverage['service.js'][730]++;
  req = {data: (utils.isArray(ids)? ids.map((function (x) {
  _$jscoverage['service.js'][732]++;
  return ("\"" + x + "\"");
})).join("\n"): ids), dataType: "json", url: ("" + this.root + "lists?" + to_query_string(adjust(opts))), type: "POST", contentType: "text/plain"};
  _$jscoverage['service.js'][739]++;
  return withCB(cb, this.doReq(req).then(LIST_PIPE(this)));
});
  _$jscoverage['service.js'][742]++;
  getNewUserToken = (function (resp) {
  _$jscoverage['service.js'][743]++;
  return resp.user.temporaryToken;
});
  _$jscoverage['service.js'][746]++;
  Service.prototype.connectAs = (function (token) {
  _$jscoverage['service.js'][747]++;
  return Service.connect(merge(this, {token: token, noCache: (! this.useCache)}));
});
  _$jscoverage['service.js'][753]++;
  Service.prototype.register = (function (name, password, cb) {
  _$jscoverage['service.js'][754]++;
  var _this = this;
  _$jscoverage['service.js'][755]++;
  return REQUIRES_VERSION(this, 9, (function () {
  _$jscoverage['service.js'][756]++;
  return withCB(cb, _this.post("users", {name: name, password: password}).then(getNewUserToken).then(_this.connectAs));
}));
});
  _$jscoverage['service.js'][763]++;
  FIVE_MIN = 300;
  _$jscoverage['service.js'][765]++;
  Service.prototype.getDeregistrationToken = (function (validity, cb) {
  _$jscoverage['service.js'][766]++;
  var _this = this;
  _$jscoverage['service.js'][767]++;
  if ((validity == null)) {
    _$jscoverage['service.js'][768]++;
    validity = FIVE_MIN;
  }
  _$jscoverage['service.js'][770]++;
  return REQUIRES_VERSION(this, 16, (function () {
  _$jscoverage['service.js'][771]++;
  var promise;
  _$jscoverage['service.js'][772]++;
  promise = ((_this.token != null)? _this.post("user/deregistration", {validity: validity}).then(get("token")): error("Not registered"));
  _$jscoverage['service.js'][775]++;
  return withCB(cb, promise);
}));
});
  _$jscoverage['service.js'][779]++;
  Service.prototype.deregister = (function (token, cb) {
  _$jscoverage['service.js'][780]++;
  var _this = this;
  _$jscoverage['service.js'][781]++;
  return REQUIRES_VERSION(this, 16, (function () {
  _$jscoverage['service.js'][782]++;
  return withCB(cb, _this.makeRequest("DELETE", "user", {deregistrationToken: token, format: "xml"}));
}));
});
  _$jscoverage['service.js'][789]++;
  Service.prototype.login = (function (name, password, cb) {
  _$jscoverage['service.js'][790]++;
  var _this = this;
  _$jscoverage['service.js'][791]++;
  return REQUIRES_VERSION(this, 9, (function () {
  _$jscoverage['service.js'][792]++;
  var headers;
  _$jscoverage['service.js'][793]++;
  headers = {"Authorization": ("Basic " + base64.encode(("" + name + ":" + password)))};
  _$jscoverage['service.js'][796]++;
  return withCB(cb, _this.logout().then((function (service) {
  _$jscoverage['service.js'][797]++;
  return service.get("user/token", {headers: headers});
})).then(get("token")).then(_this.connectAs));
}));
});
  _$jscoverage['service.js'][804]++;
  Service.prototype.logout = (function (cb) {
  _$jscoverage['service.js'][805]++;
  return withCB(cb, success(this.connectAs()));
});
  _$jscoverage['service.js'][808]++;
  return Service;
})();
  _$jscoverage['service.js'][812]++;
  Service.prototype.rowByRow = (function () {
  _$jscoverage['service.js'][813]++;
  var args, f, q, _this = this;
  _$jscoverage['service.js'][815]++;
  ((q = arguments[0]), (args = ((2 <= arguments.length)? __slice.call(arguments, 1): [])));
  _$jscoverage['service.js'][816]++;
  f = http.iterReq("POST", QUERY_RESULTS_PATH, "json");
  _$jscoverage['service.js'][817]++;
  if ((q.toXML != null)) {
    _$jscoverage['service.js'][818]++;
    return f.apply(this, arguments);
  }
  else {
    _$jscoverage['service.js'][820]++;
    return this.query(q).then((function (query) {
  _$jscoverage['service.js'][821]++;
  return _this.rowByRow.apply(_this, [query].concat(__slice.call(args)));
}));
  }
});
  _$jscoverage['service.js'][826]++;
  Service.prototype.eachRow = Service.prototype.rowByRow;
  _$jscoverage['service.js'][828]++;
  Service.prototype.recordByRecord = (function () {
  _$jscoverage['service.js'][829]++;
  var args, f, q, _this = this;
  _$jscoverage['service.js'][831]++;
  ((q = arguments[0]), (args = ((2 <= arguments.length)? __slice.call(arguments, 1): [])));
  _$jscoverage['service.js'][832]++;
  f = http.iterReq("POST", QUERY_RESULTS_PATH, "jsonobjects");
  _$jscoverage['service.js'][833]++;
  if ((q.toXML != null)) {
    _$jscoverage['service.js'][834]++;
    return f.apply(this, arguments);
  }
  else {
    _$jscoverage['service.js'][836]++;
    return this.query(q).then((function (query) {
  _$jscoverage['service.js'][837]++;
  return _this.recordByRecord.apply(_this, [query].concat(__slice.call(args)));
}));
  }
});
  _$jscoverage['service.js'][842]++;
  Service.prototype.eachRecord = Service.prototype.recordByRecord;
  _$jscoverage['service.js'][844]++;
  Service.prototype.union = Service.prototype.merge;
  _$jscoverage['service.js'][846]++;
  Service.prototype.difference = Service.prototype.diff;
  _$jscoverage['service.js'][848]++;
  Service.prototype.symmetricDifference = Service.prototype.diff;
  _$jscoverage['service.js'][850]++;
  Service.prototype.relativeComplement = Service.prototype.complement;
  _$jscoverage['service.js'][852]++;
  Service.prototype.subtract = Service.prototype.complement;
  _$jscoverage['service.js'][854]++;
  Service.flushCaches = (function () {
  _$jscoverage['service.js'][855]++;
  MODELS = {};
  _$jscoverage['service.js'][856]++;
  VERSIONS = {};
  _$jscoverage['service.js'][857]++;
  RELEASES = {};
  _$jscoverage['service.js'][858]++;
  CLASSKEYS = {};
  _$jscoverage['service.js'][859]++;
  SUMMARY_FIELDS = {};
  _$jscoverage['service.js'][860]++;
  return (WIDGETS = {});
});
  _$jscoverage['service.js'][863]++;
  Service.connect = (function (opts) {
  _$jscoverage['service.js'][864]++;
  if ((((opts != null)? opts.root: (void 0)) == null)) {
    _$jscoverage['service.js'][865]++;
    throw new Error(("Invalid options provided: " + JSON.stringify(opts)));
  }
  _$jscoverage['service.js'][867]++;
  return new Service(opts);
});
  _$jscoverage['service.js'][870]++;
  intermine.Service = Service;
  _$jscoverage['service.js'][872]++;
  intermine.Model = Model;
  _$jscoverage['service.js'][874]++;
  intermine.Query = Query;
  _$jscoverage['service.js'][876]++;
  intermine.imjs = version;
}).call(this);

},{"./base64":1,"./http":"j+v/Vf","./id-resolution-job":2,"./lists":3,"./model":4,"./promise":6,"./query":7,"./user":10,"./util":11,"./version":12}],9:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['table.js']) {
  _$jscoverage['table.js'] = [];
  _$jscoverage['table.js'][1] = 0;
  _$jscoverage['table.js'][2] = 0;
  _$jscoverage['table.js'][4] = 0;
  _$jscoverage['table.js'][5] = 0;
  _$jscoverage['table.js'][6] = 0;
  _$jscoverage['table.js'][7] = 0;
  _$jscoverage['table.js'][8] = 0;
  _$jscoverage['table.js'][9] = 0;
  _$jscoverage['table.js'][11] = 0;
  _$jscoverage['table.js'][14] = 0;
  _$jscoverage['table.js'][16] = 0;
  _$jscoverage['table.js'][18] = 0;
  _$jscoverage['table.js'][19] = 0;
  _$jscoverage['table.js'][20] = 0;
  _$jscoverage['table.js'][21] = 0;
  _$jscoverage['table.js'][22] = 0;
  _$jscoverage['table.js'][23] = 0;
  _$jscoverage['table.js'][24] = 0;
  _$jscoverage['table.js'][25] = 0;
  _$jscoverage['table.js'][26] = 0;
  _$jscoverage['table.js'][28] = 0;
  _$jscoverage['table.js'][30] = 0;
  _$jscoverage['table.js'][31] = 0;
  _$jscoverage['table.js'][32] = 0;
  _$jscoverage['table.js'][33] = 0;
  _$jscoverage['table.js'][37] = 0;
  _$jscoverage['table.js'][38] = 0;
  _$jscoverage['table.js'][39] = 0;
  _$jscoverage['table.js'][40] = 0;
  _$jscoverage['table.js'][41] = 0;
  _$jscoverage['table.js'][42] = 0;
  _$jscoverage['table.js'][43] = 0;
  _$jscoverage['table.js'][44] = 0;
  _$jscoverage['table.js'][45] = 0;
  _$jscoverage['table.js'][47] = 0;
  _$jscoverage['table.js'][51] = 0;
  _$jscoverage['table.js'][52] = 0;
  _$jscoverage['table.js'][53] = 0;
  _$jscoverage['table.js'][56] = 0;
  _$jscoverage['table.js'][60] = 0;
}
_$jscoverage['table.js'].source = ["(function() {","  var Table, merge, properties;","","  merge = function(src, dest) {","    var k, v, _results;","    _results = [];","    for (k in src) {","      v = src[k];","      _results.push(dest[k] = v);","    }","    return _results;","  };","","  properties = ['attributes', 'references', 'collections'];","","  Table = (function() {","","    function Table(_arg) {","      var c, prop, _, _i, _len, _ref, _ref1;","      this.name = _arg.name, this.attributes = _arg.attributes, this.references = _arg.references, this.collections = _arg.collections;","      this.fields = {};","      this.__parents__ = (_ref = arguments[0]['extends']) != null ? _ref : [];","      for (_i = 0, _len = properties.length; _i &lt; _len; _i++) {","        prop = properties[_i];","        if (this[prop] == null) {","          throw new Error(\"Bad model data: missing \" + prop);","        }","        merge(this[prop], this.fields);","      }","      _ref1 = this.collections;","      for (_ in _ref1) {","        c = _ref1[_];","        c.isCollection = true;","      }","    }","","    Table.prototype.toString = function() {","      var n, _;","      return \"[Table name=\" + this.name + \", fields=[\" + ((function() {","        var _ref, _results;","        _ref = this.fields;","        _results = [];","        for (n in _ref) {","          _ = _ref[n];","          _results.push(n);","        }","        return _results;","      }).call(this)) + \"]]\";","    };","","    Table.prototype.parents = function() {","      var _ref;","      return ((_ref = this.__parents__) != null ? _ref : []).slice();","    };","","    return Table;","","  })();","","  exports.Table = Table;","","}).call(this);"];
_$jscoverage['table.js'][1]++;
(function () {
  _$jscoverage['table.js'][2]++;
  var Table, merge, properties;
  _$jscoverage['table.js'][4]++;
  merge = (function (src, dest) {
  _$jscoverage['table.js'][5]++;
  var k, v, _results;
  _$jscoverage['table.js'][6]++;
  _results = [];
  _$jscoverage['table.js'][7]++;
  for (k in src) {
    _$jscoverage['table.js'][8]++;
    v = src[k];
    _$jscoverage['table.js'][9]++;
    _results.push((dest[k] = v));
}
  _$jscoverage['table.js'][11]++;
  return _results;
});
  _$jscoverage['table.js'][14]++;
  properties = ["attributes", "references", "collections"];
  _$jscoverage['table.js'][16]++;
  Table = (function () {
  _$jscoverage['table.js'][18]++;
  function Table(_arg) {
    _$jscoverage['table.js'][19]++;
    var c, prop, _, _i, _len, _ref, _ref1;
    _$jscoverage['table.js'][20]++;
    ((this.name = _arg.name), (this.attributes = _arg.attributes), (this.references = _arg.references), (this.collections = _arg.collections));
    _$jscoverage['table.js'][21]++;
    this.fields = {};
    _$jscoverage['table.js'][22]++;
    this.__parents__ = (((_ref = arguments[0]["extends"]) != null)? _ref: []);
    _$jscoverage['table.js'][23]++;
    for (((_i = 0), (_len = properties.length)); (_i < _len); (_i++)) {
      _$jscoverage['table.js'][24]++;
      prop = properties[_i];
      _$jscoverage['table.js'][25]++;
      if ((this[prop] == null)) {
        _$jscoverage['table.js'][26]++;
        throw new Error(("Bad model data: missing " + prop));
      }
      _$jscoverage['table.js'][28]++;
      merge(this[prop], this.fields);
}
    _$jscoverage['table.js'][30]++;
    _ref1 = this.collections;
    _$jscoverage['table.js'][31]++;
    for (_ in _ref1) {
      _$jscoverage['table.js'][32]++;
      c = _ref1[_];
      _$jscoverage['table.js'][33]++;
      c.isCollection = true;
}
}
  _$jscoverage['table.js'][37]++;
  Table.prototype.toString = (function () {
  _$jscoverage['table.js'][38]++;
  var n, _;
  _$jscoverage['table.js'][39]++;
  return ("[Table name=" + this.name + ", fields=[" + (function () {
  _$jscoverage['table.js'][40]++;
  var _ref, _results;
  _$jscoverage['table.js'][41]++;
  _ref = this.fields;
  _$jscoverage['table.js'][42]++;
  _results = [];
  _$jscoverage['table.js'][43]++;
  for (n in _ref) {
    _$jscoverage['table.js'][44]++;
    _ = _ref[n];
    _$jscoverage['table.js'][45]++;
    _results.push(n);
}
  _$jscoverage['table.js'][47]++;
  return _results;
}).call(this) + "]]");
});
  _$jscoverage['table.js'][51]++;
  Table.prototype.parents = (function () {
  _$jscoverage['table.js'][52]++;
  var _ref;
  _$jscoverage['table.js'][53]++;
  return (((_ref = this.__parents__) != null)? _ref: []).slice();
});
  _$jscoverage['table.js'][56]++;
  return Table;
})();
  _$jscoverage['table.js'][60]++;
  exports.Table = Table;
}).call(this);

},{}],10:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['user.js']) {
  _$jscoverage['user.js'] = [];
  _$jscoverage['user.js'][1] = 0;
  _$jscoverage['user.js'][2] = 0;
  _$jscoverage['user.js'][3] = 0;
  _$jscoverage['user.js'][5] = 0;
  _$jscoverage['user.js'][7] = 0;
  _$jscoverage['user.js'][9] = 0;
  _$jscoverage['user.js'][10] = 0;
  _$jscoverage['user.js'][11] = 0;
  _$jscoverage['user.js'][15] = 0;
  _$jscoverage['user.js'][17] = 0;
  _$jscoverage['user.js'][18] = 0;
  _$jscoverage['user.js'][19] = 0;
  _$jscoverage['user.js'][20] = 0;
  _$jscoverage['user.js'][21] = 0;
  _$jscoverage['user.js'][23] = 0;
  _$jscoverage['user.js'][25] = 0;
  _$jscoverage['user.js'][27] = 0;
  _$jscoverage['user.js'][29] = 0;
  _$jscoverage['user.js'][31] = 0;
  _$jscoverage['user.js'][32] = 0;
  _$jscoverage['user.js'][33] = 0;
  _$jscoverage['user.js'][37] = 0;
  _$jscoverage['user.js'][38] = 0;
  _$jscoverage['user.js'][39] = 0;
  _$jscoverage['user.js'][40] = 0;
  _$jscoverage['user.js'][42] = 0;
  _$jscoverage['user.js'][43] = 0;
  _$jscoverage['user.js'][44] = 0;
  _$jscoverage['user.js'][45] = 0;
  _$jscoverage['user.js'][46] = 0;
  _$jscoverage['user.js'][48] = 0;
  _$jscoverage['user.js'][50] = 0;
  _$jscoverage['user.js'][53] = 0;
  _$jscoverage['user.js'][54] = 0;
  _$jscoverage['user.js'][57] = 0;
  _$jscoverage['user.js'][58] = 0;
  _$jscoverage['user.js'][63] = 0;
  _$jscoverage['user.js'][64] = 0;
  _$jscoverage['user.js'][67] = 0;
  _$jscoverage['user.js'][68] = 0;
  _$jscoverage['user.js'][71] = 0;
  _$jscoverage['user.js'][72] = 0;
  _$jscoverage['user.js'][73] = 0;
  _$jscoverage['user.js'][75] = 0;
  _$jscoverage['user.js'][76] = 0;
  _$jscoverage['user.js'][78] = 0;
  _$jscoverage['user.js'][83] = 0;
  _$jscoverage['user.js'][87] = 0;
}
_$jscoverage['user.js'].source = ["(function() {","  var User, do_pref_req, error, get, intermine, isFunction, withCB, _ref,","    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };","","  _ref = require('./util'), withCB = _ref.withCB, get = _ref.get, isFunction = _ref.isFunction, error = _ref.error;","","  intermine = exports;","","  do_pref_req = function(user, data, method, cb) {","    return user.service.manageUserPreferences(method, data, cb).then(function(prefs) {","      return user.preferences = prefs;","    });","  };","","  User = (function() {","","    function User(service, _arg) {","      var _ref1;","      this.service = service;","      this.username = _arg.username, this.preferences = _arg.preferences;","      this.refresh = __bind(this.refresh, this);","","      this.clearPreferences = __bind(this.clearPreferences, this);","","      this.clearPreference = __bind(this.clearPreference, this);","","      this.setPreferences = __bind(this.setPreferences, this);","","      this.setPreference = __bind(this.setPreference, this);","","      this.hasPreferences = this.preferences != null;","      if ((_ref1 = this.preferences) == null) {","        this.preferences = {};","      }","    }","","    User.prototype.setPreference = function(key, value, cb) {","      var data, _ref1;","      if (isFunction(value)) {","        _ref1 = [null, value], value = _ref1[0], cb = _ref1[1];","      }","      if (typeof key === 'string') {","        data = {};","        data[key] = value;","      } else if (!(value != null)) {","        data = key;","      } else {","        return withCB(cb, error(\"Incorrect arguments to setPreference\"));","      }","      return this.setPreferences(data, cb);","    };","","    User.prototype.setPreferences = function(prefs, cb) {","      return do_pref_req(this, prefs, 'POST', cb);","    };","","    User.prototype.clearPreference = function(key, cb) {","      return do_pref_req(this, {","        key: key","      }, 'DELETE', cb);","    };","","    User.prototype.clearPreferences = function(cb) {","      return do_pref_req(this, {}, 'DELETE', cb);","    };","","    User.prototype.refresh = function(cb) {","      return do_pref_req(this, {}, 'GET', cb);","    };","","    User.prototype.getToken = function(type, cb) {","      if (type == null) {","        type = 'day';","      }","      if (cb == null) {","        cb = null;","      }","      return withCB(cb, this.service.get('user/token', {","        type: type","      }).then(get('token')));","    };","","    return User;","","  })();","","  intermine.User = User;","","}).call(this);"];
_$jscoverage['user.js'][1]++;
(function () {
  _$jscoverage['user.js'][2]++;
  var User, do_pref_req, error, get, intermine, isFunction, withCB, _ref, __bind = (function (fn, me) {
  _$jscoverage['user.js'][3]++;
  return (function () {
  _$jscoverage['user.js'][3]++;
  return fn.apply(me, arguments);
});
});
  _$jscoverage['user.js'][5]++;
  ((_ref = require("./util")), (withCB = _ref.withCB), (get = _ref.get), (isFunction = _ref.isFunction), (error = _ref.error));
  _$jscoverage['user.js'][7]++;
  intermine = exports;
  _$jscoverage['user.js'][9]++;
  do_pref_req = (function (user, data, method, cb) {
  _$jscoverage['user.js'][10]++;
  return user.service.manageUserPreferences(method, data, cb).then((function (prefs) {
  _$jscoverage['user.js'][11]++;
  return (user.preferences = prefs);
}));
});
  _$jscoverage['user.js'][15]++;
  User = (function () {
  _$jscoverage['user.js'][17]++;
  function User(service, _arg) {
    _$jscoverage['user.js'][18]++;
    var _ref1;
    _$jscoverage['user.js'][19]++;
    this.service = service;
    _$jscoverage['user.js'][20]++;
    ((this.username = _arg.username), (this.preferences = _arg.preferences));
    _$jscoverage['user.js'][21]++;
    this.refresh = __bind(this.refresh, this);
    _$jscoverage['user.js'][23]++;
    this.clearPreferences = __bind(this.clearPreferences, this);
    _$jscoverage['user.js'][25]++;
    this.clearPreference = __bind(this.clearPreference, this);
    _$jscoverage['user.js'][27]++;
    this.setPreferences = __bind(this.setPreferences, this);
    _$jscoverage['user.js'][29]++;
    this.setPreference = __bind(this.setPreference, this);
    _$jscoverage['user.js'][31]++;
    this.hasPreferences = (this.preferences != null);
    _$jscoverage['user.js'][32]++;
    if (((_ref1 = this.preferences) == null)) {
      _$jscoverage['user.js'][33]++;
      this.preferences = {};
    }
}
  _$jscoverage['user.js'][37]++;
  User.prototype.setPreference = (function (key, value, cb) {
  _$jscoverage['user.js'][38]++;
  var data, _ref1;
  _$jscoverage['user.js'][39]++;
  if (isFunction(value)) {
    _$jscoverage['user.js'][40]++;
    ((_ref1 = [null, value]), (value = _ref1[0]), (cb = _ref1[1]));
  }
  _$jscoverage['user.js'][42]++;
  if (((typeof key) === "string")) {
    _$jscoverage['user.js'][43]++;
    data = {};
    _$jscoverage['user.js'][44]++;
    data[key] = value;
  }
  else {
    _$jscoverage['user.js'][45]++;
    if ((! (value != null))) {
      _$jscoverage['user.js'][46]++;
      data = key;
    }
    else {
      _$jscoverage['user.js'][48]++;
      return withCB(cb, error("Incorrect arguments to setPreference"));
    }
  }
  _$jscoverage['user.js'][50]++;
  return this.setPreferences(data, cb);
});
  _$jscoverage['user.js'][53]++;
  User.prototype.setPreferences = (function (prefs, cb) {
  _$jscoverage['user.js'][54]++;
  return do_pref_req(this, prefs, "POST", cb);
});
  _$jscoverage['user.js'][57]++;
  User.prototype.clearPreference = (function (key, cb) {
  _$jscoverage['user.js'][58]++;
  return do_pref_req(this, {key: key}, "DELETE", cb);
});
  _$jscoverage['user.js'][63]++;
  User.prototype.clearPreferences = (function (cb) {
  _$jscoverage['user.js'][64]++;
  return do_pref_req(this, {}, "DELETE", cb);
});
  _$jscoverage['user.js'][67]++;
  User.prototype.refresh = (function (cb) {
  _$jscoverage['user.js'][68]++;
  return do_pref_req(this, {}, "GET", cb);
});
  _$jscoverage['user.js'][71]++;
  User.prototype.getToken = (function (type, cb) {
  _$jscoverage['user.js'][72]++;
  if ((type == null)) {
    _$jscoverage['user.js'][73]++;
    type = "day";
  }
  _$jscoverage['user.js'][75]++;
  if ((cb == null)) {
    _$jscoverage['user.js'][76]++;
    cb = null;
  }
  _$jscoverage['user.js'][78]++;
  return withCB(cb, this.service.get("user/token", {type: type}).then(get("token")));
});
  _$jscoverage['user.js'][83]++;
  return User;
})();
  _$jscoverage['user.js'][87]++;
  intermine.User = User;
}).call(this);

},{"./util":11}],11:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['util.js']) {
  _$jscoverage['util.js'] = [];
  _$jscoverage['util.js'][1] = 0;
  _$jscoverage['util.js'][2] = 0;
  _$jscoverage['util.js'][4] = 0;
  _$jscoverage['util.js'][7] = 0;
  _$jscoverage['util.js'][9] = 0;
  _$jscoverage['util.js'][11] = 0;
  _$jscoverage['util.js'][12] = 0;
  _$jscoverage['util.js'][13] = 0;
  _$jscoverage['util.js'][14] = 0;
  _$jscoverage['util.js'][15] = 0;
  _$jscoverage['util.js'][16] = 0;
  _$jscoverage['util.js'][18] = 0;
  _$jscoverage['util.js'][21] = 0;
  _$jscoverage['util.js'][22] = 0;
  _$jscoverage['util.js'][23] = 0;
  _$jscoverage['util.js'][24] = 0;
  _$jscoverage['util.js'][25] = 0;
  _$jscoverage['util.js'][26] = 0;
  _$jscoverage['util.js'][27] = 0;
  _$jscoverage['util.js'][28] = 0;
  _$jscoverage['util.js'][30] = 0;
  _$jscoverage['util.js'][34] = 0;
  _$jscoverage['util.js'][35] = 0;
  _$jscoverage['util.js'][36] = 0;
  _$jscoverage['util.js'][37] = 0;
  _$jscoverage['util.js'][39] = 0;
  _$jscoverage['util.js'][40] = 0;
  _$jscoverage['util.js'][41] = 0;
  _$jscoverage['util.js'][42] = 0;
  _$jscoverage['util.js'][43] = 0;
  _$jscoverage['util.js'][44] = 0;
  _$jscoverage['util.js'][45] = 0;
  _$jscoverage['util.js'][46] = 0;
  _$jscoverage['util.js'][47] = 0;
  _$jscoverage['util.js'][48] = 0;
  _$jscoverage['util.js'][50] = 0;
  _$jscoverage['util.js'][52] = 0;
  _$jscoverage['util.js'][54] = 0;
  _$jscoverage['util.js'][58] = 0;
  _$jscoverage['util.js'][59] = 0;
  _$jscoverage['util.js'][60] = 0;
  _$jscoverage['util.js'][61] = 0;
  _$jscoverage['util.js'][62] = 0;
  _$jscoverage['util.js'][63] = 0;
  _$jscoverage['util.js'][64] = 0;
  _$jscoverage['util.js'][67] = 0;
  _$jscoverage['util.js'][71] = 0;
  _$jscoverage['util.js'][72] = 0;
  _$jscoverage['util.js'][73] = 0;
  _$jscoverage['util.js'][74] = 0;
  _$jscoverage['util.js'][75] = 0;
  _$jscoverage['util.js'][76] = 0;
  _$jscoverage['util.js'][77] = 0;
  _$jscoverage['util.js'][81] = 0;
  _$jscoverage['util.js'][82] = 0;
  _$jscoverage['util.js'][83] = 0;
  _$jscoverage['util.js'][87] = 0;
  _$jscoverage['util.js'][89] = 0;
  _$jscoverage['util.js'][91] = 0;
  _$jscoverage['util.js'][92] = 0;
  _$jscoverage['util.js'][93] = 0;
  _$jscoverage['util.js'][94] = 0;
  _$jscoverage['util.js'][95] = 0;
  _$jscoverage['util.js'][96] = 0;
  _$jscoverage['util.js'][97] = 0;
  _$jscoverage['util.js'][98] = 0;
  _$jscoverage['util.js'][99] = 0;
  _$jscoverage['util.js'][100] = 0;
  _$jscoverage['util.js'][102] = 0;
  _$jscoverage['util.js'][103] = 0;
  _$jscoverage['util.js'][105] = 0;
  _$jscoverage['util.js'][109] = 0;
  _$jscoverage['util.js'][112] = 0;
  _$jscoverage['util.js'][113] = 0;
  _$jscoverage['util.js'][114] = 0;
  _$jscoverage['util.js'][115] = 0;
  _$jscoverage['util.js'][116] = 0;
  _$jscoverage['util.js'][117] = 0;
  _$jscoverage['util.js'][119] = 0;
  _$jscoverage['util.js'][120] = 0;
  _$jscoverage['util.js'][122] = 0;
  _$jscoverage['util.js'][123] = 0;
  _$jscoverage['util.js'][125] = 0;
  _$jscoverage['util.js'][126] = 0;
  _$jscoverage['util.js'][127] = 0;
  _$jscoverage['util.js'][128] = 0;
  _$jscoverage['util.js'][132] = 0;
  _$jscoverage['util.js'][137] = 0;
  _$jscoverage['util.js'][138] = 0;
  _$jscoverage['util.js'][139] = 0;
  _$jscoverage['util.js'][140] = 0;
  _$jscoverage['util.js'][142] = 0;
  _$jscoverage['util.js'][147] = 0;
  _$jscoverage['util.js'][148] = 0;
  _$jscoverage['util.js'][149] = 0;
  _$jscoverage['util.js'][150] = 0;
  _$jscoverage['util.js'][151] = 0;
  _$jscoverage['util.js'][152] = 0;
  _$jscoverage['util.js'][153] = 0;
  _$jscoverage['util.js'][154] = 0;
  _$jscoverage['util.js'][157] = 0;
  _$jscoverage['util.js'][161] = 0;
  _$jscoverage['util.js'][162] = 0;
  _$jscoverage['util.js'][163] = 0;
  _$jscoverage['util.js'][164] = 0;
  _$jscoverage['util.js'][166] = 0;
  _$jscoverage['util.js'][167] = 0;
  _$jscoverage['util.js'][168] = 0;
  _$jscoverage['util.js'][169] = 0;
  _$jscoverage['util.js'][171] = 0;
  _$jscoverage['util.js'][172] = 0;
  _$jscoverage['util.js'][173] = 0;
  _$jscoverage['util.js'][174] = 0;
  _$jscoverage['util.js'][175] = 0;
  _$jscoverage['util.js'][176] = 0;
  _$jscoverage['util.js'][179] = 0;
  _$jscoverage['util.js'][182] = 0;
  _$jscoverage['util.js'][183] = 0;
  _$jscoverage['util.js'][184] = 0;
  _$jscoverage['util.js'][185] = 0;
  _$jscoverage['util.js'][186] = 0;
  _$jscoverage['util.js'][187] = 0;
  _$jscoverage['util.js'][190] = 0;
  _$jscoverage['util.js'][191] = 0;
  _$jscoverage['util.js'][192] = 0;
  _$jscoverage['util.js'][193] = 0;
  _$jscoverage['util.js'][196] = 0;
  _$jscoverage['util.js'][199] = 0;
  _$jscoverage['util.js'][200] = 0;
  _$jscoverage['util.js'][203] = 0;
  _$jscoverage['util.js'][205] = 0;
  _$jscoverage['util.js'][206] = 0;
  _$jscoverage['util.js'][208] = 0;
  _$jscoverage['util.js'][211] = 0;
  _$jscoverage['util.js'][219] = 0;
  _$jscoverage['util.js'][220] = 0;
  _$jscoverage['util.js'][221] = 0;
  _$jscoverage['util.js'][223] = 0;
  _$jscoverage['util.js'][224] = 0;
  _$jscoverage['util.js'][228] = 0;
  _$jscoverage['util.js'][229] = 0;
  _$jscoverage['util.js'][230] = 0;
  _$jscoverage['util.js'][231] = 0;
  _$jscoverage['util.js'][232] = 0;
  _$jscoverage['util.js'][233] = 0;
  _$jscoverage['util.js'][234] = 0;
  _$jscoverage['util.js'][236] = 0;
  _$jscoverage['util.js'][237] = 0;
  _$jscoverage['util.js'][241] = 0;
  _$jscoverage['util.js'][242] = 0;
  _$jscoverage['util.js'][245] = 0;
  _$jscoverage['util.js'][246] = 0;
  _$jscoverage['util.js'][247] = 0;
  _$jscoverage['util.js'][248] = 0;
  _$jscoverage['util.js'][249] = 0;
  _$jscoverage['util.js'][250] = 0;
  _$jscoverage['util.js'][251] = 0;
  _$jscoverage['util.js'][252] = 0;
  _$jscoverage['util.js'][254] = 0;
  _$jscoverage['util.js'][257] = 0;
  _$jscoverage['util.js'][261] = 0;
  _$jscoverage['util.js'][262] = 0;
  _$jscoverage['util.js'][265] = 0;
  _$jscoverage['util.js'][266] = 0;
  _$jscoverage['util.js'][267] = 0;
  _$jscoverage['util.js'][268] = 0;
  _$jscoverage['util.js'][269] = 0;
  _$jscoverage['util.js'][270] = 0;
  _$jscoverage['util.js'][271] = 0;
  _$jscoverage['util.js'][272] = 0;
  _$jscoverage['util.js'][274] = 0;
  _$jscoverage['util.js'][278] = 0;
  _$jscoverage['util.js'][279] = 0;
  _$jscoverage['util.js'][282] = 0;
  _$jscoverage['util.js'][283] = 0;
  _$jscoverage['util.js'][284] = 0;
  _$jscoverage['util.js'][285] = 0;
  _$jscoverage['util.js'][286] = 0;
  _$jscoverage['util.js'][290] = 0;
  _$jscoverage['util.js'][291] = 0;
  _$jscoverage['util.js'][292] = 0;
  _$jscoverage['util.js'][293] = 0;
  _$jscoverage['util.js'][296] = 0;
  _$jscoverage['util.js'][298] = 0;
  _$jscoverage['util.js'][299] = 0;
  _$jscoverage['util.js'][300] = 0;
  _$jscoverage['util.js'][301] = 0;
  _$jscoverage['util.js'][302] = 0;
  _$jscoverage['util.js'][303] = 0;
  _$jscoverage['util.js'][304] = 0;
  _$jscoverage['util.js'][307] = 0;
  _$jscoverage['util.js'][310] = 0;
  _$jscoverage['util.js'][311] = 0;
  _$jscoverage['util.js'][312] = 0;
  _$jscoverage['util.js'][314] = 0;
  _$jscoverage['util.js'][318] = 0;
  _$jscoverage['util.js'][319] = 0;
  _$jscoverage['util.js'][320] = 0;
  _$jscoverage['util.js'][321] = 0;
  _$jscoverage['util.js'][322] = 0;
  _$jscoverage['util.js'][323] = 0;
  _$jscoverage['util.js'][324] = 0;
  _$jscoverage['util.js'][325] = 0;
  _$jscoverage['util.js'][326] = 0;
  _$jscoverage['util.js'][327] = 0;
  _$jscoverage['util.js'][328] = 0;
  _$jscoverage['util.js'][331] = 0;
  _$jscoverage['util.js'][334] = 0;
  _$jscoverage['util.js'][337] = 0;
  _$jscoverage['util.js'][339] = 0;
  _$jscoverage['util.js'][340] = 0;
  _$jscoverage['util.js'][341] = 0;
  _$jscoverage['util.js'][342] = 0;
  _$jscoverage['util.js'][343] = 0;
  _$jscoverage['util.js'][344] = 0;
  _$jscoverage['util.js'][345] = 0;
  _$jscoverage['util.js'][346] = 0;
  _$jscoverage['util.js'][347] = 0;
  _$jscoverage['util.js'][348] = 0;
  _$jscoverage['util.js'][351] = 0;
  _$jscoverage['util.js'][354] = 0;
  _$jscoverage['util.js'][355] = 0;
  _$jscoverage['util.js'][356] = 0;
  _$jscoverage['util.js'][357] = 0;
  _$jscoverage['util.js'][359] = 0;
  _$jscoverage['util.js'][360] = 0;
  _$jscoverage['util.js'][361] = 0;
  _$jscoverage['util.js'][362] = 0;
  _$jscoverage['util.js'][365] = 0;
  _$jscoverage['util.js'][368] = 0;
  _$jscoverage['util.js'][369] = 0;
  _$jscoverage['util.js'][370] = 0;
  _$jscoverage['util.js'][371] = 0;
  _$jscoverage['util.js'][374] = 0;
  _$jscoverage['util.js'][375] = 0;
  _$jscoverage['util.js'][376] = 0;
  _$jscoverage['util.js'][378] = 0;
  _$jscoverage['util.js'][379] = 0;
  _$jscoverage['util.js'][381] = 0;
  _$jscoverage['util.js'][382] = 0;
  _$jscoverage['util.js'][383] = 0;
  _$jscoverage['util.js'][385] = 0;
  _$jscoverage['util.js'][386] = 0;
  _$jscoverage['util.js'][388] = 0;
  _$jscoverage['util.js'][393] = 0;
  _$jscoverage['util.js'][394] = 0;
  _$jscoverage['util.js'][395] = 0;
  _$jscoverage['util.js'][399] = 0;
  _$jscoverage['util.js'][400] = 0;
  _$jscoverage['util.js'][401] = 0;
  _$jscoverage['util.js'][402] = 0;
  _$jscoverage['util.js'][403] = 0;
  _$jscoverage['util.js'][405] = 0;
  _$jscoverage['util.js'][406] = 0;
  _$jscoverage['util.js'][407] = 0;
  _$jscoverage['util.js'][408] = 0;
  _$jscoverage['util.js'][411] = 0;
  _$jscoverage['util.js'][415] = 0;
  _$jscoverage['util.js'][416] = 0;
  _$jscoverage['util.js'][419] = 0;
  _$jscoverage['util.js'][420] = 0;
  _$jscoverage['util.js'][421] = 0;
  _$jscoverage['util.js'][422] = 0;
  _$jscoverage['util.js'][424] = 0;
  _$jscoverage['util.js'][429] = 0;
  _$jscoverage['util.js'][430] = 0;
  _$jscoverage['util.js'][431] = 0;
  _$jscoverage['util.js'][432] = 0;
  _$jscoverage['util.js'][433] = 0;
  _$jscoverage['util.js'][434] = 0;
  _$jscoverage['util.js'][435] = 0;
  _$jscoverage['util.js'][436] = 0;
  _$jscoverage['util.js'][439] = 0;
  _$jscoverage['util.js'][442] = 0;
  _$jscoverage['util.js'][443] = 0;
  _$jscoverage['util.js'][446] = 0;
  _$jscoverage['util.js'][447] = 0;
  _$jscoverage['util.js'][448] = 0;
  _$jscoverage['util.js'][449] = 0;
  _$jscoverage['util.js'][452] = 0;
  _$jscoverage['util.js'][453] = 0;
  _$jscoverage['util.js'][454] = 0;
  _$jscoverage['util.js'][455] = 0;
  _$jscoverage['util.js'][456] = 0;
  _$jscoverage['util.js'][458] = 0;
  _$jscoverage['util.js'][459] = 0;
  _$jscoverage['util.js'][462] = 0;
  _$jscoverage['util.js'][463] = 0;
}
_$jscoverage['util.js'].source = ["(function() {","  var Promise, REQUIRES, comp, curry, entities, error, flatten, fold, id, invoke, invokeWith, isArray, merge, pairFold, qsFromList, root, success, thenFold, _ref,","    __slice = [].slice,","    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i &lt; l; i++) { if (i in this &amp;&amp; this[i] === item) return i; } return -1; },","    __hasProp = {}.hasOwnProperty;","","  Promise = require('./promise');","","  root = exports;","","  root.defer = function() {","    var deferred;","    deferred = {};","    deferred.promise = new Promise(function(resolve, reject) {","      deferred.resolve = resolve;","      return deferred.reject = reject;","    });","    return deferred;","  };","","  qsFromList = function(pairs) {","    var pair;","    return ((function() {","      var _i, _len, _results;","      _results = [];","      for (_i = 0, _len = pairs.length; _i &lt; _len; _i++) {","        pair = pairs[_i];","        _results.push(pair.map(encodeURIComponent).join('='));","      }","      return _results;","    })()).join('&amp;');","  };","","  root.querystring = function(obj) {","    var k, p, pairs, subList, sv, v;","    if (isArray(obj)) {","      pairs = obj.slice();","    } else {","      pairs = [];","      for (k in obj) {","        v = obj[k];","        if (isArray(v)) {","          subList = (function() {","            var _i, _len, _results;","            _results = [];","            for (_i = 0, _len = v.length; _i &lt; _len; _i++) {","              sv = v[_i];","              _results.push([k, sv]);","            }","            return _results;","          })();","          pairs = pairs.concat(subList);","        } else {","          pairs.push([k, v]);","        }","      }","    }","    return qsFromList((function() {","      var _i, _len, _results;","      _results = [];","      for (_i = 0, _len = pairs.length; _i &lt; _len; _i++) {","        p = pairs[_i];","        if (p[1] != null) {","          _results.push(p);","        }","      }","      return _results;","    })());","  };","","  root.curry = curry = function() {","    var args, f;","    f = arguments[0], args = 2 &lt;= arguments.length ? __slice.call(arguments, 1) : [];","    return function() {","      var rest;","      rest = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","      return f.apply(null, args.concat(rest));","    };","  };","","  root.error = error = function(e) {","    return new Promise(function(_, reject) {","      return reject(new Error(e));","    });","  };","","  root.success = success = Promise.from;","","  root.parallel = Promise.all;","","  root.withCB = function() {","    var f, fs, p, _i, _j, _len;","    fs = 2 &lt;= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), p = arguments[_i++];","    for (_j = 0, _len = fs.length; _j &lt; _len; _j++) {","      f = fs[_j];","      if (f != null) {","        (function(f) {","          var onErr, onSucc;","          onSucc = function(res) {","            return f(null, res);","          };","          onErr = function(err) {","            return f(err);","          };","          return p.then(onSucc, onErr);","        })(f);","      }","    }","    return p;","  };","","  root.fold = fold = function(f) {","    return function(init, xs) {","      var k, ret, v;","      if (arguments.length === 1) {","        xs = (init != null ? init.slice() : void 0) || init;","        init = (xs != null ? xs.shift() : void 0) || {};","      }","      if (xs == null) {","        throw new Error(\"xs is null\");","      }","      if (xs.reduce != null) {","        return xs.reduce(f, init);","      } else {","        ret = init;","        for (k in xs) {","          v = xs[k];","          ret = ret != null ? f(ret, k, v) : {","            k: v","          };","        }","        return ret;","      }","    };","  };","","  root.take = function(n) {","    return function(xs) {","      if (n != null) {","        return xs.slice(0, (n - 1) + 1 || 9e9);","      } else {","        return xs.slice();","      }","    };","  };","","  root.filter = function(f) {","    return function(xs) {","      var x, _i, _len, _results;","      _results = [];","      for (_i = 0, _len = xs.length; _i &lt; _len; _i++) {","        x = xs[_i];","        if (f(x)) {","          _results.push(x);","        }","      }","      return _results;","    };","  };","","  root.uniqBy = function(f, xs) {","    var k, keys, values, x, _i, _len;","    if (arguments.length === 1) {","      return curry(root.uniqBy, f);","    }","    keys = [];","    values = [];","    if (xs == null) {","      return values;","    }","    for (_i = 0, _len = xs.length; _i &lt; _len; _i++) {","      x = xs[_i];","      k = f(x);","      if (__indexOf.call(keys, k) &lt; 0) {","        keys.push(k);","        values.push(x);","      }","    }","    return values;","  };","","  root.find = function(xs, f) {","    var x, _i, _len;","    if (arguments.length === 1) {","      f = xs;","      return function(xs) {","        return root.find(xs, f);","      };","    }","    for (_i = 0, _len = xs.length; _i &lt; _len; _i++) {","      x = xs[_i];","      if (f(x)) {","        return x;","      }","    }","    return null;","  };","","  isArray = (_ref = Array.isArray) != null ? _ref : function(xs) {","    return ((xs != null ? xs.splice : void 0) != null) &amp;&amp; ((xs != null ? xs.push : void 0) != null) &amp;&amp; ((xs != null ? xs.pop : void 0) != null) &amp;&amp; ((xs != null ? xs.slice : void 0) != null);","  };","","  root.isArray = isArray;","","  root.isFunction = typeof /./ !== 'function' ? function(f) {","    return typeof f === 'function';","  } : function(f) {","    return (f != null) &amp;&amp; (f.call != null) &amp;&amp; (f.apply != null) &amp;&amp; f.toString() === '[object Function]';","  };","","  entities = {","    '&amp;': '&amp;amp;',","    '&lt;': '&amp;lt;',","    '&gt;': '&amp;gt;',","    '\"': '&amp;quot;',","    \"'\": '&amp;#x27;'","  };","","  root.escape = function(str) {","    if (!(str != null)) {","      return '';","    }","    return String(str).replace(/[&amp;&lt;&gt;\"']/g, function(entity) {","      return entities[entity];","    });","  };","","  root.omap = function(f) {","    var merger;","    merger = fold(function(a, oldk, oldv) {","      var newk, newv, _ref1;","      _ref1 = f(oldk, oldv), newk = _ref1[0], newv = _ref1[1];","      a[newk] = newv;","      return a;","    });","    return function(xs) {","      return merger({}, xs);","    };","  };","","  root.copy = root.omap(function(k, v) {","    return [k, v];","  });","","  root.partition = function(f) {","    return function(xs) {","      var divide;","      divide = fold(function(_arg, x) {","        var falses, trues;","        trues = _arg[0], falses = _arg[1];","        if (f(x)) {","          return [trues.concat([x]), falses];","        } else {","          return [trues, falses.concat([x])];","        }","      });","      return divide([[], []], xs);","    };","  };","","  root.id = id = function(x) {","    return x;","  };","","  root.concatMap = function(f) {","    return function(xs) {","      var fx, ret, x, _i, _len;","      ret = void 0;","      for (_i = 0, _len = xs.length; _i &lt; _len; _i++) {","        x = xs[_i];","        fx = f(x);","        ret = ret === void 0 ? fx : typeof ret === 'number' ? ret + fx : ret.concat != null ? ret.concat(fx) : merge(ret, fx);","      }","      return ret;","    };","  };","","  root.map = function(f) {","    return invoke('map', f);","  };","","  comp = fold(function(f, g) {","    return function() {","      var args;","      args = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","      return f(g.apply(null, args));","    };","  });","","  root.compose = function() {","    var fs;","    fs = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    return comp(fs);","  };","","  root.flatMap = root.concatMap;","","  root.difference = function(xs, remove) {","    var x, _i, _len, _results;","    _results = [];","    for (_i = 0, _len = xs.length; _i &lt; _len; _i++) {","      x = xs[_i];","      if (__indexOf.call(remove, x) &lt; 0) {","        _results.push(x);","      }","    }","    return _results;","  };","","  root.stringList = function(x) {","    if (typeof x === 'string') {","      return [x];","    } else {","      return x;","    }","  };","","  root.flatten = flatten = function() {","    var ret, x, xs, xx, _i, _j, _len, _len1, _ref1;","    xs = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    ret = [];","    for (_i = 0, _len = xs.length; _i &lt; _len; _i++) {","      x = xs[_i];","      if (isArray(x)) {","        _ref1 = flatten.apply(null, x);","        for (_j = 0, _len1 = _ref1.length; _j &lt; _len1; _j++) {","          xx = _ref1[_j];","          ret.push(xx);","        }","      } else {","        ret.push(x);","      }","    }","    return ret;","  };","","  root.sum = root.concatMap(id);","","  root.merge = merge = function() {","    var k, newObj, o, objs, v, _i, _len;","    objs = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    newObj = {};","    for (_i = 0, _len = objs.length; _i &lt; _len; _i++) {","      o = objs[_i];","      for (k in o) {","        if (!__hasProp.call(o, k)) continue;","        v = o[k];","        newObj[k] = v;","      }","    }","    return newObj;","  };","","  root.any = function(xs, f) {","    var x, _i, _len;","    if (f == null) {","      f = id;","    }","    for (_i = 0, _len = xs.length; _i &lt; _len; _i++) {","      x = xs[_i];","      if (f(x)) {","        return true;","      }","    }","    return false;","  };","","  root.invoke = invoke = function() {","    var args, name;","    name = arguments[0], args = 2 &lt;= arguments.length ? __slice.call(arguments, 1) : [];","    return invokeWith(name, args);","  };","","  root.invokeWith = invokeWith = function(name, args, ctx) {","    if (args == null) {","      args = [];","    }","    if (ctx == null) {","      ctx = null;","    }","    return function(o) {","      if (!(o != null)) {","        throw new Error(\"Cannot call method \\\"\" + name + \"\\\" of null\");","      }","      if (!o[name]) {","        throw new Error(\"Cannot call undefined method \\\"\" + name + \" of \" + o);","      } else {","        return o[name].apply(ctx || o, args);","      }","    };","  };","","  root.get = function(name) {","    return function(obj) {","      return obj[name];","    };","  };","","  root.set = function(name, value) {","    return function(obj) {","      var k, v;","      if (arguments.length === 2) {","        obj[name] = value;","      } else {","        for (k in name) {","          if (!__hasProp.call(name, k)) continue;","          v = name[k];","          obj[k] = v;","        }","      }","      return obj;","    };","  };","","  REQUIRES = function(required, got) {","    return \"This service requires a service at version \" + required + \" or above. This one is at \" + got;","  };","","  root.REQUIRES_VERSION = function(s, n, f) {","    return s.fetchVersion().then(function(v) {","      if (v &gt;= n) {","        return f();","      } else {","        return error(REQUIRES(n, v));","      }","    });","  };","","  root.dejoin = function(q) {","    var parts, view, _i, _len, _ref1;","    _ref1 = q.views;","    for (_i = 0, _len = _ref1.length; _i &lt; _len; _i++) {","      view = _ref1[_i];","      parts = view.split('.');","      if (parts.length &gt; 2) {","        q.addJoin(parts.slice(1, -1).join('.'));","      }","    }","    return q;","  };","","  thenFold = fold(function(p, f) {","    return p.then(f);","  });","","  root.sequence = function() {","    var fns;","    fns = 1 &lt;= arguments.length ? __slice.call(arguments, 0) : [];","    return thenFold(success(), fns);","  };","","  pairFold = fold(function(o, _arg) {","    var k, v;","    k = _arg[0], v = _arg[1];","    if (o[k] != null) {","      throw new Error(\"Duplicate key: \" + k);","    }","    o[k] = v;","    return o;","  });","","  root.pairsToObj = function(pairs) {","    return pairFold({}, pairs);","  };","","}).call(this);"];
_$jscoverage['util.js'][1]++;
(function () {
  _$jscoverage['util.js'][2]++;
  var Promise, REQUIRES, comp, curry, entities, error, flatten, fold, id, invoke, invokeWith, isArray, merge, pairFold, qsFromList, root, success, thenFold, _ref, __slice = [].slice, __indexOf = ([].indexOf || (function (item) {
  _$jscoverage['util.js'][4]++;
  for (var i = 0, l = this.length; (i < l); (i++)) {
    _$jscoverage['util.js'][4]++;
    if (((i in this) && (this[i] === item))) {
      _$jscoverage['util.js'][4]++;
      return i;
    }
}
  _$jscoverage['util.js'][4]++;
  return -1;
})), __hasProp = ({}).hasOwnProperty;
  _$jscoverage['util.js'][7]++;
  Promise = require("./promise");
  _$jscoverage['util.js'][9]++;
  root = exports;
  _$jscoverage['util.js'][11]++;
  root.defer = (function () {
  _$jscoverage['util.js'][12]++;
  var deferred;
  _$jscoverage['util.js'][13]++;
  deferred = {};
  _$jscoverage['util.js'][14]++;
  deferred.promise = new Promise((function (resolve, reject) {
  _$jscoverage['util.js'][15]++;
  deferred.resolve = resolve;
  _$jscoverage['util.js'][16]++;
  return (deferred.reject = reject);
}));
  _$jscoverage['util.js'][18]++;
  return deferred;
});
  _$jscoverage['util.js'][21]++;
  qsFromList = (function (pairs) {
  _$jscoverage['util.js'][22]++;
  var pair;
  _$jscoverage['util.js'][23]++;
  return (function () {
  _$jscoverage['util.js'][24]++;
  var _i, _len, _results;
  _$jscoverage['util.js'][25]++;
  _results = [];
  _$jscoverage['util.js'][26]++;
  for (((_i = 0), (_len = pairs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][27]++;
    pair = pairs[_i];
    _$jscoverage['util.js'][28]++;
    _results.push(pair.map(encodeURIComponent).join("="));
}
  _$jscoverage['util.js'][30]++;
  return _results;
})().join("&");
});
  _$jscoverage['util.js'][34]++;
  root.querystring = (function (obj) {
  _$jscoverage['util.js'][35]++;
  var k, p, pairs, subList, sv, v;
  _$jscoverage['util.js'][36]++;
  if (isArray(obj)) {
    _$jscoverage['util.js'][37]++;
    pairs = obj.slice();
  }
  else {
    _$jscoverage['util.js'][39]++;
    pairs = [];
    _$jscoverage['util.js'][40]++;
    for (k in obj) {
      _$jscoverage['util.js'][41]++;
      v = obj[k];
      _$jscoverage['util.js'][42]++;
      if (isArray(v)) {
        _$jscoverage['util.js'][43]++;
        subList = (function () {
  _$jscoverage['util.js'][44]++;
  var _i, _len, _results;
  _$jscoverage['util.js'][45]++;
  _results = [];
  _$jscoverage['util.js'][46]++;
  for (((_i = 0), (_len = v.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][47]++;
    sv = v[_i];
    _$jscoverage['util.js'][48]++;
    _results.push([k, sv]);
}
  _$jscoverage['util.js'][50]++;
  return _results;
})();
        _$jscoverage['util.js'][52]++;
        pairs = pairs.concat(subList);
      }
      else {
        _$jscoverage['util.js'][54]++;
        pairs.push([k, v]);
      }
}
  }
  _$jscoverage['util.js'][58]++;
  return qsFromList((function () {
  _$jscoverage['util.js'][59]++;
  var _i, _len, _results;
  _$jscoverage['util.js'][60]++;
  _results = [];
  _$jscoverage['util.js'][61]++;
  for (((_i = 0), (_len = pairs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][62]++;
    p = pairs[_i];
    _$jscoverage['util.js'][63]++;
    if ((p[1] != null)) {
      _$jscoverage['util.js'][64]++;
      _results.push(p);
    }
}
  _$jscoverage['util.js'][67]++;
  return _results;
})());
});
  _$jscoverage['util.js'][71]++;
  root.curry = (curry = (function () {
  _$jscoverage['util.js'][72]++;
  var args, f;
  _$jscoverage['util.js'][73]++;
  ((f = arguments[0]), (args = ((2 <= arguments.length)? __slice.call(arguments, 1): [])));
  _$jscoverage['util.js'][74]++;
  return (function () {
  _$jscoverage['util.js'][75]++;
  var rest;
  _$jscoverage['util.js'][76]++;
  rest = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['util.js'][77]++;
  return f.apply(null, args.concat(rest));
});
}));
  _$jscoverage['util.js'][81]++;
  root.error = (error = (function (e) {
  _$jscoverage['util.js'][82]++;
  return new Promise((function (_, reject) {
  _$jscoverage['util.js'][83]++;
  return reject(new Error(e));
}));
}));
  _$jscoverage['util.js'][87]++;
  root.success = (success = Promise.from);
  _$jscoverage['util.js'][89]++;
  root.parallel = Promise.all;
  _$jscoverage['util.js'][91]++;
  root.withCB = (function () {
  _$jscoverage['util.js'][92]++;
  var f, fs, p, _i, _j, _len;
  _$jscoverage['util.js'][93]++;
  ((fs = ((2 <= arguments.length)? __slice.call(arguments, 0, (_i = (arguments.length - 1))): ((_i = 0), []))), (p = arguments[(_i++)]));
  _$jscoverage['util.js'][94]++;
  for (((_j = 0), (_len = fs.length)); (_j < _len); (_j++)) {
    _$jscoverage['util.js'][95]++;
    f = fs[_j];
    _$jscoverage['util.js'][96]++;
    if ((f != null)) {
      _$jscoverage['util.js'][97]++;
      (function (f) {
  _$jscoverage['util.js'][98]++;
  var onErr, onSucc;
  _$jscoverage['util.js'][99]++;
  onSucc = (function (res) {
  _$jscoverage['util.js'][100]++;
  return f(null, res);
});
  _$jscoverage['util.js'][102]++;
  onErr = (function (err) {
  _$jscoverage['util.js'][103]++;
  return f(err);
});
  _$jscoverage['util.js'][105]++;
  return p.then(onSucc, onErr);
})(f);
    }
}
  _$jscoverage['util.js'][109]++;
  return p;
});
  _$jscoverage['util.js'][112]++;
  root.fold = (fold = (function (f) {
  _$jscoverage['util.js'][113]++;
  return (function (init, xs) {
  _$jscoverage['util.js'][114]++;
  var k, ret, v;
  _$jscoverage['util.js'][115]++;
  if ((arguments.length === 1)) {
    _$jscoverage['util.js'][116]++;
    xs = (((init != null)? init.slice(): (void 0)) || init);
    _$jscoverage['util.js'][117]++;
    init = (((xs != null)? xs.shift(): (void 0)) || {});
  }
  _$jscoverage['util.js'][119]++;
  if ((xs == null)) {
    _$jscoverage['util.js'][120]++;
    throw new Error("xs is null");
  }
  _$jscoverage['util.js'][122]++;
  if ((xs.reduce != null)) {
    _$jscoverage['util.js'][123]++;
    return xs.reduce(f, init);
  }
  else {
    _$jscoverage['util.js'][125]++;
    ret = init;
    _$jscoverage['util.js'][126]++;
    for (k in xs) {
      _$jscoverage['util.js'][127]++;
      v = xs[k];
      _$jscoverage['util.js'][128]++;
      ret = ((ret != null)? f(ret, k, v): {k: v});
}
    _$jscoverage['util.js'][132]++;
    return ret;
  }
});
}));
  _$jscoverage['util.js'][137]++;
  root.take = (function (n) {
  _$jscoverage['util.js'][138]++;
  return (function (xs) {
  _$jscoverage['util.js'][139]++;
  if ((n != null)) {
    _$jscoverage['util.js'][140]++;
    return xs.slice(0, (((n - 1) + 1) || 9000000000));
  }
  else {
    _$jscoverage['util.js'][142]++;
    return xs.slice();
  }
});
});
  _$jscoverage['util.js'][147]++;
  root.filter = (function (f) {
  _$jscoverage['util.js'][148]++;
  return (function (xs) {
  _$jscoverage['util.js'][149]++;
  var x, _i, _len, _results;
  _$jscoverage['util.js'][150]++;
  _results = [];
  _$jscoverage['util.js'][151]++;
  for (((_i = 0), (_len = xs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][152]++;
    x = xs[_i];
    _$jscoverage['util.js'][153]++;
    if (f(x)) {
      _$jscoverage['util.js'][154]++;
      _results.push(x);
    }
}
  _$jscoverage['util.js'][157]++;
  return _results;
});
});
  _$jscoverage['util.js'][161]++;
  root.uniqBy = (function (f, xs) {
  _$jscoverage['util.js'][162]++;
  var k, keys, values, x, _i, _len;
  _$jscoverage['util.js'][163]++;
  if ((arguments.length === 1)) {
    _$jscoverage['util.js'][164]++;
    return curry(root.uniqBy, f);
  }
  _$jscoverage['util.js'][166]++;
  keys = [];
  _$jscoverage['util.js'][167]++;
  values = [];
  _$jscoverage['util.js'][168]++;
  if ((xs == null)) {
    _$jscoverage['util.js'][169]++;
    return values;
  }
  _$jscoverage['util.js'][171]++;
  for (((_i = 0), (_len = xs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][172]++;
    x = xs[_i];
    _$jscoverage['util.js'][173]++;
    k = f(x);
    _$jscoverage['util.js'][174]++;
    if ((__indexOf.call(keys, k) < 0)) {
      _$jscoverage['util.js'][175]++;
      keys.push(k);
      _$jscoverage['util.js'][176]++;
      values.push(x);
    }
}
  _$jscoverage['util.js'][179]++;
  return values;
});
  _$jscoverage['util.js'][182]++;
  root.find = (function (xs, f) {
  _$jscoverage['util.js'][183]++;
  var x, _i, _len;
  _$jscoverage['util.js'][184]++;
  if ((arguments.length === 1)) {
    _$jscoverage['util.js'][185]++;
    f = xs;
    _$jscoverage['util.js'][186]++;
    return (function (xs) {
  _$jscoverage['util.js'][187]++;
  return root.find(xs, f);
});
  }
  _$jscoverage['util.js'][190]++;
  for (((_i = 0), (_len = xs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][191]++;
    x = xs[_i];
    _$jscoverage['util.js'][192]++;
    if (f(x)) {
      _$jscoverage['util.js'][193]++;
      return x;
    }
}
  _$jscoverage['util.js'][196]++;
  return null;
});
  _$jscoverage['util.js'][199]++;
  isArray = (((_ref = Array.isArray) != null)? _ref: (function (xs) {
  _$jscoverage['util.js'][200]++;
  return ((((xs != null)? xs.splice: (void 0)) != null) && (((xs != null)? xs.push: (void 0)) != null) && (((xs != null)? xs.pop: (void 0)) != null) && (((xs != null)? xs.slice: (void 0)) != null));
}));
  _$jscoverage['util.js'][203]++;
  root.isArray = isArray;
  _$jscoverage['util.js'][205]++;
  root.isFunction = (((typeof /./) !== "function")? (function (f) {
  _$jscoverage['util.js'][206]++;
  return ((typeof f) === "function");
}): (function (f) {
  _$jscoverage['util.js'][208]++;
  return ((f != null) && (f.call != null) && (f.apply != null) && (f.toString() === "[object Function]"));
}));
  _$jscoverage['util.js'][211]++;
  entities = {"&": "&amp;", "<": "&lt;", ">": "&gt;", "\"": "&quot;", "'": "&#x27;"};
  _$jscoverage['util.js'][219]++;
  root.escape = (function (str) {
  _$jscoverage['util.js'][220]++;
  if ((! (str != null))) {
    _$jscoverage['util.js'][221]++;
    return "";
  }
  _$jscoverage['util.js'][223]++;
  return String(str).replace(/[&<>"']/g, (function (entity) {
  _$jscoverage['util.js'][224]++;
  return entities[entity];
}));
});
  _$jscoverage['util.js'][228]++;
  root.omap = (function (f) {
  _$jscoverage['util.js'][229]++;
  var merger;
  _$jscoverage['util.js'][230]++;
  merger = fold((function (a, oldk, oldv) {
  _$jscoverage['util.js'][231]++;
  var newk, newv, _ref1;
  _$jscoverage['util.js'][232]++;
  ((_ref1 = f(oldk, oldv)), (newk = _ref1[0]), (newv = _ref1[1]));
  _$jscoverage['util.js'][233]++;
  a[newk] = newv;
  _$jscoverage['util.js'][234]++;
  return a;
}));
  _$jscoverage['util.js'][236]++;
  return (function (xs) {
  _$jscoverage['util.js'][237]++;
  return merger({}, xs);
});
});
  _$jscoverage['util.js'][241]++;
  root.copy = root.omap((function (k, v) {
  _$jscoverage['util.js'][242]++;
  return [k, v];
}));
  _$jscoverage['util.js'][245]++;
  root.partition = (function (f) {
  _$jscoverage['util.js'][246]++;
  return (function (xs) {
  _$jscoverage['util.js'][247]++;
  var divide;
  _$jscoverage['util.js'][248]++;
  divide = fold((function (_arg, x) {
  _$jscoverage['util.js'][249]++;
  var falses, trues;
  _$jscoverage['util.js'][250]++;
  ((trues = _arg[0]), (falses = _arg[1]));
  _$jscoverage['util.js'][251]++;
  if (f(x)) {
    _$jscoverage['util.js'][252]++;
    return [trues.concat([x]), falses];
  }
  else {
    _$jscoverage['util.js'][254]++;
    return [trues, falses.concat([x])];
  }
}));
  _$jscoverage['util.js'][257]++;
  return divide([[], []], xs);
});
});
  _$jscoverage['util.js'][261]++;
  root.id = (id = (function (x) {
  _$jscoverage['util.js'][262]++;
  return x;
}));
  _$jscoverage['util.js'][265]++;
  root.concatMap = (function (f) {
  _$jscoverage['util.js'][266]++;
  return (function (xs) {
  _$jscoverage['util.js'][267]++;
  var fx, ret, x, _i, _len;
  _$jscoverage['util.js'][268]++;
  ret = (void 0);
  _$jscoverage['util.js'][269]++;
  for (((_i = 0), (_len = xs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][270]++;
    x = xs[_i];
    _$jscoverage['util.js'][271]++;
    fx = f(x);
    _$jscoverage['util.js'][272]++;
    ret = ((ret === (void 0))? fx: (((typeof ret) === "number")? (ret + fx): ((ret.concat != null)? ret.concat(fx): merge(ret, fx))));
}
  _$jscoverage['util.js'][274]++;
  return ret;
});
});
  _$jscoverage['util.js'][278]++;
  root.map = (function (f) {
  _$jscoverage['util.js'][279]++;
  return invoke("map", f);
});
  _$jscoverage['util.js'][282]++;
  comp = fold((function (f, g) {
  _$jscoverage['util.js'][283]++;
  return (function () {
  _$jscoverage['util.js'][284]++;
  var args;
  _$jscoverage['util.js'][285]++;
  args = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['util.js'][286]++;
  return f(g.apply(null, args));
});
}));
  _$jscoverage['util.js'][290]++;
  root.compose = (function () {
  _$jscoverage['util.js'][291]++;
  var fs;
  _$jscoverage['util.js'][292]++;
  fs = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['util.js'][293]++;
  return comp(fs);
});
  _$jscoverage['util.js'][296]++;
  root.flatMap = root.concatMap;
  _$jscoverage['util.js'][298]++;
  root.difference = (function (xs, remove) {
  _$jscoverage['util.js'][299]++;
  var x, _i, _len, _results;
  _$jscoverage['util.js'][300]++;
  _results = [];
  _$jscoverage['util.js'][301]++;
  for (((_i = 0), (_len = xs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][302]++;
    x = xs[_i];
    _$jscoverage['util.js'][303]++;
    if ((__indexOf.call(remove, x) < 0)) {
      _$jscoverage['util.js'][304]++;
      _results.push(x);
    }
}
  _$jscoverage['util.js'][307]++;
  return _results;
});
  _$jscoverage['util.js'][310]++;
  root.stringList = (function (x) {
  _$jscoverage['util.js'][311]++;
  if (((typeof x) === "string")) {
    _$jscoverage['util.js'][312]++;
    return [x];
  }
  else {
    _$jscoverage['util.js'][314]++;
    return x;
  }
});
  _$jscoverage['util.js'][318]++;
  root.flatten = (flatten = (function () {
  _$jscoverage['util.js'][319]++;
  var ret, x, xs, xx, _i, _j, _len, _len1, _ref1;
  _$jscoverage['util.js'][320]++;
  xs = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['util.js'][321]++;
  ret = [];
  _$jscoverage['util.js'][322]++;
  for (((_i = 0), (_len = xs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][323]++;
    x = xs[_i];
    _$jscoverage['util.js'][324]++;
    if (isArray(x)) {
      _$jscoverage['util.js'][325]++;
      _ref1 = flatten.apply(null, x);
      _$jscoverage['util.js'][326]++;
      for (((_j = 0), (_len1 = _ref1.length)); (_j < _len1); (_j++)) {
        _$jscoverage['util.js'][327]++;
        xx = _ref1[_j];
        _$jscoverage['util.js'][328]++;
        ret.push(xx);
}
    }
    else {
      _$jscoverage['util.js'][331]++;
      ret.push(x);
    }
}
  _$jscoverage['util.js'][334]++;
  return ret;
}));
  _$jscoverage['util.js'][337]++;
  root.sum = root.concatMap(id);
  _$jscoverage['util.js'][339]++;
  root.merge = (merge = (function () {
  _$jscoverage['util.js'][340]++;
  var k, newObj, o, objs, v, _i, _len;
  _$jscoverage['util.js'][341]++;
  objs = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['util.js'][342]++;
  newObj = {};
  _$jscoverage['util.js'][343]++;
  for (((_i = 0), (_len = objs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][344]++;
    o = objs[_i];
    _$jscoverage['util.js'][345]++;
    for (k in o) {
      _$jscoverage['util.js'][346]++;
      if ((! __hasProp.call(o, k))) {
        _$jscoverage['util.js'][346]++;
        continue;
      }
      _$jscoverage['util.js'][347]++;
      v = o[k];
      _$jscoverage['util.js'][348]++;
      newObj[k] = v;
}
}
  _$jscoverage['util.js'][351]++;
  return newObj;
}));
  _$jscoverage['util.js'][354]++;
  root.any = (function (xs, f) {
  _$jscoverage['util.js'][355]++;
  var x, _i, _len;
  _$jscoverage['util.js'][356]++;
  if ((f == null)) {
    _$jscoverage['util.js'][357]++;
    f = id;
  }
  _$jscoverage['util.js'][359]++;
  for (((_i = 0), (_len = xs.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][360]++;
    x = xs[_i];
    _$jscoverage['util.js'][361]++;
    if (f(x)) {
      _$jscoverage['util.js'][362]++;
      return true;
    }
}
  _$jscoverage['util.js'][365]++;
  return false;
});
  _$jscoverage['util.js'][368]++;
  root.invoke = (invoke = (function () {
  _$jscoverage['util.js'][369]++;
  var args, name;
  _$jscoverage['util.js'][370]++;
  ((name = arguments[0]), (args = ((2 <= arguments.length)? __slice.call(arguments, 1): [])));
  _$jscoverage['util.js'][371]++;
  return invokeWith(name, args);
}));
  _$jscoverage['util.js'][374]++;
  root.invokeWith = (invokeWith = (function (name, args, ctx) {
  _$jscoverage['util.js'][375]++;
  if ((args == null)) {
    _$jscoverage['util.js'][376]++;
    args = [];
  }
  _$jscoverage['util.js'][378]++;
  if ((ctx == null)) {
    _$jscoverage['util.js'][379]++;
    ctx = null;
  }
  _$jscoverage['util.js'][381]++;
  return (function (o) {
  _$jscoverage['util.js'][382]++;
  if ((! (o != null))) {
    _$jscoverage['util.js'][383]++;
    throw new Error(("Cannot call method \"" + name + "\" of null"));
  }
  _$jscoverage['util.js'][385]++;
  if ((! o[name])) {
    _$jscoverage['util.js'][386]++;
    throw new Error(("Cannot call undefined method \"" + name + " of " + o));
  }
  else {
    _$jscoverage['util.js'][388]++;
    return o[name].apply((ctx || o), args);
  }
});
}));
  _$jscoverage['util.js'][393]++;
  root.get = (function (name) {
  _$jscoverage['util.js'][394]++;
  return (function (obj) {
  _$jscoverage['util.js'][395]++;
  return obj[name];
});
});
  _$jscoverage['util.js'][399]++;
  root.set = (function (name, value) {
  _$jscoverage['util.js'][400]++;
  return (function (obj) {
  _$jscoverage['util.js'][401]++;
  var k, v;
  _$jscoverage['util.js'][402]++;
  if ((arguments.length === 2)) {
    _$jscoverage['util.js'][403]++;
    obj[name] = value;
  }
  else {
    _$jscoverage['util.js'][405]++;
    for (k in name) {
      _$jscoverage['util.js'][406]++;
      if ((! __hasProp.call(name, k))) {
        _$jscoverage['util.js'][406]++;
        continue;
      }
      _$jscoverage['util.js'][407]++;
      v = name[k];
      _$jscoverage['util.js'][408]++;
      obj[k] = v;
}
  }
  _$jscoverage['util.js'][411]++;
  return obj;
});
});
  _$jscoverage['util.js'][415]++;
  REQUIRES = (function (required, got) {
  _$jscoverage['util.js'][416]++;
  return ("This service requires a service at version " + required + " or above. This one is at " + got);
});
  _$jscoverage['util.js'][419]++;
  root.REQUIRES_VERSION = (function (s, n, f) {
  _$jscoverage['util.js'][420]++;
  return s.fetchVersion().then((function (v) {
  _$jscoverage['util.js'][421]++;
  if ((v >= n)) {
    _$jscoverage['util.js'][422]++;
    return f();
  }
  else {
    _$jscoverage['util.js'][424]++;
    return error(REQUIRES(n, v));
  }
}));
});
  _$jscoverage['util.js'][429]++;
  root.dejoin = (function (q) {
  _$jscoverage['util.js'][430]++;
  var parts, view, _i, _len, _ref1;
  _$jscoverage['util.js'][431]++;
  _ref1 = q.views;
  _$jscoverage['util.js'][432]++;
  for (((_i = 0), (_len = _ref1.length)); (_i < _len); (_i++)) {
    _$jscoverage['util.js'][433]++;
    view = _ref1[_i];
    _$jscoverage['util.js'][434]++;
    parts = view.split(".");
    _$jscoverage['util.js'][435]++;
    if ((parts.length > 2)) {
      _$jscoverage['util.js'][436]++;
      q.addJoin(parts.slice(1, -1).join("."));
    }
}
  _$jscoverage['util.js'][439]++;
  return q;
});
  _$jscoverage['util.js'][442]++;
  thenFold = fold((function (p, f) {
  _$jscoverage['util.js'][443]++;
  return p.then(f);
}));
  _$jscoverage['util.js'][446]++;
  root.sequence = (function () {
  _$jscoverage['util.js'][447]++;
  var fns;
  _$jscoverage['util.js'][448]++;
  fns = ((1 <= arguments.length)? __slice.call(arguments, 0): []);
  _$jscoverage['util.js'][449]++;
  return thenFold(success(), fns);
});
  _$jscoverage['util.js'][452]++;
  pairFold = fold((function (o, _arg) {
  _$jscoverage['util.js'][453]++;
  var k, v;
  _$jscoverage['util.js'][454]++;
  ((k = _arg[0]), (v = _arg[1]));
  _$jscoverage['util.js'][455]++;
  if ((o[k] != null)) {
    _$jscoverage['util.js'][456]++;
    throw new Error(("Duplicate key: " + k));
  }
  _$jscoverage['util.js'][458]++;
  o[k] = v;
  _$jscoverage['util.js'][459]++;
  return o;
}));
  _$jscoverage['util.js'][462]++;
  root.pairsToObj = (function (pairs) {
  _$jscoverage['util.js'][463]++;
  return pairFold({}, pairs);
});
}).call(this);

},{"./promise":6}],12:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['version.js']) {
  _$jscoverage['version.js'] = [];
  _$jscoverage['version.js'][1] = 0;
  _$jscoverage['version.js'][2] = 0;
  _$jscoverage['version.js'][4] = 0;
  _$jscoverage['version.js'][6] = 0;
  _$jscoverage['version.js'][8] = 0;
}
_$jscoverage['version.js'].source = ["(function() {","  var imjs, pkg;","","  imjs = exports;","","  pkg = require(\"../package.json\");","","  imjs.VERSION = pkg.version;","","}).call(this);"];
_$jscoverage['version.js'][1]++;
(function () {
  _$jscoverage['version.js'][2]++;
  var imjs, pkg;
  _$jscoverage['version.js'][4]++;
  imjs = exports;
  _$jscoverage['version.js'][6]++;
  pkg = require("../package.json");
  _$jscoverage['version.js'][8]++;
  imjs.VERSION = pkg.version;
}).call(this);

},{"../package.json":44}],13:[function(require,module,exports){
/* automatically generated by JSCoverage - do not edit */
try {
  if (typeof top === 'object' && top !== null && typeof top.opener === 'object' && top.opener !== null) {
    // this is a browser window that was opened from another window

    if (! top.opener._$jscoverage) {
      top.opener._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null) {
    // this is a browser window

    try {
      if (typeof top.opener === 'object' && top.opener !== null && top.opener._$jscoverage) {
        top._$jscoverage = top.opener._$jscoverage;
      }
    }
    catch (e) {}

    if (! top._$jscoverage) {
      top._$jscoverage = {};
    }
  }
}
catch (e) {}

try {
  if (typeof top === 'object' && top !== null && top._$jscoverage) {
    _$jscoverage = top._$jscoverage;
  }
}
catch (e) {}
if (typeof _$jscoverage !== 'object') {
  _$jscoverage = {};
}
if (! _$jscoverage['xml.js']) {
  _$jscoverage['xml.js'] = [];
  _$jscoverage['xml.js'][1] = 0;
  _$jscoverage['xml.js'][2] = 0;
  _$jscoverage['xml.js'][4] = 0;
  _$jscoverage['xml.js'][5] = 0;
  _$jscoverage['xml.js'][7] = 0;
  _$jscoverage['xml.js'][10] = 0;
  _$jscoverage['xml.js'][11] = 0;
  _$jscoverage['xml.js'][12] = 0;
  _$jscoverage['xml.js'][13] = 0;
  _$jscoverage['xml.js'][14] = 0;
  _$jscoverage['xml.js'][15] = 0;
  _$jscoverage['xml.js'][16] = 0;
  _$jscoverage['xml.js'][18] = 0;
  _$jscoverage['xml.js'][22] = 0;
  _$jscoverage['xml.js'][23] = 0;
  _$jscoverage['xml.js'][24] = 0;
  _$jscoverage['xml.js'][25] = 0;
  _$jscoverage['xml.js'][27] = 0;
  _$jscoverage['xml.js'][28] = 0;
  _$jscoverage['xml.js'][29] = 0;
  _$jscoverage['xml.js'][31] = 0;
  _$jscoverage['xml.js'][32] = 0;
  _$jscoverage['xml.js'][33] = 0;
  _$jscoverage['xml.js'][34] = 0;
  _$jscoverage['xml.js'][37] = 0;
  _$jscoverage['xml.js'][38] = 0;
  _$jscoverage['xml.js'][40] = 0;
}
_$jscoverage['xml.js'].source = ["(function() {","  var DOMParser, sanitize;","","  try {","    DOMParser = window.DOMParser;","  } catch (e) {","    DOMParser = require('xmldom').DOMParser;","  }","","  sanitize = function(xml) {","    xml = xml.replace(/^\\s*/g, '');","    xml = xml.replace(/\\s$/g, '');","    if (xml.length === 0) {","      return xml;","    } else if (xml[xml.length - 1] !== '&gt;') {","      return xml + '&gt;';","    } else {","      return xml;","    }","  };","","  exports.parse = function(xml) {","    var dom, parser;","    if (typeof xml !== 'string') {","      throw new Error(\"Expected a string - got \" + xml);","    }","    xml = sanitize(xml);","    if (!xml) {","      throw new Error(\"Expected content - got empty string\");","    }","    dom = (function() {","      try {","        parser = new DOMParser();","        return parser.parseFromString(xml, 'text/xml');","      } catch (_error) {}","    })();","    if ((!dom) || (!dom.documentElement) || dom.getElementsByTagName('parsererror').length) {","      throw new Error(\"Invalid XML: \" + xml);","    }","    return dom;","  };","","}).call(this);"];
_$jscoverage['xml.js'][1]++;
(function () {
  _$jscoverage['xml.js'][2]++;
  var DOMParser, sanitize;
  _$jscoverage['xml.js'][4]++;
  try {
    _$jscoverage['xml.js'][5]++;
    DOMParser = window.DOMParser;
  }
  catch (e) {
    _$jscoverage['xml.js'][7]++;
    DOMParser = require("xmldom").DOMParser;
  }
  _$jscoverage['xml.js'][10]++;
  sanitize = (function (xml) {
  _$jscoverage['xml.js'][11]++;
  xml = xml.replace(/^\s*/g, "");
  _$jscoverage['xml.js'][12]++;
  xml = xml.replace(/\s$/g, "");
  _$jscoverage['xml.js'][13]++;
  if ((xml.length === 0)) {
    _$jscoverage['xml.js'][14]++;
    return xml;
  }
  else {
    _$jscoverage['xml.js'][15]++;
    if ((xml[(xml.length - 1)] !== ">")) {
      _$jscoverage['xml.js'][16]++;
      return (xml + ">");
    }
    else {
      _$jscoverage['xml.js'][18]++;
      return xml;
    }
  }
});
  _$jscoverage['xml.js'][22]++;
  exports.parse = (function (xml) {
  _$jscoverage['xml.js'][23]++;
  var dom, parser;
  _$jscoverage['xml.js'][24]++;
  if (((typeof xml) !== "string")) {
    _$jscoverage['xml.js'][25]++;
    throw new Error(("Expected a string - got " + xml));
  }
  _$jscoverage['xml.js'][27]++;
  xml = sanitize(xml);
  _$jscoverage['xml.js'][28]++;
  if ((! xml)) {
    _$jscoverage['xml.js'][29]++;
    throw new Error("Expected content - got empty string");
  }
  _$jscoverage['xml.js'][31]++;
  dom = (function () {
  _$jscoverage['xml.js'][32]++;
  try {
    _$jscoverage['xml.js'][33]++;
    parser = new DOMParser();
    _$jscoverage['xml.js'][34]++;
    return parser.parseFromString(xml, "text/xml");
  }
  catch (_error) {
  }
})();
  _$jscoverage['xml.js'][37]++;
  if (((! dom) || (! dom.documentElement) || dom.getElementsByTagName("parsererror").length)) {
    _$jscoverage['xml.js'][38]++;
    throw new Error(("Invalid XML: " + xml));
  }
  _$jscoverage['xml.js'][40]++;
  return dom;
});
}).call(this);

},{"xmldom":30}],14:[function(require,module,exports){

/*
*  Base64 encode / decode
*  http://www.webtoolkit.info/
*/


(function() {
  var char, keyChar, keyStr, utf8_encode;

  keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

  char = String.fromCharCode;

  keyChar = function(idx) {
    return keyStr.charAt(idx);
  };

  utf8_encode = function(string) {
    var c, chars, code, i;
    string = string.replace(/\r\n/g, '\n');
    chars = (function() {
      var _i, _len, _results;
      _results = [];
      for (i = _i = 0, _len = string.length; _i < _len; i = ++_i) {
        c = string[i];
        code = string.charCodeAt(i);
        if (code < 128) {
          _results.push(c);
        } else if (code < 2048) {
          _results.push(char((code >> 6) | 192) + char((code & 63) | 128));
        } else {
          _results.push(char((code >> 12) | 224) + char(((char >> 6) & 63) | 128) + char((code & 63) | 128));
        }
      }
      return _results;
    })();
    return chars.join('');
  };

  exports.encode = function(input) {
    var chr1, chr2, chr3, enc1, enc2, enc3, enc4, i, output;
    output = "";
    i = 0;
    input = utf8_encode(input);
    while (i < input.length) {
      chr1 = input.charCodeAt(i++);
      chr2 = input.charCodeAt(i++);
      chr3 = input.charCodeAt(i++);
      enc1 = chr1 >> 2;
      enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
      enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
      enc4 = chr3 & 63;
      if (isNaN(chr2)) {
        enc3 = enc4 = 64;
      } else if (isNaN(chr3)) {
        enc4 = 64;
      }
      output += [enc1, enc2, enc3, enc4].map(keyChar).join('');
    }
    return output;
  };

}).call(this);

},{}],15:[function(require,module,exports){
(function() {
  var constants;

  constants = exports;

  constants.ACCEPT_HEADER = {
    'json': 'application/json',
    'jsonobjects': 'application/json;type=objects',
    'jsontable': 'application/json;type=table',
    'jsonrows': 'application/json;type=rows',
    'jsoncount': 'application/json;type=count',
    'jsonp': 'application/javascript',
    'jsonpobjects': 'application/javascript;type=objects',
    'jsonptable': 'application/javascript;type=table',
    'jsonprows': 'application/javascript;type=rows',
    'jsonpcount': 'application/javascript;type=count'
  };

}).call(this);

},{}],"j+v/Vf":[function(require,module,exports){
(function() {
  var ACCEPT_HEADER, CHARSET, CONVERTERS, IE_VERSION, PESKY_COMMA, Promise, URLENC, annotateError, check, error, httpinvoke, matches, merge, re, streaming, success, ua, utils, withCB, _ref;

  httpinvoke = require('httpinvoke');

  Promise = require('./promise');

  ACCEPT_HEADER = require('./constants').ACCEPT_HEADER;

  _ref = utils = require('./util'), withCB = _ref.withCB, success = _ref.success, error = _ref.error, merge = _ref.merge;

  PESKY_COMMA = /,\s*$/;

  URLENC = "application/x-www-form-urlencoded";

  IE_VERSION = -1;

  if (navigator.appName === 'Microsoft Internet Explorer') {
    ua = navigator.userAgent;
    re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})");
    if (matches = ua.match(re)) {
      IE_VERSION = parseFloat(matches[1]);
    }
  }

  exports.getMethod = function(x) {
    switch (x) {
      case "PUT":
        return "POST";
      case "DELETE":
        return "GET";
      default:
        return x;
    }
  };

  exports.supports = function(x) {
    if ((0 < IE_VERSION && IE_VERSION < 10) && x === 'PUT' || x === 'DELETE') {
      return false;
    } else {
      return true;
    }
  };

  streaming = function(data) {
    return {
      resume: (function() {}),
      pause: (function() {}),
      on: function(evt, cb) {
        var res, _i, _len, _ref1, _results;
        switch (evt) {
          case 'data':
            _ref1 = data.results;
            _results = [];
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              res = _ref1[_i];
              _results.push(cb(res));
            }
            return _results;
          case 'end':
            return cb();
        }
      }
    };
  };

  exports.iterReq = function(method, path, format) {
    return function(q, page, cb, eb, onEnd) {
      var attach, req, _ref1;
      if (page == null) {
        page = {};
      }
      if (utils.isFunction(page)) {
        _ref1 = [{}, page, cb, eb], page = _ref1[0], cb = _ref1[1], eb = _ref1[2], onEnd = _ref1[3];
      }
      req = merge({
        format: format
      }, page, {
        query: q.toXML()
      });
      attach = function(stream) {
        console.log("Attaching");
        if (cb != null) {
          stream.on('data', cb);
        }
        if (onEnd != null) {
          stream.on('end', onEnd);
        }
        return stream;
      };
      return withCB(eb, this.makeRequest(method, path, req, null, true).then(attach));
    };
  };

  check = function(response) {
    var e, err, msg, sc, _ref1, _ref2;
    sc = response.statusCode;
    if ((200 <= sc && sc < 400)) {
      return response.body;
    } else {
      msg = "Bad response: " + sc;
      err = ((_ref1 = response.body) != null ? _ref1.error : void 0) ? response.body.error : (e = (_ref2 = response.body) != null ? typeof _ref2.match === "function" ? _ref2.match(/\[ERROR\] (\d+)([\s\S]*)/) : void 0 : void 0) ? e[2] : void 0;
      if (err != null) {
        msg += ": " + err;
      }
      return error(new Error(msg));
    }
  };

  CHARSET = "; charset=UTF-8";

  CONVERTERS = {
    'text json': JSON.parse
  };

  annotateError = function(url) {
    return function(err) {
      throw new Error("Request to " + url + " failed: " + err);
    };
  };

  exports.doReq = function(opts, iter) {
    var headers, isJSON, method, options, postdata, resp, url, _ref1, _ref2;
    method = opts.type;
    url = opts.url;
    headers = (_ref1 = opts.headers) != null ? _ref1 : {};
    headers.Accept = ACCEPT_HEADER[opts.dataType];
    isJSON = /json/.test(opts.dataType) || /json/.test((_ref2 = opts.data) != null ? _ref2.format : void 0);
    if (opts.data != null) {
      postdata = typeof opts.data === 'string' ? opts.data : "application/json" === opts.contentType ? JSON.stringify(opts.data) : utils.querystring(opts.data);
      if ((method === 'GET' || method === 'DELETE') && (postdata != null ? postdata.length : void 0)) {
        url += '?' + postdata;
        postdata = void 0;
      } else {
        headers['Content-Type'] = (opts.contentType || URLENC) + CHARSET;
      }
    }
    options = {
      timeout: opts.timeout,
      headers: headers,
      outputType: isJSON ? 'json' : 'text',
      corsExposedHeaders: ['Content-Type'],
      converters: CONVERTERS
    };
    if (postdata != null) {
      options.inputType = 'text';
      options.input = postdata;
    }
    resp = Promise.from(httpinvoke(url, method, options)).then(check, annotateError(url));
    resp.then(opts.success, opts.error);
    if (iter) {
      return resp.then(streaming);
    }
    return resp;
  };

}).call(this);

},{"./constants":15,"./promise":22,"./util":27,"httpinvoke":36}],"./http":[function(require,module,exports){
module.exports=require('j+v/Vf');
},{}],18:[function(require,module,exports){
(function() {
  var CategoryResults, IDResolutionJob, IdResults, ONE_MINUTE, concatMap, defer, difference, fold, funcutils, get, id, intermine, uniqBy, withCB,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  funcutils = require('./util');

  intermine = exports;

  uniqBy = funcutils.uniqBy, difference = funcutils.difference, defer = funcutils.defer, withCB = funcutils.withCB, id = funcutils.id, get = funcutils.get, fold = funcutils.fold, concatMap = funcutils.concatMap;

  ONE_MINUTE = 60 * 1000;

  CategoryResults = (function() {
    var getIssueMatches;

    function CategoryResults(results) {
      var k, v;
      for (k in results) {
        if (!__hasProp.call(results, k)) continue;
        v = results[k];
        this[k] = v;
      }
    }

    CategoryResults.prototype.getStats = function(type) {
      if (type != null) {
        return this.stats[type];
      } else {
        return this.stats;
      }
    };

    getIssueMatches = concatMap(get('matches'));

    CategoryResults.prototype.getMatches = function(k) {
      var _ref;
      if (k === 'MATCH') {
        return this.matches[k];
      } else {
        return (_ref = getIssueMatches(this.matches[k])) != null ? _ref : [];
      }
    };

    CategoryResults.prototype.getMatchIds = function(k) {
      if (k != null) {
        return this.getMatches(k).map(get('id'));
      } else {
        return this.allMatchIds();
      }
    };

    CategoryResults.prototype.goodMatchIds = function() {
      return this.getMatchIds('MATCH');
    };

    CategoryResults.prototype.allMatchIds = function() {
      var combineIds,
        _this = this;
      combineIds = fold(function(res, issueSet) {
        return res.concat(_this.getMatchIds(issueSet));
      });
      return combineIds(this.goodMatchIds(), ['DUPLICATE', 'WILDCARD', 'TYPE_CONVERTED', 'OTHER']);
    };

    return CategoryResults;

  })();

  IdResults = (function() {
    var flatten, getReasons, isGood, unique;

    unique = uniqBy(id);

    flatten = concatMap(id);

    getReasons = function(match) {
      var k, vals;
      return flatten((function() {
        var _ref, _results;
        _ref = match.identifiers;
        _results = [];
        for (k in _ref) {
          vals = _ref[k];
          _results.push(vals);
        }
        return _results;
      })());
    };

    isGood = function(match, k) {
      return !(k != null) || __indexOf.call(getReasons(match), k) >= 0;
    };

    function IdResults(results) {
      var k, v;
      for (k in results) {
        if (!__hasProp.call(results, k)) continue;
        v = results[k];
        this[k] = v;
      }
    }

    IdResults.prototype.getStats = function(type) {
      switch (type) {
        case 'objects':
          return this.getObjectStats();
        case 'identifiers':
          return this.getIdentifierStats();
        default:
          return {
            objects: this.getObjectStats(),
            identifiers: this.getIdentifierStats()
          };
      }
    };

    IdResults.prototype.getIdentifierStats = function() {
      var all, allIdents, issues, matchIdents, matches, toIdents;
      toIdents = function(ms) {
        var ident, match;
        return unique(flatten((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ms.length; _i < _len; _i++) {
            match = ms[_i];
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (ident in match != null ? match.identifiers : void 0) {
                _results1.push(ident);
              }
              return _results1;
            })());
          }
          return _results;
        })()));
      };
      matchIdents = toIdents(this.getMatches('MATCH'));
      allIdents = toIdents(this.getMatches());
      matches = matchIdents.length;
      all = allIdents.length;
      issues = (difference(allIdents, matchIdents)).length;
      return {
        matches: matches,
        all: all,
        issues: issues
      };
    };

    IdResults.prototype.getObjectStats = function() {
      var all, issues, match, matches;
      matches = this.goodMatchIds().length;
      all = this.allMatchIds().length;
      issues = ((function() {
        var _results;
        _results = [];
        for (id in this) {
          if (!__hasProp.call(this, id)) continue;
          match = this[id];
          if (__indexOf.call(getReasons(match), 'MATCH') < 0) {
            _results.push(id);
          }
        }
        return _results;
      }).call(this)).length;
      return {
        matches: matches,
        all: all,
        issues: issues
      };
    };

    IdResults.prototype.getMatches = function(k) {
      var match, _results;
      _results = [];
      for (id in this) {
        if (!__hasProp.call(this, id)) continue;
        match = this[id];
        if (isGood(match, k)) {
          _results.push(match);
        }
      }
      return _results;
    };

    IdResults.prototype.getMatchIds = function(k) {
      var match, _results;
      _results = [];
      for (id in this) {
        if (!__hasProp.call(this, id)) continue;
        match = this[id];
        if (isGood(match, k)) {
          _results.push(id);
        }
      }
      return _results;
    };

    IdResults.prototype.goodMatchIds = function() {
      return this.getMatchIds('MATCH');
    };

    IdResults.prototype.allMatchIds = function() {
      return this.getMatchIds();
    };

    return IdResults;

  })();

  IDResolutionJob = (function() {

    function IDResolutionJob(uid, service) {
      this.uid = uid;
      this.service = service;
      this.del = __bind(this.del, this);

      this.fetchResults = __bind(this.fetchResults, this);

      this.fetchErrorMessage = __bind(this.fetchErrorMessage, this);

      this.fetchStatus = __bind(this.fetchStatus, this);

    }

    IDResolutionJob.prototype.fetchStatus = function(cb) {
      return withCB(cb, this.service.get("ids/" + this.uid + "/status").then(get('status')));
    };

    IDResolutionJob.prototype.fetchErrorMessage = function(cb) {
      return withCB(cb, this.service.get("ids/" + this.uid + "/status").then(get('message')));
    };

    IDResolutionJob.prototype.fetchResults = function(cb) {
      var gettingRes, gettingVer;
      gettingRes = this.service.get("ids/" + this.uid + "/result").then(get('results'));
      gettingVer = this.service.fetchVersion();
      return gettingVer.then(function(v) {
        return gettingRes.then(function(results) {
          if (v >= 16) {
            return new CategoryResults(results);
          } else {
            return new IdResults(results);
          }
        });
      });
    };

    IDResolutionJob.prototype.del = function(cb) {
      return this.service.makeRequest('DELETE', "ids/" + this.uid, {}, cb);
    };

    IDResolutionJob.prototype.decay = 50;

    IDResolutionJob.prototype.poll = function(onSuccess, onError, onProgress) {
      var backOff, notify, promise, reject, resolve, resp, _ref,
        _this = this;
      _ref = defer(), promise = _ref.promise, resolve = _ref.resolve, reject = _ref.reject;
      promise.then(onSuccess, onError);
      notify = onProgress != null ? onProgress : (function() {});
      resp = this.fetchStatus();
      resp.then(null, reject);
      backOff = this.decay;
      this.decay = Math.min(ONE_MINUTE, backOff * 1.25);
      resp.then(function(status) {
        notify(status);
        switch (status) {
          case 'SUCCESS':
            return _this.fetchResults().then(resolve, reject);
          case 'ERROR':
            return _this.fetchErrorMessage().then(reject, reject);
          default:
            return setTimeout((function() {
              return _this.poll(resolve, reject, notify);
            }), backOff);
        }
      });
      return promise;
    };

    return IDResolutionJob;

  })();

  IDResolutionJob.prototype.wait = IDResolutionJob.prototype.poll;

  IDResolutionJob.create = function(service) {
    return function(uid) {
      return new IDResolutionJob(uid, service);
    };
  };

  intermine.IDResolutionJob = IDResolutionJob;

  intermine.CategoryResults = CategoryResults;

  intermine.IdResults = IdResults;

}).call(this);

},{"./util":27}],19:[function(require,module,exports){
(function() {
  var INVITES, List, REQUIRES_VERSION, SHARES, TAGS_PATH, dejoin, get, getFolderName, intermine, invoke, isFolder, merge, set, utils, withCB,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  utils = require('./util');

  intermine = exports;

  merge = utils.merge, withCB = utils.withCB, get = utils.get, invoke = utils.invoke, REQUIRES_VERSION = utils.REQUIRES_VERSION, set = utils.set, dejoin = utils.dejoin;

  TAGS_PATH = "list/tags";

  SHARES = "lists/shares";

  INVITES = 'lists/invitations';

  isFolder = function(t) {
    return t.substr(0, t.indexOf(':')) === '__folder__';
  };

  getFolderName = function(t) {
    return t.substr(t.indexOf(':') + 1);
  };

  List = (function() {
    var getTags;

    function List(properties, service) {
      var k, v;
      this.service = service;
      this._updateTags = __bind(this._updateTags, this);

      this.hasTag = __bind(this.hasTag, this);

      for (k in properties) {
        if (!__hasProp.call(properties, k)) continue;
        v = properties[k];
        this[k] = v;
      }
      this.dateCreated = (this.dateCreated != null) ? new Date(this.dateCreated) : null;
      this.folders = this.tags.filter(isFolder).map(getFolderName);
    }

    List.prototype.hasTag = function(t) {
      return __indexOf.call(this.tags, t) >= 0;
    };

    List.prototype.query = function(view) {
      if (view == null) {
        view = ['*'];
      }
      return this.service.query({
        select: view,
        from: this.type,
        where: [[this.type, 'IN', this.name]]
      });
    };

    List.prototype.del = function(cb) {
      return this.service.makeRequest('DELETE', 'lists', {
        name: this.name
      }, cb);
    };

    getTags = function(_arg) {
      var tags;
      tags = _arg.tags;
      return tags;
    };

    List.prototype._updateTags = function(err, tags) {
      if (err != null) {
        return;
      }
      this.tags = tags.slice();
      return this.folders = this.tags.filter(isFolder).map(getFolderName);
    };

    List.prototype.fetchTags = function(cb) {
      return withCB(this._updateTags, cb, this.service.makeRequest('GET', 'list/tags', {
        name: this.name
      }).then(getTags));
    };

    List.prototype.addTags = function(tags, cb) {
      var req;
      req = {
        name: this.name,
        tags: tags
      };
      return withCB(this._updateTags, cb, this.service.makeRequest('POST', 'list/tags', req).then(getTags));
    };

    List.prototype.removeTags = function(tags, cb) {
      var req;
      req = {
        name: this.name,
        tags: tags
      };
      return withCB(this._updateTags, cb, this.service.makeRequest('DELETE', 'list/tags', req).then(getTags));
    };

    List.prototype.contents = function(cb) {
      return withCB(cb, this.query().then(dejoin).then(invoke('records')));
    };

    List.prototype.rename = function(newName, cb) {
      var req,
        _this = this;
      req = {
        oldname: this.name,
        newname: newName
      };
      return withCB(cb, this.service.post('lists/rename', req).then(get('listName')).then(function(n) {
        return _this.name = n;
      }).then(this.service.fetchList));
    };

    List.prototype.copy = function(opts, cb) {
      var baseName, name, query, tags, _ref, _ref1, _ref2,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      if (cb == null) {
        cb = (function() {});
      }
      if (arguments.length === 1 && utils.isFunction(opts)) {
        _ref = [{}, opts], opts = _ref[0], cb = _ref[1];
      }
      if (typeof opts === 'string') {
        opts = {
          name: opts
        };
      }
      name = baseName = (_ref1 = opts.name) != null ? _ref1 : "" + this.name + "_copy";
      tags = this.tags.concat((_ref2 = opts.tags) != null ? _ref2 : []);
      query = this.query(['id']);
      return withCB(cb, this.service.fetchLists().then(invoke('map', get('name'))).then(function(names) {
        var c;
        c = 1;
        while (__indexOf.call(names, name) >= 0) {
          name = "" + baseName + "-" + (c++);
        }
        return query.then(invoke('saveAsList', {
          name: name,
          tags: tags,
          description: _this.description
        }));
      }));
    };

    List.prototype.enrichment = function(opts, cb) {
      return this.service.enrichment(merge({
        list: this.name
      }, opts), cb);
    };

    List.prototype.shareWithUser = function(recipient, cb) {
      return withCB(cb, this.service.post(SHARES, {
        'list': this.name,
        'with': recipient
      }));
    };

    List.prototype.inviteUserToShare = function(recipient, notify, cb) {
      if (notify == null) {
        notify = true;
      }
      if (cb == null) {
        cb = (function() {});
      }
      return withCB(cb, this.service.post(INVITES, {
        list: this.name,
        to: recipient,
        notify: !!notify
      }));
    };

    return List;

  })();

  intermine.List = List;

}).call(this);

},{"./util":27}],20:[function(require,module,exports){
(function() {
  var Model, PathInfo, Table, error, find, flatten, intermine, liftToTable, omap, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Table = require('./table').Table;

  PathInfo = require('./path').PathInfo;

  _ref = require('./util'), flatten = _ref.flatten, find = _ref.find, error = _ref.error, omap = _ref.omap;

  intermine = exports;

  liftToTable = omap(function(k, v) {
    return [k, new Table(v)];
  });

  Model = (function() {

    function Model(_arg) {
      var classes;
      this.name = _arg.name, classes = _arg.classes;
      this.findCommonType = __bind(this.findCommonType, this);

      this.findSharedAncestor = __bind(this.findSharedAncestor, this);

      this.getAncestorsOf = __bind(this.getAncestorsOf, this);

      this.getSubclassesOf = __bind(this.getSubclassesOf, this);

      this.getPathInfo = __bind(this.getPathInfo, this);

      this.classes = liftToTable(classes);
    }

    Model.prototype.getPathInfo = function(path, subcls) {
      return PathInfo.parse(this, path, subcls);
    };

    Model.prototype.getSubclassesOf = function(cls) {
      var cd, clazz, ret, _, _ref1, _ref2;
      clazz = cls && cls.name ? cls : this.classes[cls];
      if (clazz == null) {
        throw new Error("" + cls + " is not a table");
      }
      ret = [clazz.name];
      _ref1 = this.classes;
      for (_ in _ref1) {
        cd = _ref1[_];
        if (_ref2 = clazz.name, __indexOf.call(cd.parents(), _ref2) >= 0) {
          ret = ret.concat(this.getSubclassesOf(cd));
        }
      }
      return ret;
    };

    Model.prototype.getAncestorsOf = function(cls) {
      var ancestors, clazz, superC, _i, _len;
      clazz = cls && cls.name ? cls : this.classes[cls];
      if (clazz == null) {
        throw new Error("" + cls + " is not a table");
      }
      ancestors = clazz.parents();
      for (_i = 0, _len = ancestors.length; _i < _len; _i++) {
        superC = ancestors[_i];
        ancestors.push(this.getAncestorsOf(superC));
      }
      return flatten(ancestors);
    };

    Model.prototype.findSharedAncestor = function(classA, classB) {
      var a_ancestry, b_ancestry, firstCommon;
      if (classB === null || classA === null) {
        return null;
      }
      if (classA === classB) {
        return classA;
      }
      a_ancestry = this.getAncestorsOf(classA);
      if (__indexOf.call(a_ancestry, classB) >= 0) {
        return classB;
      }
      b_ancestry = this.getAncestorsOf(classB);
      if (__indexOf.call(b_ancestry, classA) >= 0) {
        return classA;
      }
      firstCommon = find(a_ancestry, function(a) {
        return __indexOf.call(b_ancestry, a) >= 0;
      });
      return firstCommon;
    };

    Model.prototype.findCommonType = function(xs) {
      if (xs == null) {
        xs = [];
      }
      return xs.reduce(this.findSharedAncestor);
    };

    return Model;

  })();

  Model.prototype.makePath = Model.prototype.getPathInfo;

  Model.prototype.findCommonTypeOfMultipleClasses = Model.prototype.findCommonType;

  Model.load = function(data) {
    try {
      return new Model(data);
    } catch (e) {
      throw new Error("Error loading model: " + e);
    }
  };

  Model.INTEGRAL_TYPES = ["int", "Integer", "long", "Long"];

  Model.FRACTIONAL_TYPES = ["double", "Double", "float", "Float"];

  Model.NUMERIC_TYPES = Model.INTEGRAL_TYPES.concat(Model.FRACTIONAL_TYPES);

  Model.BOOLEAN_TYPES = ["boolean", "Boolean"];

  intermine.Model = Model;

}).call(this);

},{"./path":21,"./table":25,"./util":27}],21:[function(require,module,exports){
(function() {
  var NAMES, PARSED, PathInfo, any, concatMap, copy, error, get, intermine, makeKey, set, success, utils, withCB,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  intermine = exports;

  utils = require('./util');

  withCB = utils.withCB, concatMap = utils.concatMap, get = utils.get, any = utils.any, set = utils.set, copy = utils.copy, success = utils.success, error = utils.error;

  NAMES = {};

  PARSED = {};

  makeKey = function(model, path, subclasses) {
    var k, v, _ref;
    return "" + (model != null ? model.name : void 0) + "|" + (model != null ? (_ref = model.service) != null ? _ref.root : void 0 : void 0) + "|" + path + ":" + ((function() {
      var _results;
      _results = [];
      for (k in subclasses) {
        v = subclasses[k];
        _results.push("" + k + "=" + v);
      }
      return _results;
    })());
  };

  PathInfo = (function() {

    function PathInfo(_arg) {
      var _ref;
      this.root = _arg.root, this.model = _arg.model, this.descriptors = _arg.descriptors, this.subclasses = _arg.subclasses, this.displayName = _arg.displayName, this.ident = _arg.ident;
      this.allDescriptors = __bind(this.allDescriptors, this);

      this.getChildNodes = __bind(this.getChildNodes, this);

      this.getDisplayName = __bind(this.getDisplayName, this);

      this.isa = __bind(this.isa, this);

      this.append = __bind(this.append, this);

      this.getParent = __bind(this.getParent, this);

      this.getEndClass = __bind(this.getEndClass, this);

      this.containsCollection = __bind(this.containsCollection, this);

      this.isCollection = __bind(this.isCollection, this);

      this.isReference = __bind(this.isReference, this);

      this.isClass = __bind(this.isClass, this);

      this.isAttribute = __bind(this.isAttribute, this);

      this.isRoot = __bind(this.isRoot, this);

      this.end = this.descriptors[this.descriptors.length - 1];
      if ((_ref = this.ident) == null) {
        this.ident = makeKey(this.model, this, this.subclasses);
      }
    }

    PathInfo.prototype.isRoot = function() {
      return this.descriptors.length === 0;
    };

    PathInfo.prototype.isAttribute = function() {
      return (this.end != null) && !(this.end.referencedType != null);
    };

    PathInfo.prototype.isClass = function() {
      return this.isRoot() || (this.end.referencedType != null);
    };

    PathInfo.prototype.isReference = function() {
      var _ref;
      return ((_ref = this.end) != null ? _ref.referencedType : void 0) != null;
    };

    PathInfo.prototype.isCollection = function() {
      var _ref, _ref1;
      return (_ref = (_ref1 = this.end) != null ? _ref1.isCollection : void 0) != null ? _ref : false;
    };

    PathInfo.prototype.containsCollection = function() {
      return any(this.descriptors, function(x) {
        return x.isCollection;
      });
    };

    PathInfo.prototype.getEndClass = function() {
      var _ref;
      return this.model.classes[this.subclasses[this.toString()] || ((_ref = this.end) != null ? _ref.referencedType : void 0)] || this.root;
    };

    PathInfo.prototype.getParent = function() {
      var data;
      if (this.isRoot()) {
        throw new Error("Root paths do not have parents");
      }
      data = {
        root: this.root,
        model: this.model,
        descriptors: this.descriptors.slice(0, this.descriptors.length - 1),
        subclasses: this.subclasses
      };
      return new PathInfo(data);
    };

    PathInfo.prototype.append = function(attr) {
      var data, fld;
      if (this.isAttribute()) {
        throw new Error("" + this + " is an attribute.");
      }
      fld = typeof attr === 'string' ? this.getType().fields[attr] : attr;
      if (fld == null) {
        throw new Error("" + attr + " is not a field of " + (this.getType()));
      }
      data = {
        root: this.root,
        model: this.model,
        descriptors: this.descriptors.concat([fld]),
        subclasses: this.subclasses
      };
      return new PathInfo(data);
    };

    PathInfo.prototype.isa = function(clazz) {
      var name, type;
      if (this.isAttribute()) {
        return this.getType() === clazz;
      } else {
        name = clazz.name ? clazz.name : '' + clazz;
        type = this.getType();
        return (name === type.name) || (__indexOf.call(this.model.getAncestorsOf(type), name) >= 0);
      }
    };

    PathInfo.prototype.getDisplayName = function(cb) {
      var cached, custom, params, path, _ref,
        _this = this;
      if (custom = this.displayName) {
        return success(custom);
      }
      if ((_ref = this.namePromise) == null) {
        this.namePromise = (cached = NAMES[this.ident]) ? success(cached) : !(this.model.service != null) ? error("No service") : (path = 'model' + (concatMap(function(d) {
          return '/' + d.name;
        }))(this.allDescriptors()), params = (set({
          format: 'json'
        }))(copy(this.subclasses)), this.model.service.get(path, params).then(get('display')).then(function(n) {
          var _name, _ref1;
          return (_ref1 = NAMES[_name = _this.ident]) != null ? _ref1 : NAMES[_name] = n;
        }));
      }
      return withCB(cb, this.namePromise);
    };

    PathInfo.prototype.getChildNodes = function() {
      var fld, name, _ref, _ref1, _results;
      _ref1 = ((_ref = this.getEndClass()) != null ? _ref.fields : void 0) || {};
      _results = [];
      for (name in _ref1) {
        fld = _ref1[name];
        _results.push(this.append(fld));
      }
      return _results;
    };

    PathInfo.prototype.allDescriptors = function() {
      return [this.root].concat(this.descriptors);
    };

    PathInfo.prototype.toString = function() {
      return this.allDescriptors().map(get('name')).join('.');
    };

    PathInfo.prototype.equals = function(other) {
      return other && (other.ident != null) && this.ident === other.ident;
    };

    PathInfo.prototype.getType = function() {
      var _ref, _ref1;
      return ((_ref = this.end) != null ? (_ref1 = _ref.type) != null ? _ref1.replace(/java\.lang\./, '') : void 0 : void 0) || this.getEndClass();
    };

    return PathInfo;

  })();

  PathInfo.prototype.toPathString = PathInfo.prototype.toString;

  PathInfo.parse = function(model, path, subclasses) {
    var cached, cd, descriptors, fld, ident, keyPath, part, parts, root;
    if (subclasses == null) {
      subclasses = {};
    }
    ident = makeKey(model, path, subclasses);
    if (cached = PARSED[ident]) {
      return cached;
    }
    parts = (path + '').split('.');
    root = cd = model.classes[parts.shift()];
    keyPath = root.name;
    descriptors = (function() {
      var _i, _len, _ref, _results;
      _results = [];
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        fld = (cd != null ? cd.fields[part] : void 0) || ((_ref = (cd = model.classes[subclasses[keyPath]])) != null ? _ref.fields[part] : void 0);
        if (!fld) {
          throw new Error("Could not find " + part + " in " + cd + " when parsing " + path);
        }
        keyPath += "." + part;
        cd = model.classes[fld.type || fld.referencedType];
        _results.push(fld);
      }
      return _results;
    })();
    return PARSED[ident] = new PathInfo({
      root: root,
      model: model,
      descriptors: descriptors,
      subclasses: subclasses,
      ident: ident
    });
  };

  PathInfo.flushCache = function() {
    PARSED = {};
    return NAMES = {};
  };

  intermine.PathInfo = PathInfo;

}).call(this);

},{"./util":27}],22:[function(require,module,exports){
(function() {

  module.exports = require('promise');

}).call(this);

},{"promise":38}],23:[function(require,module,exports){
(function() {
  var BASIC_ATTRS, CODES, LIST_PIPE, Query, RESULTS_METHODS, SIMPLE_ATTRS, conAttrs, conStr, conToJSON, conValStr, concatMap, copyCon, decapitate, didntRemove, f, filter, fold, get, get_canonical_op, headLess, id, idConStr, intermine, interpretConArray, interpretConstraint, invoke, merge, mth, multiConStr, noUndefVals, noValueConStr, pairsToObj, partition, removeIrrelevantSortOrders, simpleConStr, stringToSortOrder, take, toQueryString, typeConStr, union, utils, withCB, _fn, _get_data_fetcher, _i, _j, _len, _len1, _ref,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  intermine = exports;

  intermine.xml = require('./xml');

  utils = require('./util');

  withCB = utils.withCB, merge = utils.merge, pairsToObj = utils.pairsToObj, filter = utils.filter, partition = utils.partition, fold = utils.fold, take = utils.take, concatMap = utils.concatMap, id = utils.id, get = utils.get, invoke = utils.invoke;

  toQueryString = utils.querystring;

  get_canonical_op = function(orig) {
    var canonical;
    canonical = (orig != null ? orig.toLowerCase : void 0) != null ? Query.OP_DICT[orig.toLowerCase()] : null;
    if (!canonical) {
      throw new Error("Illegal constraint operator: " + orig);
    }
    return canonical;
  };

  BASIC_ATTRS = ['path', 'op', 'code'];

  SIMPLE_ATTRS = BASIC_ATTRS.concat(['value', 'extraValue']);

  RESULTS_METHODS = ['rowByRow', 'eachRow', 'recordByRecord', 'eachRecord', 'records', 'rows', 'table', 'tableRows', 'values'];

  LIST_PIPE = function(service) {
    return utils.compose(service.fetchList, get('listName'));
  };

  CODES = [null, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];

  decapitate = function(x) {
    if (x == null) {
      x = '';
    }
    return x.substr(x.indexOf('.'));
  };

  conValStr = function(v) {
    if (v != null) {
      return "<value>" + (utils.escape(v)) + "</value>";
    } else {
      return "<nullValue/>";
    }
  };

  conAttrs = function(c, names) {
    var k, v;
    return ((function() {
      var _results;
      _results = [];
      for (k in c) {
        v = c[k];
        if ((__indexOf.call(names, k) >= 0)) {
          _results.push("" + k + "=\"" + (utils.escape(v)) + "\" ");
        }
      }
      return _results;
    })()).join('');
  };

  noValueConStr = function(c) {
    return "<constraint " + (conAttrs(c, BASIC_ATTRS)) + "/>";
  };

  typeConStr = function(c) {
    return "<constraint " + (conAttrs(c, ['path', 'type'])) + "/>";
  };

  simpleConStr = function(c) {
    return "<constraint " + (conAttrs(c, SIMPLE_ATTRS)) + "/>";
  };

  multiConStr = function(c) {
    return "<constraint " + (conAttrs(c, BASIC_ATTRS)) + ">" + (concatMap(conValStr)(c.values)) + "</constraint>";
  };

  idConStr = function(c) {
    return "<constraint " + (conAttrs(c, BASIC_ATTRS)) + "ids=\"" + (c.ids.join(',')) + "\"/>";
  };

  conStr = function(c) {
    var _ref;
    if (c.values != null) {
      return multiConStr(c);
    } else if (c.ids != null) {
      return idConStr(c);
    } else if (!(c.op != null)) {
      return typeConStr(c);
    } else if (_ref = c.op, __indexOf.call(Query.NULL_OPS, _ref) >= 0) {
      return noValueConStr(c);
    } else {
      return simpleConStr(c);
    }
  };

  headLess = function(path) {
    return path.replace(/^[^\.]+\./, '');
  };

  copyCon = function(con) {
    var code, extraValue, ids, op, path, type, value, values;
    path = con.path, type = con.type, op = con.op, value = con.value, values = con.values, extraValue = con.extraValue, ids = con.ids, code = con.code;
    ids = ids != null ? ids.slice() : void 0;
    values = values != null ? values.slice() : void 0;
    return noUndefVals({
      path: path,
      type: type,
      op: op,
      value: value,
      values: values,
      extraValue: extraValue,
      ids: ids,
      code: code
    });
  };

  conToJSON = function(con) {
    var copy;
    copy = copyCon(con);
    copy.path = headLess(copy.path);
    return copy;
  };

  noUndefVals = function(x) {
    var k, v;
    for (k in x) {
      v = x[k];
      if (v == null) {
        delete x[k];
      }
    }
    return x;
  };

  didntRemove = function(orig, reduced) {
    return "Did not remove a single constraint. original = " + orig + ", reduced = " + reduced;
  };

  interpretConstraint = function(path, con) {
    var constraint, k, keys, v, x, _ref, _ref1;
    constraint = {
      path: path
    };
    if (con === null) {
      constraint.op = 'IS NULL';
    } else if (utils.isArray(con)) {
      constraint.op = 'ONE OF';
      constraint.values = con;
    } else if ((_ref = typeof con) === 'string' || _ref === 'number') {
      if (_ref1 = typeof con.toUpperCase === "function" ? con.toUpperCase() : void 0, __indexOf.call(Query.NULL_OPS, _ref1) >= 0) {
        constraint.op = con;
      } else {
        constraint.op = '=';
        constraint.value = con;
      }
    } else {
      keys = (function() {
        var _results;
        _results = [];
        for (k in con) {
          x = con[k];
          _results.push(k);
        }
        return _results;
      })();
      if (__indexOf.call(keys, 'isa') >= 0) {
        if (utils.isArray(con.isa)) {
          constraint.op = k;
          constraint.values = con.isa;
        } else {
          constraint.type = con.isa;
        }
      } else {
        if (__indexOf.call(keys, 'extraValue') >= 0) {
          constraint.extraValue = con.extraValue;
        }
        for (k in con) {
          v = con[k];
          if (!(k !== 'extraValue')) {
            continue;
          }
          constraint.op = k;
          if (utils.isArray(v)) {
            constraint.values = v;
          } else {
            constraint.value = v;
          }
        }
      }
    }
    return constraint;
  };

  interpretConArray = function(conArgs) {
    var a0, constraint, v, _ref;
    conArgs = conArgs.slice();
    constraint = {
      path: conArgs.shift()
    };
    if (conArgs.length === 1) {
      a0 = conArgs[0];
      if (_ref = typeof a0.toUpperCase === "function" ? a0.toUpperCase() : void 0, __indexOf.call(Query.NULL_OPS, _ref) >= 0) {
        constraint.op = a0;
      } else {
        constraint.type = a0;
      }
    } else if (conArgs.length >= 2) {
      constraint.op = conArgs[0];
      v = conArgs[1];
      if (utils.isArray(v)) {
        constraint.values = v;
      } else {
        constraint.value = v;
      }
      if (conArgs.length === 3) {
        constraint.extraValue = conArgs[2];
      }
    }
    return constraint;
  };

  stringToSortOrder = function(str) {
    var i, parts, pathIndices, x, _i, _len, _results;
    if (str == null) {
      return [];
    }
    parts = str.split(/\s+/);
    pathIndices = (function() {
      var _i, _ref, _results;
      _results = [];
      for (x = _i = 0, _ref = parts.length / 2; 0 <= _ref ? _i < _ref : _i > _ref; x = 0 <= _ref ? ++_i : --_i) {
        _results.push(x * 2);
      }
      return _results;
    })();
    _results = [];
    for (_i = 0, _len = pathIndices.length; _i < _len; _i++) {
      i = pathIndices[_i];
      _results.push([parts[i], parts[i + 1]]);
    }
    return _results;
  };

  removeIrrelevantSortOrders = function() {
    var oe, oldOrder;
    oldOrder = this.sortOrder;
    this.sortOrder = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = oldOrder.length; _i < _len; _i++) {
        oe = oldOrder[_i];
        if (this.isRelevant(oe.path)) {
          _results.push(oe);
        }
      }
      return _results;
    }).call(this);
    if (oldOrder.length !== this.sortOrder.length) {
      return this.trigger('change:sortorder change:orderby', this.sortOrder.slice());
    }
  };

  Query = (function() {
    var addPI, cAttrs, kids, parseSummary, qAttrs, scFold, toAttrPairs, toPathAndType, xmlAttr;

    Query.JOIN_STYLES = ['INNER', 'OUTER'];

    Query.BIO_FORMATS = ['gff3', 'fasta', 'bed'];

    Query.NULL_OPS = ['IS NULL', 'IS NOT NULL'];

    Query.ATTRIBUTE_VALUE_OPS = ["=", "!=", ">", ">=", "<", "<=", "CONTAINS", "LIKE", "NOT LIKE"];

    Query.MULTIVALUE_OPS = ['ONE OF', 'NONE OF'];

    Query.TERNARY_OPS = ['LOOKUP'];

    Query.LOOP_OPS = ['=', '!='];

    Query.LIST_OPS = ['IN', 'NOT IN'];

    Query.OP_DICT = {
      '=': '=',
      '==': '==',
      'eq': '=',
      'eqq': '==',
      '!=': '!=',
      'ne': '!=',
      '>': '>',
      'gt': '>',
      '>=': '>=',
      'ge': '>=',
      '<': '<',
      'lt': '<',
      '<=': '<=',
      'le': '<=',
      'contains': 'CONTAINS',
      'CONTAINS': 'CONTAINS',
      'like': 'LIKE',
      'LIKE': 'LIKE',
      'not like': 'NOT LIKE',
      'NOT LIKE': 'NOT LIKE',
      'lookup': 'LOOKUP',
      'IS NULL': 'IS NULL',
      'is null': 'IS NULL',
      'IS NOT NULL': 'IS NOT NULL',
      'is not null': 'IS NOT NULL',
      'ONE OF': 'ONE OF',
      'one of': 'ONE OF',
      'NONE OF': 'NONE OF',
      'none of': 'NONE OF',
      'in': 'IN',
      'not in': 'NOT IN',
      'IN': 'IN',
      'NOT IN': 'NOT IN',
      'WITHIN': 'WITHIN',
      'within': 'WITHIN',
      'OVERLAPS': 'OVERLAPS',
      'overlaps': 'OVERLAPS',
      'ISA': 'ISA',
      'isa': 'ISA'
    };

    Query.prototype.on = function(events, callback, context) {
      var calls, ev, list, tail, _ref, _ref1, _ref2;
      events = events.split(/\s+/);
      calls = ((_ref = this._callbacks) != null ? _ref : this._callbacks = {});
      while (ev = events.shift()) {
        list = ((_ref1 = calls[ev]) != null ? _ref1 : calls[ev] = {});
        tail = ((_ref2 = list.tail) != null ? _ref2 : list.tail = (list.next = {}));
        tail.callback = callback;
        tail.context = context;
        list.tail = tail.next = {};
      }
      return this;
    };

    Query.prototype.bind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.on.apply(this, args);
    };

    Query.prototype.off = function(events, callback, context) {
      var calls, current, ev, last, linkedList, node, remove, _i, _len, _ref;
      if (events == null) {
        this._callbacks = {};
        return this;
      }
      events = events.split(/\s+/);
      calls = ((_ref = this._callbacks) != null ? _ref : this._callbacks = {});
      for (_i = 0, _len = events.length; _i < _len; _i++) {
        ev = events[_i];
        if (callback != null) {
          current = linkedList = calls[ev] || {};
          last = linkedList.tail;
          while ((node = current.next) !== last) {
            remove = (!(context != null) || node.context === context) && (callback === node.callback);
            if (remove) {
              current.next = node.next || last;
              node = current;
            } else {
              current = node;
            }
          }
        } else {
          delete calls[ev];
        }
      }
      return this;
    };

    Query.prototype.unbind = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.off.apply(this, args);
    };

    Query.prototype.once = function(events, callback, context) {
      var f,
        _this = this;
      f = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        callback.apply(context, args);
        return _this.off(events, f);
      };
      return this.on(events, f);
    };

    Query.prototype.emit = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.trigger.apply(this, args);
    };

    Query.prototype.trigger = function() {
      var all, args, calls, event, events, node, rest, tail;
      events = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      calls = this._callbacks;
      if (!calls) {
        return this;
      }
      all = calls['all'];
      (events = events.split(/\s+/)).push(null);
      while (event = events.shift()) {
        if (all) {
          events.push({
            next: all.next,
            tail: all.tail,
            event: event
          });
        }
        if (!(node = calls[event])) {
          continue;
        }
        events.push({
          next: node.next,
          tail: node.tail
        });
      }
      while (node = events.pop()) {
        tail = node.tail;
        args = node.event ? [node.event].concat(rest) : rest;
        while ((node = node.next) !== tail) {
          node.callback.apply(node.context || this, args);
        }
      }
      return this;
    };

    qAttrs = ['name', 'view', 'sortOrder', 'constraintLogic', 'title', 'description', 'comment'];

    cAttrs = ['path', 'type', 'op', 'code', 'value', 'ids'];

    toAttrPairs = function(el, attrs) {
      var x, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = attrs.length; _i < _len; _i++) {
        x = attrs[_i];
        if (el.hasAttribute(x)) {
          _results.push([x, el.getAttribute(x)]);
        }
      }
      return _results;
    };

    kids = function(el, name) {
      var kid, _i, _len, _ref, _results;
      _ref = el.getElementsByTagName(name);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        kid = _ref[_i];
        _results.push(kid);
      }
      return _results;
    };

    xmlAttr = function(name) {
      return function(el) {
        return el.getAttribute(name);
      };
    };

    Query.fromXML = function(xml) {
      var con, dom, j, pathOf, q, query, styleOf;
      dom = intermine.xml.parse(xml);
      query = kids(dom, 'query')[0] || kids(dom, 'template')[0];
      if (!query) {
        throw new Error("no query in xml");
      }
      pathOf = xmlAttr('path');
      styleOf = xmlAttr('style');
      q = pairsToObj(toAttrPairs(query, qAttrs));
      q.view = q.view.split(/\s+/);
      q.sortOrder = stringToSortOrder(q.sortOrder);
      q.joins = (function() {
        var _i, _len, _ref, _results;
        _ref = kids(query, 'join');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          j = _ref[_i];
          if (styleOf(j) === 'OUTER') {
            _results.push(pathOf(j));
          }
        }
        return _results;
      })();
      q.constraints = (function() {
        var _i, _len, _ref, _results;
        _ref = kids(query, 'constraint');
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          con = _ref[_i];
          _results.push((function(con) {
            var c, tn, v, values, x;
            c = pairsToObj(toAttrPairs(con, cAttrs));
            if (c.ids != null) {
              c.ids = (function() {
                var _j, _len1, _ref1, _results1;
                _ref1 = c.ids.split(',');
                _results1 = [];
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  x = _ref1[_j];
                  _results1.push(parseInt(x, 10));
                }
                return _results1;
              })();
            }
            values = kids(con, 'value');
            if (values.length) {
              c.values = (function() {
                var _j, _len1, _results1;
                _results1 = [];
                for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
                  v = values[_j];
                  _results1.push(((function() {
                    var _k, _len2, _ref1, _results2;
                    _ref1 = v.childNodes;
                    _results2 = [];
                    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                      tn = _ref1[_k];
                      _results2.push(tn.data);
                    }
                    return _results2;
                  })()).join(''));
                }
                return _results1;
              })();
            }
            return c;
          })(con));
        }
        return _results;
      })();
      return q;
    };

    Query.prototype.constraints = [];

    Query.prototype.views = [];

    Query.prototype.joins = {};

    Query.prototype.constraintLogic = '';

    Query.prototype.sortOrder = '';

    Query.prototype.name = null;

    Query.prototype.title = null;

    Query.prototype.comment = null;

    Query.prototype.description = null;

    function Query(properties, service) {
      this.addConstraint = __bind(this.addConstraint, this);

      this.expandStar = __bind(this.expandStar, this);

      this.adjustPath = __bind(this.adjustPath, this);

      this.select = __bind(this.select, this);

      var prop, _i, _len, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
      if (properties == null) {
        properties = {};
      }
      this.constraints = [];
      this.views = [];
      this.joins = {};
      this.displayNames = utils.copy((_ref = (_ref1 = properties.displayNames) != null ? _ref1 : properties.aliases) != null ? _ref : {});
      _ref2 = ['name', 'title', 'comment', 'description'];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        prop = _ref2[_i];
        if (properties[prop] != null) {
          this[prop] = properties[prop];
        }
      }
      this.service = service != null ? service : {};
      this.model = (_ref3 = properties.model) != null ? _ref3 : {};
      this.summaryFields = (_ref4 = properties.summaryFields) != null ? _ref4 : {};
      this.root = (_ref5 = properties.root) != null ? _ref5 : properties.from;
      this.maxRows = (_ref6 = (_ref7 = properties.size) != null ? _ref7 : properties.limit) != null ? _ref6 : properties.maxRows;
      this.start = (_ref8 = (_ref9 = properties.start) != null ? _ref9 : properties.offset) != null ? _ref8 : 0;
      this.select(properties.views || properties.view || properties.select || []);
      this.addConstraints(properties.constraints || properties.where || []);
      this.addJoins(properties.joins || properties.join || []);
      this.orderBy(properties.sortOrder || properties.orderBy || []);
      if (properties.constraintLogic != null) {
        this.constraintLogic = properties.constraintLogic;
      }
      this.on('change:views', removeIrrelevantSortOrders, this);
    }

    Query.prototype.removeFromSelect = function(unwanted) {
      var mapFn, so, uw, v;
      if (unwanted == null) {
        unwanted = [];
      }
      unwanted = utils.stringList(unwanted);
      mapFn = utils.compose(this.expandStar, this.adjustPath);
      unwanted = utils.flatten((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = unwanted.length; _i < _len; _i++) {
          uw = unwanted[_i];
          _results.push(mapFn(uw));
        }
        return _results;
      })());
      this.sortOrder = (function() {
        var _i, _len, _ref, _ref1, _results;
        _ref = this.sortOrder;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          so = _ref[_i];
          if (!(_ref1 = so.path, __indexOf.call(unwanted, _ref1) >= 0)) {
            _results.push(so);
          }
        }
        return _results;
      }).call(this);
      this.views = (function() {
        var _i, _len, _ref, _results;
        _ref = this.views;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          if (!(__indexOf.call(unwanted, v) >= 0)) {
            _results.push(v);
          }
        }
        return _results;
      }).call(this);
      this.trigger('remove:view', unwanted);
      return this.trigger('change:views', this.views);
    };

    Query.prototype.removeConstraint = function(con, silent) {
      var c, iscon, orig, reduced;
      if (silent == null) {
        silent = false;
      }
      orig = this.constraints;
      iscon = typeof con === 'string' ? (function(c) {
        return c.code === con;
      }) : (function(c) {
        var _ref, _ref1;
        return (c.path === con.path) && (c.op === con.op) && (c.value === con.value) && (c.extraValue === con.extraValue) && (con.type === c.type) && (((_ref = c.values) != null ? _ref.join('%%') : void 0) === ((_ref1 = con.values) != null ? _ref1.join('%%') : void 0));
      });
      reduced = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = orig.length; _i < _len; _i++) {
          c = orig[_i];
          if (!iscon(c)) {
            _results.push(c);
          }
        }
        return _results;
      })();
      if (reduced.length !== orig.length - 1) {
        throw new Error(didntRemove(orig, reduced));
      }
      this.constraints = reduced;
      if (!silent) {
        this.trigger('change:constraints');
        return this.trigger('removed:constraint', utils.find(orig, iscon));
      }
    };

    Query.prototype.addToSelect = function(views) {
      var dups, mapFn, p, toAdd, v, x, _ref;
      if (views == null) {
        views = [];
      }
      views = utils.stringList(views);
      mapFn = utils.compose(this.expandStar, this.adjustPath);
      toAdd = utils.flatten((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = views.length; _i < _len; _i++) {
          v = views[_i];
          _results.push(mapFn(v));
        }
        return _results;
      })());
      dups = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = toAdd.length; _i < _len; _i++) {
          p = toAdd[_i];
          if (__indexOf.call(this.views, p) >= 0) {
            _results.push(p);
          }
        }
        return _results;
      }).call(this);
      if (dups.length) {
        throw new Error("" + dups + " already in the select list");
      }
      dups = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = toAdd.length; _i < _len; _i++) {
          p = toAdd[_i];
          if (((function() {
            var _j, _len1, _results1;
            _results1 = [];
            for (_j = 0, _len1 = toAdd.length; _j < _len1; _j++) {
              x = toAdd[_j];
              if (x === p) {
                _results1.push(x);
              }
            }
            return _results1;
          })()).length > 1) {
            _results.push(p);
          }
        }
        return _results;
      })();
      if (dups.length) {
        throw new Error("" + dups + " specified multiple times as arguments to addToSelect");
      }
      (_ref = this.views).push.apply(_ref, toAdd);
      return this.trigger('add:view change:views', toAdd);
    };

    Query.prototype.select = function(views) {
      var oldViews;
      oldViews = this.views.slice();
      try {
        this.views = [];
        this.addToSelect(views);
      } catch (e) {
        this.views = oldViews;
        utils.error(e);
      }
      return this;
    };

    Query.prototype.adjustPath = function(path) {
      path = path && path.name ? path.name : "" + path;
      if (this.root != null) {
        if (!path.match("^" + this.root)) {
          path = this.root + "." + path;
        }
      } else {
        this.root = path.split('.')[0];
      }
      return path;
    };

    Query.prototype.getPossiblePaths = function(depth) {
      var getPaths, _base, _ref, _ref1,
        _this = this;
      if (depth == null) {
        depth = 3;
      }
      getPaths = function(root, d) {
        var cd, field, name, others, path, ret, subPaths;
        ret = [root];
        path = _this.getPathInfo(root);
        if (path.isAttribute()) {
          return ret;
        } else {
          cd = _this.getPathInfo(root).getType();
          subPaths = concatMap(function(ref) {
            return getPaths("" + root + "." + ref.name, d - 1);
          });
          others = cd && (d > 0) ? subPaths((function() {
            var _ref, _results;
            _ref = cd.fields;
            _results = [];
            for (name in _ref) {
              field = _ref[name];
              _results.push(field);
            }
            return _results;
          })()) : [];
          return ret.concat(others);
        }
      };
      if ((_ref = this._possiblePaths) == null) {
        this._possiblePaths = {};
      }
      return (_ref1 = (_base = this._possiblePaths)[depth]) != null ? _ref1 : _base[depth] = getPaths(this.root, depth);
    };

    Query.prototype.getPathInfo = function(path) {
      var adjusted, pi, _ref;
      adjusted = this.adjustPath(path);
      pi = (_ref = this.model) != null ? typeof _ref.getPathInfo === "function" ? _ref.getPathInfo(adjusted, this.getSubclasses()) : void 0 : void 0;
      if (pi && adjusted in this.displayNames) {
        pi.displayName = this.displayNames[adjusted];
      }
      return pi;
    };

    Query.prototype.makePath = Query.prototype.getPathInfo;

    toPathAndType = function(c) {
      return [c.path, c.type];
    };

    scFold = utils.compose(pairsToObj, utils.map(toPathAndType), filter(get('type')));

    Query.prototype.getSubclasses = function() {
      return scFold(this.constraints);
    };

    Query.prototype.getType = function(path) {
      return this.getPathInfo(path).getType();
    };

    Query.prototype.getViewNodes = function() {
      var p, toParentNode,
        _this = this;
      toParentNode = function(v) {
        return _this.getPathInfo(v).getParent();
      };
      return utils.uniqBy(String, (function() {
        var _i, _len, _ref, _results;
        _ref = this.views;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push(toParentNode(p));
        }
        return _results;
      }).call(this));
    };

    Query.prototype.isInView = function(path) {
      var pi, pstr, _ref;
      pi = this.getPathInfo(path);
      if (!pi) {
        throw new Error("Invalid path: " + path);
      }
      if (pi.isAttribute()) {
        return _ref = pi.toString(), __indexOf.call(this.views, _ref) >= 0;
      } else {
        pstr = pi.toString();
        return utils.any(this.getViewNodes(), function(n) {
          return n.toString() === pstr;
        });
      }
    };

    Query.prototype.isConstrained = function(path, includeAttrs) {
      var pi, test,
        _this = this;
      if (includeAttrs == null) {
        includeAttrs = false;
      }
      pi = this.getPathInfo(path);
      if (!pi) {
        throw new Error("Invalid path: " + path);
      }
      test = function(c) {
        return (c.op != null) && c.path === pi.toString();
      };
      if ((!pi.isAttribute()) && includeAttrs) {
        test = function(c) {
          return (c.op != null) && (c.path === pi.toString() || pi.equals(_this.getPathInfo(c.path).getParent()));
        };
      }
      return utils.any(this.constraints, test);
    };

    Query.prototype.canHaveMultipleValues = function(path) {
      return this.getPathInfo(path).containsCollection();
    };

    Query.prototype.getQueryNodes = function() {
      var c, constrainedNodes, pi, viewNodes;
      viewNodes = this.getViewNodes();
      constrainedNodes = (function() {
        var _i, _len, _ref, _results;
        _ref = this.constraints;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (!(!(c.type != null))) {
            continue;
          }
          pi = this.getPathInfo(c.path);
          if (pi.isAttribute()) {
            _results.push(pi.getParent());
          } else {
            _results.push(pi);
          }
        }
        return _results;
      }).call(this);
      return utils.uniqBy(String, viewNodes.concat(constrainedNodes));
    };

    Query.prototype.isInQuery = function(p) {
      var c, pi, pstr, _i, _len, _ref;
      pi = this.getPathInfo(p);
      if (pi) {
        pstr = pi.toPathString();
        _ref = this.views.concat((function() {
          var _j, _len, _ref, _results;
          _ref = this.constraints;
          _results = [];
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            c = _ref[_j];
            if (!(c.type != null)) {
              _results.push(c.path);
            }
          }
          return _results;
        }).call(this));
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          if (0 === p.indexOf(pstr)) {
            return true;
          }
        }
        return false;
      }
      return true;
    };

    Query.prototype.isRelevant = function(path) {
      var nodes, pi, sought;
      pi = this.getPathInfo(path);
      if (pi.isAttribute()) {
        pi = pi.getParent();
      }
      sought = pi.toString();
      nodes = this.getViewNodes();
      return utils.any(nodes, function(n) {
        return n.toPathString() === sought;
      });
    };

    Query.prototype.expandStar = function(path) {
      var attrViews, cd, expand, fn, n, name, pathStem, starViews;
      if (/\*$/.test(path)) {
        pathStem = path.substr(0, path.lastIndexOf('.'));
        expand = function(x) {
          return pathStem + x;
        };
        cd = this.getType(pathStem);
        if (/\.\*$/.test(path)) {
          if (cd && this.summaryFields[cd.name]) {
            fn = utils.compose(expand, decapitate);
            return (function() {
              var _i, _len, _ref, _results;
              _ref = this.summaryFields[cd.name];
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                n = _ref[_i];
                if (!this.hasView(n)) {
                  _results.push(fn(n));
                }
              }
              return _results;
            }).call(this);
          }
        } else if (/\.\*\*$/.test(path)) {
          starViews = this.expandStar(pathStem + '.*');
          attrViews = (function() {
            var _results;
            _results = [];
            for (name in cd.attributes) {
              _results.push(expand("." + name));
            }
            return _results;
          })();
          return utils.uniqBy(id, starViews.concat(attrViews));
        }
      }
      return path;
    };

    Query.prototype.isOuterJoin = function(p) {
      return this.joins[this.adjustPath(p)] === 'OUTER';
    };

    Query.prototype.hasView = function(v) {
      var _ref;
      return this.views && (_ref = this.adjustPath(v), __indexOf.call(this.views, _ref) >= 0);
    };

    Query.prototype.count = function(cont) {
      if (this.service.count) {
        return this.service.count(this, cont);
      } else {
        throw new Error("This query has no service with count functionality attached.");
      }
    };

    Query.prototype.appendToList = function(target, cb) {
      var name, processor, req, toRun, updateTarget;
      if (target != null ? target.name : void 0) {
        name = target.name;
        updateTarget = function(err, list) {
          if (err == null) {
            return target.size = list.size;
          }
        };
      } else {
        name = String(target);
        updateTarget = null;
      }
      toRun = this.makeListQuery();
      req = {
        listName: name,
        query: toRun.toXML()
      };
      processor = LIST_PIPE(this.service);
      return withCB(updateTarget, cb, this.service.post('query/append/tolist', req).then(processor));
    };

    Query.prototype.makeListQuery = function() {
      var n, toRun, _i, _len, _ref;
      toRun = this.clone();
      if (toRun.views.length !== 1 || toRun.views[0] === null || !toRun.views[0].match(/\.id$/)) {
        toRun.select(['id']);
      }
      _ref = this.getViewNodes();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (!this.isOuterJoined(n)) {
          if (!(toRun.isInView(n || toRun.isConstrained(n))) && (n.getEndClass().fields.id != null)) {
            toRun.addConstraint([n.append('id'), 'IS NOT NULL']);
          }
        }
      }
      return toRun;
    };

    Query.prototype.saveAsList = function(options, cb) {
      var req, toRun;
      toRun = this.makeListQuery();
      req = utils.copy(options);
      req.listName = req.listName || req.name;
      req.query = toRun.toXML();
      if (options.tags) {
        req.tags = options.tags.join(';');
      }
      return withCB(cb, this.service.post('query/tolist', req).then(LIST_PIPE(this.service)));
    };

    Query.prototype.summarise = function(path, limit, cont) {
      return this.filterSummary(path, '', limit, cont);
    };

    Query.prototype.summarize = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.summarise.apply(this, args);
    };

    parseSummary = function(data) {
      var isNumeric, r, stats, _i, _len, _ref, _ref1;
      isNumeric = ((_ref = data.results[0]) != null ? _ref.max : void 0) != null;
      _ref1 = data.results;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        r = _ref1[_i];
        r.count = parseInt(r.count, 10);
      }
      stats = {
        uniqueValues: data.uniqueValues,
        filteredCount: data.filteredCount
      };
      if (isNumeric) {
        stats = merge(stats, data.results[0]);
      }
      data.stats = stats;
      return data;
    };

    Query.prototype.filterSummary = function(path, term, limit, cont) {
      var req, toRun, _ref;
      if (cont == null) {
        cont = (function() {});
      }
      if (utils.isFunction(limit)) {
        _ref = [limit, null], cont = _ref[0], limit = _ref[1];
      }
      path = this.adjustPath(path);
      toRun = this.clone();
      if (__indexOf.call(toRun.views, path) < 0) {
        toRun.views.push(path);
      }
      req = {
        query: toRun.toXML(),
        summaryPath: path,
        format: 'jsonrows'
      };
      if (limit) {
        req.size = limit;
      }
      if (term) {
        req.filterTerm = term;
      }
      return withCB(cont, this.service.post('query/results', req).then(parseSummary));
    };

    Query.prototype.clone = function(cloneEvents) {
      var cloned, k, v, _ref, _ref1;
      cloned = new Query(this, this.service);
      if ((_ref = cloned._callbacks) == null) {
        cloned._callbacks = {};
      }
      if (cloneEvents) {
        _ref1 = this._callbacks;
        for (k in _ref1) {
          if (!__hasProp.call(_ref1, k)) continue;
          v = _ref1[k];
          cloned._callbacks[k] = v;
        }
        cloned.off('change:views', removeIrrelevantSortOrders, this);
      }
      return cloned;
    };

    Query.prototype.next = function() {
      var clone;
      clone = this.clone();
      if (this.maxRows) {
        clone.start = this.start + this.maxRows;
      }
      return clone;
    };

    Query.prototype.previous = function() {
      var clone;
      clone = this.clone();
      if (this.maxRows) {
        clone.start = this.start - this.maxRows;
      } else {
        clone.start = 0;
      }
      return clone;
    };

    Query.prototype.getSortDirection = function(path) {
      var dir, so, _i, _len, _ref;
      path = this.adjustPath(path);
      _ref = this.sortOrder;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        so = _ref[_i];
        if (so.path === path) {
          dir = so.direction;
        }
      }
      return dir;
    };

    Query.prototype.isOuterJoined = function(path) {
      var dir, jp, _ref;
      path = this.adjustPath(path);
      _ref = this.joins;
      for (jp in _ref) {
        dir = _ref[jp];
        if (dir === 'OUTER' && path.indexOf(jp) === 0) {
          return true;
        }
      }
      return false;
    };

    Query.prototype.getOuterJoin = function(path) {
      var joinPaths, k,
        _this = this;
      path = this.adjustPath(path);
      joinPaths = ((function() {
        var _results;
        _results = [];
        for (k in this.joins) {
          _results.push(k);
        }
        return _results;
      }).call(this)).sort(function(a, b) {
        return b.length - a.length;
      });
      return utils.find(joinPaths, function(p) {
        return _this.joins[p] === 'OUTER' && path.indexOf(p) === 0;
      });
    };

    Query.prototype._parse_sort_order = function(input) {
      var direction, k, path, so, v, _ref;
      so = input;
      if (typeof input === 'string') {
        so = {
          path: input,
          direction: 'ASC'
        };
      } else if (utils.isArray(input)) {
        path = input[0], direction = input[1];
        so = {
          path: path,
          direction: direction
        };
      } else if (!(input.path != null)) {
        for (k in input) {
          v = input[k];
          _ref = [k, v], path = _ref[0], direction = _ref[1];
        }
        so = {
          path: path,
          direction: direction
        };
      }
      so.path = this.adjustPath(so.path);
      so.direction = so.direction.toUpperCase();
      return so;
    };

    Query.prototype.addOrSetSortOrder = function(so) {
      var currentDirection, oe, _i, _len, _ref;
      so = this._parse_sort_order(so);
      currentDirection = this.getSortDirection(so.path);
      if (!(currentDirection != null)) {
        return this.addSortOrder(so);
      } else if (currentDirection !== so.direction) {
        _ref = this.sortOrder;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          oe = _ref[_i];
          if (oe.path === so.path) {
            oe.direction = so.direction;
          }
        }
        return this.trigger('change:sortorder', this.sortOrder);
      }
    };

    Query.prototype.addSortOrder = function(so) {
      this.sortOrder.push(this._parse_sort_order(so));
      this.trigger('add:sortorder', so);
      return this.trigger('change:sortorder', this.sortOrder);
    };

    Query.prototype.orderBy = function(oes) {
      var oe, _i, _len;
      this.sortOrder = [];
      for (_i = 0, _len = oes.length; _i < _len; _i++) {
        oe = oes[_i];
        this.addSortOrder(this._parse_sort_order(oe));
      }
      return this.trigger('set:sortorder change:sortorder', this.sortOrder);
    };

    Query.prototype.addJoins = function(joins) {
      var j, k, v, _i, _len, _results, _results1;
      if (utils.isArray(joins)) {
        _results = [];
        for (_i = 0, _len = joins.length; _i < _len; _i++) {
          j = joins[_i];
          _results.push(this.addJoin(j));
        }
        return _results;
      } else {
        _results1 = [];
        for (k in joins) {
          v = joins[k];
          _results1.push(this.addJoin({
            path: k,
            style: v
          }));
        }
        return _results1;
      }
    };

    Query.prototype.addJoin = function(join) {
      var _ref, _ref1, _ref2;
      if (typeof join === 'string') {
        join = {
          path: join,
          style: 'OUTER'
        };
      }
      join.path = this.adjustPath(join.path);
      join.style = (_ref = (_ref1 = join.style) != null ? _ref1.toUpperCase() : void 0) != null ? _ref : join.style;
      if (_ref2 = join.style, __indexOf.call(Query.JOIN_STYLES, _ref2) < 0) {
        throw new Error("Invalid join style: " + join.style);
      }
      this.joins[join.path] = join.style;
      return this.trigger('set:join', join.path, join.style);
    };

    Query.prototype.setJoinStyle = function(path, style) {
      if (style == null) {
        style = 'OUTER';
      }
      path = this.adjustPath(path);
      style = style.toUpperCase();
      if (this.joins[path] !== style) {
        this.joins[path] = style;
        this.trigger('change:joins', {
          path: path,
          style: style
        });
      }
      return this;
    };

    Query.prototype.addConstraints = function(constraints) {
      var c, con, path, _fn, _i, _len,
        _this = this;
      this.__silent__ = true;
      if (utils.isArray(constraints)) {
        for (_i = 0, _len = constraints.length; _i < _len; _i++) {
          c = constraints[_i];
          this.addConstraint(c);
        }
      } else {
        _fn = function(path, con) {
          return _this.addConstraint(interpretConstraint(path, con));
        };
        for (path in constraints) {
          con = constraints[path];
          _fn(path, con);
        }
      }
      this.__silent__ = false;
      this.trigger('add:constraint');
      return this.trigger('change:constraints');
    };

    Query.prototype.addConstraint = function(constraint) {
      if (utils.isArray(constraint)) {
        constraint = interpretConArray(constraint);
      } else {
        constraint = copyCon(constraint);
      }
      constraint.path = this.adjustPath(constraint.path);
      if (constraint.type == null) {
        try {
          constraint.op = get_canonical_op(constraint.op);
        } catch (error) {
          throw new Error("Illegal operator: " + constraint.op);
        }
      }
      this.constraints.push(constraint);
      if ((this.constraintLogic != null) && this.constraintLogic !== '') {
        this.constraintLogic = "(" + this.constraintLogic + ") and " + CODES[this.constraints.length];
      }
      if (!this.__silent__) {
        this.trigger('add:constraint', constraint);
        this.trigger('change:constraints');
      }
      return this;
    };

    Query.prototype.getSorting = function() {
      var oe;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = this.sortOrder;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          oe = _ref[_i];
          _results.push("" + oe.path + " " + oe.direction);
        }
        return _results;
      }).call(this)).join(' ');
    };

    Query.prototype.getConstraintXML = function() {
      var c, toSerialise;
      toSerialise = (function() {
        var _i, _len, _ref, _results;
        _ref = this.constraints;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          c = _ref[_i];
          if (!(c.type != null) || this.isInQuery(c.path)) {
            _results.push(c);
          }
        }
        return _results;
      }).call(this);
      if (toSerialise.length) {
        return concatMap(conStr)(concatMap(id)(partition(function(c) {
          return c.type != null;
        })(toSerialise)));
      } else {
        return '';
      }
    };

    Query.prototype.getJoinXML = function() {
      var p, s, strs;
      strs = (function() {
        var _ref, _results;
        _ref = this.joins;
        _results = [];
        for (p in _ref) {
          s = _ref[p];
          if (this.isInQuery(p) && s === 'OUTER') {
            _results.push("<join path=\"" + p + "\" style=\"OUTER\"/>");
          }
        }
        return _results;
      }).call(this);
      return strs.join('');
    };

    Query.prototype.toXML = function() {
      var attrs, headAttrs, k, v;
      attrs = {
        model: this.model.name,
        view: this.views.join(' '),
        sortOrder: this.getSorting(),
        constraintLogic: this.constraintLogic
      };
      if (this.name != null) {
        attrs.name = this.name;
      }
      headAttrs = ((function() {
        var _results;
        _results = [];
        for (k in attrs) {
          v = attrs[k];
          if (v) {
            _results.push(k + '="' + v + '"');
          }
        }
        return _results;
      })()).join(' ');
      return "<query " + headAttrs + " >" + (this.getJoinXML()) + (this.getConstraintXML()) + "</query>";
    };

    Query.prototype.toJSON = function() {
      var c, direction, path, style, v;
      return noUndefVals({
        name: this.name,
        title: this.title,
        comment: this.comment,
        description: this.description,
        constraintLogic: this.constraintLogic,
        from: this.root,
        select: (function() {
          var _i, _len, _ref, _results;
          _ref = this.views;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            v = _ref[_i];
            _results.push(headLess(v));
          }
          return _results;
        }).call(this),
        orderBy: (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = this.sortOrder;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], path = _ref1.path, direction = _ref1.direction;
            _results.push({
              path: headLess(path),
              direction: direction
            });
          }
          return _results;
        }).call(this),
        joins: (function() {
          var _ref, _results;
          _ref = this.joins;
          _results = [];
          for (path in _ref) {
            style = _ref[path];
            if (style === 'OUTER') {
              _results.push(headLess(path));
            }
          }
          return _results;
        }).call(this),
        where: (function() {
          var _i, _len, _ref, _results;
          _ref = this.constraints;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            c = _ref[_i];
            _results.push(conToJSON(c));
          }
          return _results;
        }).call(this)
      });
    };

    Query.prototype.fetchCode = function(lang, cb) {
      var req;
      req = {
        query: this.toXML(),
        lang: lang
      };
      return withCB(cb, this.service.post('query/code', req).then(this.service.VERIFIER).then(get('code')));
    };

    Query.prototype.save = function(name, cb) {
      var req, setName,
        _this = this;
      if (name != null) {
        this.name = name;
      }
      req = {
        data: this.toXML(),
        contentType: "application/xml; charset=UTF-8",
        url: this.service.root + 'query',
        type: 'POST',
        dataType: 'json'
      };
      setName = function(name) {
        return _this.name = name;
      };
      return withCB(cb, setName, this.service.doReq(req).then(this.service.VERIFIER).then(get('name')));
    };

    Query.prototype.getCodeURI = function(lang) {
      var req, _ref;
      req = {
        query: this.toXML(),
        lang: lang,
        format: 'text'
      };
      if (((_ref = this.service) != null ? _ref.token : void 0) != null) {
        req.token = this.service.token;
      }
      return "" + this.service.root + "query/code?" + (toQueryString(req));
    };

    Query.prototype.getExportURI = function(format) {
      var req, _ref;
      if (format == null) {
        format = 'tab';
      }
      if (__indexOf.call(Query.BIO_FORMATS, format) >= 0) {
        return this["get" + (format.toUpperCase()) + "URI"]();
      }
      req = {
        query: this.toXML(),
        format: format
      };
      if (((_ref = this.service) != null ? _ref.token : void 0) != null) {
        req.token = this.service.token;
      }
      return "" + this.service.root + "query/results?" + (toQueryString(req));
    };

    Query.prototype.fetchQID = function(cb) {
      return withCB(cb, this.service.post('queries', {
        query: this.toXML()
      }).then(get('id')));
    };

    addPI = function(p) {
      return p.append('primaryIdentifier').toString();
    };

    Query.prototype.__bio_req = function(types, n) {
      var isSuitable, toRun;
      toRun = this.makeListQuery();
      isSuitable = function(p) {
        return utils.any(types, function(t) {
          return p.isa(t);
        });
      };
      toRun.views = take(n)((function() {
        var _i, _len, _ref, _results;
        _ref = this.getViewNodes();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          if (isSuitable(n)) {
            _results.push(addPI(n));
          }
        }
        return _results;
      }).call(this));
      return {
        query: toRun.toXML(),
        format: 'text'
      };
    };

    Query.prototype._fasta_req = function() {
      return this.__bio_req(["SequenceFeature", 'Protein'], 1);
    };

    Query.prototype._gff3_req = function() {
      return this.__bio_req(['SequenceFeature']);
    };

    Query.prototype._bed_req = Query.prototype._gff3_req;

    return Query;

  })();

  union = fold(function(xs, ys) {
    return xs.concat(ys);
  });

  Query.ATTRIBUTE_OPS = union([Query.ATTRIBUTE_VALUE_OPS, Query.MULTIVALUE_OPS, Query.NULL_OPS]);

  Query.REFERENCE_OPS = union([Query.TERNARY_OPS, Query.LOOP_OPS, Query.LIST_OPS]);

  _ref = Query.BIO_FORMATS;
  _fn = function(f) {
    var getMeth, reqMeth, uriMeth;
    reqMeth = "_" + f + "_req";
    getMeth = "get" + (f.toUpperCase());
    uriMeth = getMeth + "URI";
    Query.prototype[getMeth] = function(opts, cb) {
      var req, v, _ref1;
      if (opts == null) {
        opts = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      if (utils.isFunction(opts)) {
        _ref1 = [{}, opts], opts = _ref1[0], cb = _ref1[1];
      }
      if ((opts != null ? opts.view : void 0) != null) {
        opts.view = (function() {
          var _j, _len1, _ref2, _results;
          _ref2 = opts.view;
          _results = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            v = _ref2[_j];
            _results.push(this.getPathInfo(v).toString());
          }
          return _results;
        }).call(this);
      }
      req = merge(this[reqMeth](), opts);
      return withCB(cb, this.service.post('query/results/' + f, req));
    };
    return Query.prototype[uriMeth] = function(opts, cb) {
      var req, v, _ref1;
      if (opts == null) {
        opts = {};
      }
      if (utils.isFunction(opts)) {
        _ref1 = [{}, opts], opts = _ref1[0], cb = _ref1[1];
      }
      if ((opts != null ? opts.view : void 0) != null) {
        opts.view = (function() {
          var _j, _len1, _ref2, _results;
          _ref2 = opts.view;
          _results = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            v = _ref2[_j];
            _results.push(this.getPathInfo(v).toString());
          }
          return _results;
        }).call(this);
      }
      req = merge(this[reqMeth](), opts);
      if (this.service.token != null) {
        req.token = this.service.token;
      }
      return "" + this.service.root + "query/results/" + f + "?" + (toQueryString(req));
    };
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    f = _ref[_i];
    _fn(f);
  }

  _get_data_fetcher = function(server_fn) {
    return function() {
      var cbs, page, x, _ref1;
      page = arguments[0], cbs = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (this.service[server_fn]) {
        if (!(page != null)) {
          page = {};
        } else if (utils.isFunction(page)) {
          page = {};
          cbs = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = arguments.length; _j < _len1; _j++) {
              x = arguments[_j];
              _results.push(x);
            }
            return _results;
          }).apply(this, arguments);
        }
        page = noUndefVals(merge({
          start: this.start,
          size: this.maxRows
        }, page));
        return (_ref1 = this.service)[server_fn].apply(_ref1, [this, page].concat(__slice.call(cbs)));
      } else {
        throw new Error("Service does not provide '" + server_fn + "'.");
      }
    };
  };

  for (_j = 0, _len1 = RESULTS_METHODS.length; _j < _len1; _j++) {
    mth = RESULTS_METHODS[_j];
    Query.prototype[mth] = _get_data_fetcher(mth);
  }

  intermine.Query = Query;

}).call(this);

},{"./util":27,"./xml":29}],24:[function(require,module,exports){
(function() {
  var CLASSKEYS, CLASSKEY_PATH, DEFAULT_ERROR_HANDLER, DEFAULT_PROTOCOL, ENRICHMENT_PATH, HAS_PROTOCOL, HAS_SUFFIX, IDResolutionJob, LISTS_PATH, LIST_OPERATION_PATHS, LIST_PIPE, List, MODELS, MODEL_PATH, Model, PATH_VALUES_PATH, PREF_PATH, Promise, QUERY_RESULTS_PATH, QUICKSEARCH_PATH, Query, RELEASES, RELEASE_PATH, REQUIRES_VERSION, SUBTRACT_PATH, SUFFIX, SUMMARYFIELDS_PATH, SUMMARY_FIELDS, Service, TABLE_ROW_PATH, TEMPLATES_PATH, TO_NAMES, User, VERSIONS, VERSION_PATH, WHOAMI_PATH, WIDGETS, WIDGETS_PATH, WITH_OBJ_PATH, base64, dejoin, error, get, getListFinder, http, intermine, invoke, map, merge, set, success, to_query_string, utils, version, withCB, _get_or_fetch,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __slice = [].slice;

  Promise = require('./promise');

  Model = require('./model').Model;

  Query = require('./query').Query;

  List = require('./lists').List;

  User = require('./user').User;

  IDResolutionJob = require('./id-resolution-job').IDResolutionJob;

  base64 = require('./base64');

  version = require('./version');

  utils = require('./util');

  to_query_string = utils.querystring;

  http = require('./http');

  intermine = exports;

  withCB = utils.withCB, map = utils.map, merge = utils.merge, get = utils.get, set = utils.set, invoke = utils.invoke, success = utils.success, error = utils.error, REQUIRES_VERSION = utils.REQUIRES_VERSION, dejoin = utils.dejoin;

  VERSIONS = {};

  CLASSKEYS = {};

  RELEASES = {};

  MODELS = {};

  SUMMARY_FIELDS = {};

  WIDGETS = {};

  DEFAULT_PROTOCOL = "http://";

  VERSION_PATH = "version";

  TEMPLATES_PATH = "templates";

  RELEASE_PATH = "version/release";

  CLASSKEY_PATH = "classkeys";

  LISTS_PATH = "lists";

  MODEL_PATH = "model";

  SUMMARYFIELDS_PATH = "summaryfields";

  QUERY_RESULTS_PATH = "query/results";

  QUICKSEARCH_PATH = "search";

  WIDGETS_PATH = "widgets";

  ENRICHMENT_PATH = "list/enrichment";

  WITH_OBJ_PATH = "listswithobject";

  LIST_OPERATION_PATHS = {
    union: "lists/union",
    intersection: "lists/intersect",
    difference: "lists/diff"
  };

  SUBTRACT_PATH = 'lists/subtract';

  WHOAMI_PATH = "user/whoami";

  TABLE_ROW_PATH = QUERY_RESULTS_PATH + '/tablerows';

  PREF_PATH = 'user/preferences';

  PATH_VALUES_PATH = 'path/values';

  HAS_PROTOCOL = /^https?:\/\//i;

  HAS_SUFFIX = /service\/?$/i;

  SUFFIX = "/service/";

  DEFAULT_ERROR_HANDLER = function(e) {
    var f, _ref;
    f = (_ref = console.error) != null ? _ref : console.log;
    return f(e);
  };

  _get_or_fetch = function(propName, store, path, key, cb) {
    var opts, promise, root, useCache, value, _ref;
    root = this.root, useCache = this.useCache;
    promise = (_ref = this[propName]) != null ? _ref : this[propName] = useCache && (value = store[root]) ? success(value) : (opts = {
      type: 'GET',
      dataType: 'json',
      data: {
        format: 'json'
      }
    }, this.doReq(merge(opts, {
      url: this.root + path
    })).then(function(x) {
      return store[root] = x[key];
    }));
    return withCB(cb, promise);
  };

  getListFinder = function(name) {
    return function(lists) {
      return new Promise(function(resolve, reject) {
        var list;
        if (list = utils.find(lists, function(l) {
          return l.name === name;
        })) {
          return resolve(list);
        } else {
          return reject("List \"" + name + "\" not found among: " + (lists.map(get('name'))));
        }
      });
    };
  };

  LIST_PIPE = function(service, prop) {
    if (prop == null) {
      prop = 'listName';
    }
    return utils.compose(service.fetchList, get(prop));
  };

  TO_NAMES = function(xs) {
    var x, _i, _len, _ref, _ref1, _results;
    if (xs == null) {
      xs = [];
    }
    _ref = (utils.isArray(xs) ? xs : [xs]);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      x = _ref[_i];
      _results.push((_ref1 = x.name) != null ? _ref1 : x);
    }
    return _results;
  };

  Service = (function() {
    var FIVE_MIN, getNewUserToken, toMapByName;

    Service.prototype.doReq = http.doReq;

    function Service(_arg) {
      var noCache, _ref, _ref1,
        _this = this;
      this.root = _arg.root, this.token = _arg.token, this.errorHandler = _arg.errorHandler, this.DEBUG = _arg.DEBUG, this.help = _arg.help, noCache = _arg.noCache;
      this.connectAs = __bind(this.connectAs, this);

      this.createList = __bind(this.createList, this);

      this.resolveIds = __bind(this.resolveIds, this);

      this.query = __bind(this.query, this);

      this.fetchRelease = __bind(this.fetchRelease, this);

      this.fetchClassKeys = __bind(this.fetchClassKeys, this);

      this.fetchVersion = __bind(this.fetchVersion, this);

      this.fetchSummaryFields = __bind(this.fetchSummaryFields, this);

      this.fetchModel = __bind(this.fetchModel, this);

      this.fetchWidgetMap = __bind(this.fetchWidgetMap, this);

      this.fetchWidgets = __bind(this.fetchWidgets, this);

      this.complement = __bind(this.complement, this);

      this.fetchListsContaining = __bind(this.fetchListsContaining, this);

      this.fetchList = __bind(this.fetchList, this);

      this.findLists = __bind(this.findLists, this);

      this.fetchLists = __bind(this.fetchLists, this);

      this.fetchTemplates = __bind(this.fetchTemplates, this);

      this.tableRows = __bind(this.tableRows, this);

      this.values = __bind(this.values, this);

      this.rows = __bind(this.rows, this);

      this.records = __bind(this.records, this);

      this.table = __bind(this.table, this);

      this.pathValues = __bind(this.pathValues, this);

      this.fetchUser = __bind(this.fetchUser, this);

      this.whoami = __bind(this.whoami, this);

      this.findById = __bind(this.findById, this);

      this.count = __bind(this.count, this);

      this.enrichment = __bind(this.enrichment, this);

      if (this.root == null) {
        throw new Error("No service root provided. This is required");
      }
      if (!HAS_PROTOCOL.test(this.root)) {
        this.root = DEFAULT_PROTOCOL + this.root;
      }
      if (!HAS_SUFFIX.test(this.root)) {
        this.root = this.root + SUFFIX;
      }
      this.root = this.root.replace(/ice$/, "ice/");
      if ((_ref = this.errorHandler) == null) {
        this.errorHandler = DEFAULT_ERROR_HANDLER;
      }
      if ((_ref1 = this.help) == null) {
        this.help = 'no.help.available@dev.null';
      }
      this.useCache = !noCache;
      this.getFormat = function(intended) {
        if (intended == null) {
          intended = 'json';
        }
        return intended;
      };
    }

    Service.prototype.post = function(path, data) {
      return this.makeRequest('POST', path, data);
    };

    Service.prototype.get = function(path, data) {
      return this.makeRequest('GET', path, data);
    };

    Service.prototype.makeRequest = function(method, path, data, cb, indiv) {
      var _this = this;
      if (method == null) {
        method = 'GET';
      }
      if (path == null) {
        path = '';
      }
      if (data == null) {
        data = {};
      }
      if (cb == null) {
        cb = (function() {});
      }
      if (indiv == null) {
        indiv = false;
      }
      return this.fetchVersion().then(function(version) {
        var dataType, errBack, opts, timeout, url, _ref, _ref1, _ref2, _ref3;
        if (utils.isArray(cb)) {
          _ref = cb, cb = _ref[0], errBack = _ref[1];
        }
        if (utils.isArray(data)) {
          data = utils.pairsToObj(data);
        }
        url = _this.root + path;
        if (errBack == null) {
          errBack = _this.errorHandler;
        }
        data = utils.copy(data);
        data.format = _this.getFormat(data.format);
        dataType = /json/.test(data.format) ? 'json' : 'text';
        if (!http.supports(method)) {
          _ref1 = [method, http.getMethod(method)], data.method = _ref1[0], method = _ref1[1];
        }
        opts = {
          data: data,
          dataType: dataType,
          success: cb,
          error: errBack,
          url: url,
          type: method
        };
        if ('headers' in data) {
          opts.headers = utils.copy(data.headers);
          delete opts.data.headers;
        }
        if (_this.token != null) {
          if (version >= 14) {
            if ((_ref2 = opts.headers) == null) {
              opts.headers = {};
            }
            opts.headers.Authorization = "Token " + _this.token;
          } else {
            opts.data.token = _this.token;
          }
        }
        if (timeout = (_ref3 = data.timeout) != null ? _ref3 : _this.timeout) {
          opts.timeout = timeout;
          delete data.timeout;
        }
        return _this.doReq(opts, indiv);
      });
    };

    Service.prototype.enrichment = function(opts, cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 8, function() {
        var req;
        req = merge({
          maxp: 0.05,
          correction: 'Holm-Bonferroni'
        }, opts);
        return _this.get(ENRICHMENT_PATH, req).then(get('results')).nodeify(cb);
      });
    };

    Service.prototype.search = function(options, cb) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = (function() {});
      }
      return REQUIRES_VERSION(this, 9, function() {
        var k, req, v, _ref;
        if (utils.isFunction(options)) {
          _ref = [options, {}], cb = _ref[0], options = _ref[1];
        }
        if (typeof options === 'string') {
          req = {
            q: options
          };
        } else {
          req = {
            q: options.q
          };
          for (k in options) {
            if (!__hasProp.call(options, k)) continue;
            v = options[k];
            if (k !== 'q') {
              req["facet_" + k] = v;
            }
          }
        }
        return withCB(cb, _this.post(QUICKSEARCH_PATH, req));
      });
    };

    Service.prototype.count = function(q, cb) {
      var p, req;
      if (cb == null) {
        cb = (function() {});
      }
      return withCB(cb, !q ? error("Not enough arguments") : q.toPathString != null ? (p = q.isClass() ? q.append('id') : q, this.pathValues(p, 'count')) : q.toXML != null ? (req = {
        query: q.toXML(),
        format: 'jsoncount'
      }, this.post(QUERY_RESULTS_PATH, req).then(get('count'))) : typeof q === 'string' ? this.fetchModel().then(invoke('makePath', q.replace(/\.\*$/, '.id'))).then(this.count) : this.query(q).then(this.count));
    };

    Service.prototype.findById = function(type, id, cb) {
      return withCB(cb, this.query({
        from: type,
        select: ['**'],
        where: {
          id: id
        }
      }).then(dejoin).then(invoke('records')).then(get(0)));
    };

    Service.prototype.lookup = function(type, term, context, cb) {
      var _ref;
      if (utils.isFunction(context)) {
        _ref = [null, context], context = _ref[0], cb = _ref[1];
      }
      return withCB(cb, this.query({
        from: type,
        select: ['**'],
        where: [[type, 'LOOKUP', term, context]]
      }).then(dejoin).then(invoke('records')));
    };

    Service.prototype.find = function(type, term, context, cb) {
      var _ref;
      if (utils.isFunction(context)) {
        _ref = [null, context], context = _ref[0], cb = _ref[1];
      }
      return withCB(cb, this.lookup(type, term, context).then(function(found) {
        if (!(found != null) || found.length === 0) {
          return error("Nothing found");
        } else if (found.length > 1) {
          return error("Multiple items found: " + (found.slice(0, 3)) + "...");
        } else {
          return success(found[0]);
        }
      }));
    };

    Service.prototype.whoami = function(cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 9, function() {
        return withCB(cb, _this.get(WHOAMI_PATH).then(get('user')).then(function(x) {
          return new User(_this, x);
        }));
      });
    };

    Service.prototype.fetchUser = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.whoami.apply(this, args);
    };

    Service.prototype.pathValues = function(path, typeConstraints, cb) {
      var _this = this;
      if (typeConstraints == null) {
        typeConstraints = {};
      }
      return REQUIRES_VERSION(this, 6, function() {
        var wanted, _pathValues, _ref, _ref1;
        if (typeof typeConstraints === 'string') {
          wanted = typeConstraints;
          typeConstraints = {};
        }
        if (utils.isFunction(typeConstraints)) {
          _ref = [cb, typeConstraints], typeConstraints = _ref[0], cb = _ref[1];
        }
        if (wanted !== 'count') {
          wanted = 'results';
        }
        _pathValues = function(path) {
          var format, req;
          format = wanted === 'count' ? 'jsoncount' : 'json';
          req = {
            format: format,
            path: path.toString(),
            typeConstraints: JSON.stringify(path.subclasses)
          };
          return _this.post(PATH_VALUES_PATH, req).then(get(wanted));
        };
        try {
          return withCB(cb, _this.fetchModel().then(invoke('makePath', path, (_ref1 = path.subclasses) != null ? _ref1 : typeConstraints)).then(_pathValues));
        } catch (e) {
          return error(e);
        }
      });
    };

    Service.prototype.doPagedRequest = function(q, path, page, format, cb) {
      var req, _ref,
        _this = this;
      if (page == null) {
        page = {};
      }
      if (cb == null) {
        cb = (function() {});
      }
      if (q.toXML != null) {
        if (utils.isFunction(page)) {
          _ref = [page, {}], cb = _ref[0], page = _ref[1];
        }
        req = merge(page, {
          query: q.toXML(),
          format: format
        });
        return withCB(cb, this.post(path, req).then(get('results')));
      } else {
        return this.query(q).then(function(query) {
          return _this.doPagedRequest(query, path, page, format, cb);
        });
      }
    };

    Service.prototype.table = function(q, page, cb) {
      return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, 'jsontable', cb);
    };

    Service.prototype.records = function(q, page, cb) {
      return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, 'jsonobjects', cb);
    };

    Service.prototype.rows = function(q, page, cb) {
      return this.doPagedRequest(q, QUERY_RESULTS_PATH, page, 'json', cb);
    };

    Service.prototype.values = function(q, opts, cb) {
      var resp, _ref,
        _this = this;
      if (utils.isFunction(opts)) {
        _ref = [opts, cb], cb = _ref[0], opts = _ref[1];
      }
      resp = !(q != null) ? error("No query term supplied") : (q.descriptors != null) || typeof q === 'string' ? this.pathValues(q, opts).then(map(get('value'))) : q.toXML != null ? q.views.length !== 1 ? error("Expected one column, got " + q.views.length) : this.rows(q, opts).then(map(get(0))) : this.query(q).then(function(query) {
        return _this.values(query, opts);
      });
      return withCB(cb, resp);
    };

    Service.prototype.tableRows = function(q, page, cb) {
      return this.doPagedRequest(q, TABLE_ROW_PATH, page, 'json', cb);
    };

    Service.prototype.fetchTemplates = function(cb) {
      return this.get(TEMPLATES_PATH).then(get('templates')).done(cb);
    };

    Service.prototype.fetchLists = function(cb) {
      return this.findLists('', cb);
    };

    Service.prototype.findLists = function(name, cb) {
      var _this = this;
      if (name == null) {
        name = '';
      }
      if (cb == null) {
        cb = (function() {});
      }
      return this.fetchVersion().then(function(v) {
        var fn;
        return withCB(cb, name && v < 13 ? error("Finding lists by name on the server requires version 13. This is only " + v) : (fn = function(ls) {
          var data, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ls.length; _i < _len; _i++) {
            data = ls[_i];
            _results.push(new List(data, _this));
          }
          return _results;
        }, _this.get(LISTS_PATH, {
          name: name
        }).then(get('lists')).then(fn)));
      });
    };

    Service.prototype.fetchList = function(name, cb) {
      var _this = this;
      return this.fetchVersion().then(function(v) {
        return withCB(cb, v < 13 ? _this.findLists().then(getListFinder(name)) : _this.findLists(name).then(get(0)));
      });
    };

    Service.prototype.fetchListsContaining = function(opts, cb) {
      var fn,
        _this = this;
      fn = function(xs) {
        var x, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = xs.length; _i < _len; _i++) {
          x = xs[_i];
          _results.push(new List(x, _this));
        }
        return _results;
      };
      return withCB(cb, this.get(WITH_OBJ_PATH, opts).then(get('lists')).then(fn));
    };

    Service.prototype.combineLists = function(operation, options, cb) {
      var description, lists, name, req, tags, _ref, _ref1;
      _ref = merge({
        lists: [],
        tags: []
      }, options), name = _ref.name, lists = _ref.lists, tags = _ref.tags, description = _ref.description;
      req = {
        name: name,
        description: description
      };
      if ((_ref1 = req.description) == null) {
        req.description = "" + operation + " of " + (lists.join(', '));
      }
      req.tags = tags.join(';');
      req.lists = lists.join(';');
      return withCB(cb, this.get(LIST_OPERATION_PATHS[operation], req).then(LIST_PIPE(this)));
    };

    Service.prototype.merge = function() {
      return this.combineLists.apply(this, ['union'].concat(__slice.call(arguments)));
    };

    Service.prototype.intersect = function() {
      return this.combineLists.apply(this, ['intersection'].concat(__slice.call(arguments)));
    };

    Service.prototype.diff = function() {
      return this.combineLists.apply(this, ['difference'].concat(__slice.call(arguments)));
    };

    Service.prototype.complement = function(options, cb) {
      var defaultDesc, description, exclude, from, lists, name, references, req, tags;
      if (options == null) {
        options = {};
      }
      if (cb == null) {
        cb = function() {};
      }
      from = options.from, exclude = options.exclude, name = options.name, description = options.description, tags = options.tags;
      defaultDesc = function() {
        return "Relative complement of " + (lists.join(' and ')) + " in " + (references.join(' and '));
      };
      references = TO_NAMES(from);
      lists = TO_NAMES(exclude);
      if (name == null) {
        name = defaultDesc();
      }
      if (description == null) {
        description = defaultDesc();
      }
      if (tags == null) {
        tags = [];
      }
      req = {
        name: name,
        description: description,
        tags: tags,
        lists: lists,
        references: references
      };
      return withCB(cb, this.post(SUBTRACT_PATH, req).then(LIST_PIPE(this)));
    };

    Service.prototype.fetchWidgets = function(cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 8, function() {
        return _get_or_fetch.call(_this, 'widgets', WIDGETS, WIDGETS_PATH, 'widgets', cb);
      });
    };

    toMapByName = utils.omap(function(w) {
      return [w.name, w];
    });

    Service.prototype.fetchWidgetMap = function(cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 8, function() {
        var _ref;
        return withCB(cb, ((_ref = _this.__wmap__) != null ? _ref : _this.__wmap__ = _this.fetchWidgets().then(toMapByName)));
      });
    };

    Service.prototype.fetchModel = function(cb) {
      return _get_or_fetch.call(this, 'model', MODELS, MODEL_PATH, 'model').then(Model.load).then(set({
        service: this
      })).nodeify(cb);
    };

    Service.prototype.fetchSummaryFields = function(cb) {
      return _get_or_fetch.call(this, 'summaryFields', SUMMARY_FIELDS, SUMMARYFIELDS_PATH, 'classes', cb);
    };

    Service.prototype.fetchVersion = function(cb) {
      return _get_or_fetch.call(this, 'version', VERSIONS, VERSION_PATH, 'version', cb);
    };

    Service.prototype.fetchClassKeys = function(cb) {
      return _get_or_fetch.call(this, 'classkeys', CLASSKEYS, CLASSKEY_PATH, 'classes', cb);
    };

    Service.prototype.fetchRelease = function(cb) {
      return _get_or_fetch.call(this, 'release', RELEASES, RELEASE_PATH, 'version', cb);
    };

    Service.prototype.query = function(options, cb) {
      var buildQuery, deps,
        _this = this;
      deps = [this.fetchModel(), this.fetchSummaryFields()];
      buildQuery = function(_arg) {
        var model, summaryFields;
        model = _arg[0], summaryFields = _arg[1];
        return new Query(merge(options, {
          model: model,
          summaryFields: summaryFields
        }), _this);
      };
      return withCB(cb, Promise.all(deps).then(buildQuery));
    };

    Service.prototype.manageUserPreferences = function(method, data, cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 11, function() {
        return withCB(cb, _this.makeRequest(method, PREF_PATH, data).then(get('preferences')));
      });
    };

    Service.prototype.resolveIds = function(opts, cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 10, function() {
        var req;
        req = {
          type: 'POST',
          url: _this.root + 'ids',
          contentType: 'application/json',
          data: JSON.stringify(opts),
          dataType: 'json'
        };
        return withCB(cb, _this.doReq(req).then(get('uid')).then(IDResolutionJob.create(_this)));
      });
    };

    Service.prototype.createList = function(opts, ids, cb) {
      var adjust, req,
        _this = this;
      if (opts == null) {
        opts = {};
      }
      if (ids == null) {
        ids = '';
      }
      if (cb == null) {
        cb = function() {};
      }
      adjust = function(x) {
        return merge(x, {
          token: _this.token,
          tags: opts.tags || []
        });
      };
      req = {
        data: utils.isArray(ids) ? ids.map(function(x) {
          return "\"" + x + "\"";
        }).join("\n") : ids,
        dataType: 'json',
        url: "" + this.root + "lists?" + (to_query_string(adjust(opts))),
        type: 'POST',
        contentType: 'text/plain'
      };
      return withCB(cb, this.doReq(req).then(LIST_PIPE(this)));
    };

    getNewUserToken = function(resp) {
      return resp.user.temporaryToken;
    };

    Service.prototype.connectAs = function(token) {
      return Service.connect(merge(this, {
        token: token,
        noCache: !this.useCache
      }));
    };

    Service.prototype.register = function(name, password, cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 9, function() {
        return withCB(cb, _this.post('users', {
          name: name,
          password: password
        }).then(getNewUserToken).then(_this.connectAs));
      });
    };

    FIVE_MIN = 5 * 60;

    Service.prototype.getDeregistrationToken = function(validity, cb) {
      var _this = this;
      if (validity == null) {
        validity = FIVE_MIN;
      }
      return REQUIRES_VERSION(this, 16, function() {
        var promise;
        promise = _this.token != null ? _this.post('user/deregistration', {
          validity: validity
        }).then(get('token')) : error("Not registered");
        return withCB(cb, promise);
      });
    };

    Service.prototype.deregister = function(token, cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 16, function() {
        return withCB(cb, _this.makeRequest('DELETE', 'user', {
          deregistrationToken: token,
          format: 'xml'
        }));
      });
    };

    Service.prototype.login = function(name, password, cb) {
      var _this = this;
      return REQUIRES_VERSION(this, 9, function() {
        var headers;
        headers = {
          'Authorization': "Basic " + base64.encode("" + name + ":" + password)
        };
        return withCB(cb, _this.logout().then(function(service) {
          return service.get('user/token', {
            headers: headers
          });
        }).then(get('token')).then(_this.connectAs));
      });
    };

    Service.prototype.logout = function(cb) {
      return withCB(cb, success(this.connectAs()));
    };

    return Service;

  })();

  Service.prototype.rowByRow = function() {
    var args, f, q,
      _this = this;
    q = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    f = http.iterReq('POST', QUERY_RESULTS_PATH, 'json');
    if (q.toXML != null) {
      return f.apply(this, arguments);
    } else {
      return this.query(q).then(function(query) {
        return _this.rowByRow.apply(_this, [query].concat(__slice.call(args)));
      });
    }
  };

  Service.prototype.eachRow = Service.prototype.rowByRow;

  Service.prototype.recordByRecord = function() {
    var args, f, q,
      _this = this;
    q = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    f = http.iterReq('POST', QUERY_RESULTS_PATH, 'jsonobjects');
    if (q.toXML != null) {
      return f.apply(this, arguments);
    } else {
      return this.query(q).then(function(query) {
        return _this.recordByRecord.apply(_this, [query].concat(__slice.call(args)));
      });
    }
  };

  Service.prototype.eachRecord = Service.prototype.recordByRecord;

  Service.prototype.union = Service.prototype.merge;

  Service.prototype.difference = Service.prototype.diff;

  Service.prototype.symmetricDifference = Service.prototype.diff;

  Service.prototype.relativeComplement = Service.prototype.complement;

  Service.prototype.subtract = Service.prototype.complement;

  Service.flushCaches = function() {
    MODELS = {};
    VERSIONS = {};
    RELEASES = {};
    CLASSKEYS = {};
    SUMMARY_FIELDS = {};
    return WIDGETS = {};
  };

  Service.connect = function(opts) {
    if ((opts != null ? opts.root : void 0) == null) {
      throw new Error("Invalid options provided: " + (JSON.stringify(opts)));
    }
    return new Service(opts);
  };

  intermine.Service = Service;

  intermine.Model = Model;

  intermine.Query = Query;

  intermine.imjs = version;

}).call(this);

},{"./base64":14,"./http":"j+v/Vf","./id-resolution-job":18,"./lists":19,"./model":20,"./promise":22,"./query":23,"./user":26,"./util":27,"./version":28}],25:[function(require,module,exports){
(function() {
  var Table, merge, properties;

  merge = function(src, dest) {
    var k, v, _results;
    _results = [];
    for (k in src) {
      v = src[k];
      _results.push(dest[k] = v);
    }
    return _results;
  };

  properties = ['attributes', 'references', 'collections'];

  Table = (function() {

    function Table(_arg) {
      var c, prop, _, _i, _len, _ref, _ref1;
      this.name = _arg.name, this.attributes = _arg.attributes, this.references = _arg.references, this.collections = _arg.collections;
      this.fields = {};
      this.__parents__ = (_ref = arguments[0]['extends']) != null ? _ref : [];
      for (_i = 0, _len = properties.length; _i < _len; _i++) {
        prop = properties[_i];
        if (this[prop] == null) {
          throw new Error("Bad model data: missing " + prop);
        }
        merge(this[prop], this.fields);
      }
      _ref1 = this.collections;
      for (_ in _ref1) {
        c = _ref1[_];
        c.isCollection = true;
      }
    }

    Table.prototype.toString = function() {
      var n, _;
      return "[Table name=" + this.name + ", fields=[" + ((function() {
        var _ref, _results;
        _ref = this.fields;
        _results = [];
        for (n in _ref) {
          _ = _ref[n];
          _results.push(n);
        }
        return _results;
      }).call(this)) + "]]";
    };

    Table.prototype.parents = function() {
      var _ref;
      return ((_ref = this.__parents__) != null ? _ref : []).slice();
    };

    return Table;

  })();

  exports.Table = Table;

}).call(this);

},{}],26:[function(require,module,exports){
(function() {
  var User, do_pref_req, error, get, intermine, isFunction, withCB, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('./util'), withCB = _ref.withCB, get = _ref.get, isFunction = _ref.isFunction, error = _ref.error;

  intermine = exports;

  do_pref_req = function(user, data, method, cb) {
    return user.service.manageUserPreferences(method, data, cb).then(function(prefs) {
      return user.preferences = prefs;
    });
  };

  User = (function() {

    function User(service, _arg) {
      var _ref1;
      this.service = service;
      this.username = _arg.username, this.preferences = _arg.preferences;
      this.refresh = __bind(this.refresh, this);

      this.clearPreferences = __bind(this.clearPreferences, this);

      this.clearPreference = __bind(this.clearPreference, this);

      this.setPreferences = __bind(this.setPreferences, this);

      this.setPreference = __bind(this.setPreference, this);

      this.hasPreferences = this.preferences != null;
      if ((_ref1 = this.preferences) == null) {
        this.preferences = {};
      }
    }

    User.prototype.setPreference = function(key, value, cb) {
      var data, _ref1;
      if (isFunction(value)) {
        _ref1 = [null, value], value = _ref1[0], cb = _ref1[1];
      }
      if (typeof key === 'string') {
        data = {};
        data[key] = value;
      } else if (!(value != null)) {
        data = key;
      } else {
        return withCB(cb, error("Incorrect arguments to setPreference"));
      }
      return this.setPreferences(data, cb);
    };

    User.prototype.setPreferences = function(prefs, cb) {
      return do_pref_req(this, prefs, 'POST', cb);
    };

    User.prototype.clearPreference = function(key, cb) {
      return do_pref_req(this, {
        key: key
      }, 'DELETE', cb);
    };

    User.prototype.clearPreferences = function(cb) {
      return do_pref_req(this, {}, 'DELETE', cb);
    };

    User.prototype.refresh = function(cb) {
      return do_pref_req(this, {}, 'GET', cb);
    };

    User.prototype.getToken = function(type, cb) {
      if (type == null) {
        type = 'day';
      }
      if (cb == null) {
        cb = null;
      }
      return withCB(cb, this.service.get('user/token', {
        type: type
      }).then(get('token')));
    };

    return User;

  })();

  intermine.User = User;

}).call(this);

},{"./util":27}],27:[function(require,module,exports){
(function() {
  var Promise, REQUIRES, comp, curry, entities, error, flatten, fold, id, invoke, invokeWith, isArray, merge, pairFold, qsFromList, root, success, thenFold, _ref,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  Promise = require('./promise');

  root = exports;

  root.defer = function() {
    var deferred;
    deferred = {};
    deferred.promise = new Promise(function(resolve, reject) {
      deferred.resolve = resolve;
      return deferred.reject = reject;
    });
    return deferred;
  };

  qsFromList = function(pairs) {
    var pair;
    return ((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = pairs.length; _i < _len; _i++) {
        pair = pairs[_i];
        _results.push(pair.map(encodeURIComponent).join('='));
      }
      return _results;
    })()).join('&');
  };

  root.querystring = function(obj) {
    var k, p, pairs, subList, sv, v;
    if (isArray(obj)) {
      pairs = obj.slice();
    } else {
      pairs = [];
      for (k in obj) {
        v = obj[k];
        if (isArray(v)) {
          subList = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = v.length; _i < _len; _i++) {
              sv = v[_i];
              _results.push([k, sv]);
            }
            return _results;
          })();
          pairs = pairs.concat(subList);
        } else {
          pairs.push([k, v]);
        }
      }
    }
    return qsFromList((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = pairs.length; _i < _len; _i++) {
        p = pairs[_i];
        if (p[1] != null) {
          _results.push(p);
        }
      }
      return _results;
    })());
  };

  root.curry = curry = function() {
    var args, f;
    f = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return function() {
      var rest;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return f.apply(null, args.concat(rest));
    };
  };

  root.error = error = function(e) {
    return new Promise(function(_, reject) {
      return reject(new Error(e));
    });
  };

  root.success = success = Promise.from;

  root.parallel = Promise.all;

  root.withCB = function() {
    var f, fs, p, _i, _j, _len;
    fs = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), p = arguments[_i++];
    for (_j = 0, _len = fs.length; _j < _len; _j++) {
      f = fs[_j];
      if (f != null) {
        (function(f) {
          var onErr, onSucc;
          onSucc = function(res) {
            return f(null, res);
          };
          onErr = function(err) {
            return f(err);
          };
          return p.then(onSucc, onErr);
        })(f);
      }
    }
    return p;
  };

  root.fold = fold = function(f) {
    return function(init, xs) {
      var k, ret, v;
      if (arguments.length === 1) {
        xs = (init != null ? init.slice() : void 0) || init;
        init = (xs != null ? xs.shift() : void 0) || {};
      }
      if (xs == null) {
        throw new Error("xs is null");
      }
      if (xs.reduce != null) {
        return xs.reduce(f, init);
      } else {
        ret = init;
        for (k in xs) {
          v = xs[k];
          ret = ret != null ? f(ret, k, v) : {
            k: v
          };
        }
        return ret;
      }
    };
  };

  root.take = function(n) {
    return function(xs) {
      if (n != null) {
        return xs.slice(0, (n - 1) + 1 || 9e9);
      } else {
        return xs.slice();
      }
    };
  };

  root.filter = function(f) {
    return function(xs) {
      var x, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = xs.length; _i < _len; _i++) {
        x = xs[_i];
        if (f(x)) {
          _results.push(x);
        }
      }
      return _results;
    };
  };

  root.uniqBy = function(f, xs) {
    var k, keys, values, x, _i, _len;
    if (arguments.length === 1) {
      return curry(root.uniqBy, f);
    }
    keys = [];
    values = [];
    if (xs == null) {
      return values;
    }
    for (_i = 0, _len = xs.length; _i < _len; _i++) {
      x = xs[_i];
      k = f(x);
      if (__indexOf.call(keys, k) < 0) {
        keys.push(k);
        values.push(x);
      }
    }
    return values;
  };

  root.find = function(xs, f) {
    var x, _i, _len;
    if (arguments.length === 1) {
      f = xs;
      return function(xs) {
        return root.find(xs, f);
      };
    }
    for (_i = 0, _len = xs.length; _i < _len; _i++) {
      x = xs[_i];
      if (f(x)) {
        return x;
      }
    }
    return null;
  };

  isArray = (_ref = Array.isArray) != null ? _ref : function(xs) {
    return ((xs != null ? xs.splice : void 0) != null) && ((xs != null ? xs.push : void 0) != null) && ((xs != null ? xs.pop : void 0) != null) && ((xs != null ? xs.slice : void 0) != null);
  };

  root.isArray = isArray;

  root.isFunction = typeof /./ !== 'function' ? function(f) {
    return typeof f === 'function';
  } : function(f) {
    return (f != null) && (f.call != null) && (f.apply != null) && f.toString() === '[object Function]';
  };

  entities = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;'
  };

  root.escape = function(str) {
    if (!(str != null)) {
      return '';
    }
    return String(str).replace(/[&<>"']/g, function(entity) {
      return entities[entity];
    });
  };

  root.omap = function(f) {
    var merger;
    merger = fold(function(a, oldk, oldv) {
      var newk, newv, _ref1;
      _ref1 = f(oldk, oldv), newk = _ref1[0], newv = _ref1[1];
      a[newk] = newv;
      return a;
    });
    return function(xs) {
      return merger({}, xs);
    };
  };

  root.copy = root.omap(function(k, v) {
    return [k, v];
  });

  root.partition = function(f) {
    return function(xs) {
      var divide;
      divide = fold(function(_arg, x) {
        var falses, trues;
        trues = _arg[0], falses = _arg[1];
        if (f(x)) {
          return [trues.concat([x]), falses];
        } else {
          return [trues, falses.concat([x])];
        }
      });
      return divide([[], []], xs);
    };
  };

  root.id = id = function(x) {
    return x;
  };

  root.concatMap = function(f) {
    return function(xs) {
      var fx, ret, x, _i, _len;
      ret = void 0;
      for (_i = 0, _len = xs.length; _i < _len; _i++) {
        x = xs[_i];
        fx = f(x);
        ret = ret === void 0 ? fx : typeof ret === 'number' ? ret + fx : ret.concat != null ? ret.concat(fx) : merge(ret, fx);
      }
      return ret;
    };
  };

  root.map = function(f) {
    return invoke('map', f);
  };

  comp = fold(function(f, g) {
    return function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return f(g.apply(null, args));
    };
  });

  root.compose = function() {
    var fs;
    fs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return comp(fs);
  };

  root.flatMap = root.concatMap;

  root.difference = function(xs, remove) {
    var x, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = xs.length; _i < _len; _i++) {
      x = xs[_i];
      if (__indexOf.call(remove, x) < 0) {
        _results.push(x);
      }
    }
    return _results;
  };

  root.stringList = function(x) {
    if (typeof x === 'string') {
      return [x];
    } else {
      return x;
    }
  };

  root.flatten = flatten = function() {
    var ret, x, xs, xx, _i, _j, _len, _len1, _ref1;
    xs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    ret = [];
    for (_i = 0, _len = xs.length; _i < _len; _i++) {
      x = xs[_i];
      if (isArray(x)) {
        _ref1 = flatten.apply(null, x);
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          xx = _ref1[_j];
          ret.push(xx);
        }
      } else {
        ret.push(x);
      }
    }
    return ret;
  };

  root.sum = root.concatMap(id);

  root.merge = merge = function() {
    var k, newObj, o, objs, v, _i, _len;
    objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    newObj = {};
    for (_i = 0, _len = objs.length; _i < _len; _i++) {
      o = objs[_i];
      for (k in o) {
        if (!__hasProp.call(o, k)) continue;
        v = o[k];
        newObj[k] = v;
      }
    }
    return newObj;
  };

  root.any = function(xs, f) {
    var x, _i, _len;
    if (f == null) {
      f = id;
    }
    for (_i = 0, _len = xs.length; _i < _len; _i++) {
      x = xs[_i];
      if (f(x)) {
        return true;
      }
    }
    return false;
  };

  root.invoke = invoke = function() {
    var args, name;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return invokeWith(name, args);
  };

  root.invokeWith = invokeWith = function(name, args, ctx) {
    if (args == null) {
      args = [];
    }
    if (ctx == null) {
      ctx = null;
    }
    return function(o) {
      if (!(o != null)) {
        throw new Error("Cannot call method \"" + name + "\" of null");
      }
      if (!o[name]) {
        throw new Error("Cannot call undefined method \"" + name + " of " + o);
      } else {
        return o[name].apply(ctx || o, args);
      }
    };
  };

  root.get = function(name) {
    return function(obj) {
      return obj[name];
    };
  };

  root.set = function(name, value) {
    return function(obj) {
      var k, v;
      if (arguments.length === 2) {
        obj[name] = value;
      } else {
        for (k in name) {
          if (!__hasProp.call(name, k)) continue;
          v = name[k];
          obj[k] = v;
        }
      }
      return obj;
    };
  };

  REQUIRES = function(required, got) {
    return "This service requires a service at version " + required + " or above. This one is at " + got;
  };

  root.REQUIRES_VERSION = function(s, n, f) {
    return s.fetchVersion().then(function(v) {
      if (v >= n) {
        return f();
      } else {
        return error(REQUIRES(n, v));
      }
    });
  };

  root.dejoin = function(q) {
    var parts, view, _i, _len, _ref1;
    _ref1 = q.views;
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      view = _ref1[_i];
      parts = view.split('.');
      if (parts.length > 2) {
        q.addJoin(parts.slice(1, -1).join('.'));
      }
    }
    return q;
  };

  thenFold = fold(function(p, f) {
    return p.then(f);
  });

  root.sequence = function() {
    var fns;
    fns = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return thenFold(success(), fns);
  };

  pairFold = fold(function(o, _arg) {
    var k, v;
    k = _arg[0], v = _arg[1];
    if (o[k] != null) {
      throw new Error("Duplicate key: " + k);
    }
    o[k] = v;
    return o;
  });

  root.pairsToObj = function(pairs) {
    return pairFold({}, pairs);
  };

}).call(this);

},{"./promise":22}],28:[function(require,module,exports){
(function() {
  var imjs, pkg;

  imjs = exports;

  pkg = require("../package.json");

  imjs.VERSION = pkg.version;

}).call(this);

},{"../package.json":44}],29:[function(require,module,exports){
(function() {
  var DOMParser, sanitize;

  try {
    DOMParser = window.DOMParser;
  } catch (e) {
    DOMParser = require('xmldom').DOMParser;
  }

  sanitize = function(xml) {
    xml = xml.replace(/^\s*/g, '');
    xml = xml.replace(/\s$/g, '');
    if (xml.length === 0) {
      return xml;
    } else if (xml[xml.length - 1] !== '>') {
      return xml + '>';
    } else {
      return xml;
    }
  };

  exports.parse = function(xml) {
    var dom, parser;
    if (typeof xml !== 'string') {
      throw new Error("Expected a string - got " + xml);
    }
    xml = sanitize(xml);
    if (!xml) {
      throw new Error("Expected content - got empty string");
    }
    dom = (function() {
      try {
        parser = new DOMParser();
        return parser.parseFromString(xml, 'text/xml');
      } catch (_error) {}
    })();
    if ((!dom) || (!dom.documentElement) || dom.getElementsByTagName('parsererror').length) {
      throw new Error("Invalid XML: " + xml);
    }
    return dom;
  };

}).call(this);

},{"xmldom":30}],30:[function(require,module,exports){

},{}],31:[function(require,module,exports){


//
// The shims in this file are not fully implemented shims for the ES5
// features, but do work for the particular usecases there is in
// the other modules.
//

var toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

// Array.isArray is supported in IE9
function isArray(xs) {
  return toString.call(xs) === '[object Array]';
}
exports.isArray = typeof Array.isArray === 'function' ? Array.isArray : isArray;

// Array.prototype.indexOf is supported in IE9
exports.indexOf = function indexOf(xs, x) {
  if (xs.indexOf) return xs.indexOf(x);
  for (var i = 0; i < xs.length; i++) {
    if (x === xs[i]) return i;
  }
  return -1;
};

// Array.prototype.filter is supported in IE9
exports.filter = function filter(xs, fn) {
  if (xs.filter) return xs.filter(fn);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (fn(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
};

// Array.prototype.forEach is supported in IE9
exports.forEach = function forEach(xs, fn, self) {
  if (xs.forEach) return xs.forEach(fn, self);
  for (var i = 0; i < xs.length; i++) {
    fn.call(self, xs[i], i, xs);
  }
};

// Array.prototype.map is supported in IE9
exports.map = function map(xs, fn) {
  if (xs.map) return xs.map(fn);
  var out = new Array(xs.length);
  for (var i = 0; i < xs.length; i++) {
    out[i] = fn(xs[i], i, xs);
  }
  return out;
};

// Array.prototype.reduce is supported in IE9
exports.reduce = function reduce(array, callback, opt_initialValue) {
  if (array.reduce) return array.reduce(callback, opt_initialValue);
  var value, isValueSet = false;

  if (2 < arguments.length) {
    value = opt_initialValue;
    isValueSet = true;
  }
  for (var i = 0, l = array.length; l > i; ++i) {
    if (array.hasOwnProperty(i)) {
      if (isValueSet) {
        value = callback(value, array[i], i, array);
      }
      else {
        value = array[i];
        isValueSet = true;
      }
    }
  }

  return value;
};

// String.prototype.substr - negative index don't work in IE8
if ('ab'.substr(-1) !== 'b') {
  exports.substr = function (str, start, length) {
    // did we get a negative start, calculate how much it is from the beginning of the string
    if (start < 0) start = str.length + start;

    // call the original function
    return str.substr(start, length);
  };
} else {
  exports.substr = function (str, start, length) {
    return str.substr(start, length);
  };
}

// String.prototype.trim is supported in IE9
exports.trim = function (str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
};

// Function.prototype.bind is supported in IE9
exports.bind = function () {
  var args = Array.prototype.slice.call(arguments);
  var fn = args.shift();
  if (fn.bind) return fn.bind.apply(fn, args);
  var self = args.shift();
  return function () {
    fn.apply(self, args.concat([Array.prototype.slice.call(arguments)]));
  };
};

// Object.create is supported in IE9
function create(prototype, properties) {
  var object;
  if (prototype === null) {
    object = { '__proto__' : null };
  }
  else {
    if (typeof prototype !== 'object') {
      throw new TypeError(
        'typeof prototype[' + (typeof prototype) + '] != \'object\''
      );
    }
    var Type = function () {};
    Type.prototype = prototype;
    object = new Type();
    object.__proto__ = prototype;
  }
  if (typeof properties !== 'undefined' && Object.defineProperties) {
    Object.defineProperties(object, properties);
  }
  return object;
}
exports.create = typeof Object.create === 'function' ? Object.create : create;

// Object.keys and Object.getOwnPropertyNames is supported in IE9 however
// they do show a description and number property on Error objects
function notObject(object) {
  return ((typeof object != "object" && typeof object != "function") || object === null);
}

function keysShim(object) {
  if (notObject(object)) {
    throw new TypeError("Object.keys called on a non-object");
  }

  var result = [];
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result.push(name);
    }
  }
  return result;
}

// getOwnPropertyNames is almost the same as Object.keys one key feature
//  is that it returns hidden properties, since that can't be implemented,
//  this feature gets reduced so it just shows the length property on arrays
function propertyShim(object) {
  if (notObject(object)) {
    throw new TypeError("Object.getOwnPropertyNames called on a non-object");
  }

  var result = keysShim(object);
  if (exports.isArray(object) && exports.indexOf(object, 'length') === -1) {
    result.push('length');
  }
  return result;
}

var keys = typeof Object.keys === 'function' ? Object.keys : keysShim;
var getOwnPropertyNames = typeof Object.getOwnPropertyNames === 'function' ?
  Object.getOwnPropertyNames : propertyShim;

if (new Error().hasOwnProperty('description')) {
  var ERROR_PROPERTY_FILTER = function (obj, array) {
    if (toString.call(obj) === '[object Error]') {
      array = exports.filter(array, function (name) {
        return name !== 'description' && name !== 'number' && name !== 'message';
      });
    }
    return array;
  };

  exports.keys = function (object) {
    return ERROR_PROPERTY_FILTER(object, keys(object));
  };
  exports.getOwnPropertyNames = function (object) {
    return ERROR_PROPERTY_FILTER(object, getOwnPropertyNames(object));
  };
} else {
  exports.keys = keys;
  exports.getOwnPropertyNames = getOwnPropertyNames;
}

// Object.getOwnPropertyDescriptor - supported in IE8 but only on dom elements
function valueObject(value, key) {
  return { value: value[key] };
}

if (typeof Object.getOwnPropertyDescriptor === 'function') {
  try {
    Object.getOwnPropertyDescriptor({'a': 1}, 'a');
    exports.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  } catch (e) {
    // IE8 dom element issue - use a try catch and default to valueObject
    exports.getOwnPropertyDescriptor = function (value, key) {
      try {
        return Object.getOwnPropertyDescriptor(value, key);
      } catch (e) {
        return valueObject(value, key);
      }
    };
  }
} else {
  exports.getOwnPropertyDescriptor = valueObject;
}

},{}],32:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// UTILITY
var util = require('util');
var shims = require('_shims');
var pSlice = Array.prototype.slice;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  this.message = options.message || getMessage(this);
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = shims.keys(a),
        kb = shims.keys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};
},{"_shims":31,"util":33}],33:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var shims = require('_shims');

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  shims.forEach(array, function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = shims.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = shims.getOwnPropertyNames(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }

  shims.forEach(keys, function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = shims.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (shims.indexOf(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = shims.reduce(output, function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return shims.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) && objectToString(e) === '[object Error]';
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.binarySlice === 'function'
  ;
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = shims.create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = shims.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

},{"_shims":31}],34:[function(require,module,exports){
require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
exports.readIEEE754 = function(buffer, offset, isBE, mLen, nBytes) {
  var e, m,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      nBits = -7,
      i = isBE ? 0 : (nBytes - 1),
      d = isBE ? 1 : -1,
      s = buffer[offset + i];

  i += d;

  e = s & ((1 << (-nBits)) - 1);
  s >>= (-nBits);
  nBits += eLen;
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);

  m = e & ((1 << (-nBits)) - 1);
  e >>= (-nBits);
  nBits += mLen;
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);

  if (e === 0) {
    e = 1 - eBias;
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity);
  } else {
    m = m + Math.pow(2, mLen);
    e = e - eBias;
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};

exports.writeIEEE754 = function(buffer, value, offset, isBE, mLen, nBytes) {
  var e, m, c,
      eLen = nBytes * 8 - mLen - 1,
      eMax = (1 << eLen) - 1,
      eBias = eMax >> 1,
      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
      i = isBE ? (nBytes - 1) : 0,
      d = isBE ? -1 : 1,
      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

  value = Math.abs(value);

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0;
    e = eMax;
  } else {
    e = Math.floor(Math.log(value) / Math.LN2);
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--;
      c *= 2;
    }
    if (e + eBias >= 1) {
      value += rt / c;
    } else {
      value += rt * Math.pow(2, 1 - eBias);
    }
    if (value * c >= 2) {
      e++;
      c /= 2;
    }

    if (e + eBias >= eMax) {
      m = 0;
      e = eMax;
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen);
      e = e + eBias;
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
      e = 0;
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);

  e = (e << mLen) | m;
  eLen += mLen;
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);

  buffer[offset + i - d] |= s * 128;
};

},{}],"q9TxCC":[function(require,module,exports){
var assert;
exports.Buffer = Buffer;
exports.SlowBuffer = Buffer;
Buffer.poolSize = 8192;
exports.INSPECT_MAX_BYTES = 50;

function stringtrim(str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
}

function Buffer(subject, encoding, offset) {
  if(!assert) assert= require('assert');
  if (!(this instanceof Buffer)) {
    return new Buffer(subject, encoding, offset);
  }
  this.parent = this;
  this.offset = 0;

  // Work-around: node's base64 implementation
  // allows for non-padded strings while base64-js
  // does not..
  if (encoding == "base64" && typeof subject == "string") {
    subject = stringtrim(subject);
    while (subject.length % 4 != 0) {
      subject = subject + "="; 
    }
  }

  var type;

  // Are we slicing?
  if (typeof offset === 'number') {
    this.length = coerce(encoding);
    // slicing works, with limitations (no parent tracking/update)
    // check https://github.com/toots/buffer-browserify/issues/19
    for (var i = 0; i < this.length; i++) {
        this[i] = subject.get(i+offset);
    }
  } else {
    // Find the length
    switch (type = typeof subject) {
      case 'number':
        this.length = coerce(subject);
        break;

      case 'string':
        this.length = Buffer.byteLength(subject, encoding);
        break;

      case 'object': // Assume object is an array
        this.length = coerce(subject.length);
        break;

      default:
        throw new Error('First argument needs to be a number, ' +
                        'array or string.');
    }

    // Treat array-ish objects as a byte array.
    if (isArrayIsh(subject)) {
      for (var i = 0; i < this.length; i++) {
        if (subject instanceof Buffer) {
          this[i] = subject.readUInt8(i);
        }
        else {
          this[i] = subject[i];
        }
      }
    } else if (type == 'string') {
      // We are a string
      this.length = this.write(subject, 0, encoding);
    } else if (type === 'number') {
      for (var i = 0; i < this.length; i++) {
        this[i] = 0;
      }
    }
  }
}

Buffer.prototype.get = function get(i) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this[i];
};

Buffer.prototype.set = function set(i, v) {
  if (i < 0 || i >= this.length) throw new Error('oob');
  return this[i] = v;
};

Buffer.byteLength = function (str, encoding) {
  switch (encoding || "utf8") {
    case 'hex':
      return str.length / 2;

    case 'utf8':
    case 'utf-8':
      return utf8ToBytes(str).length;

    case 'ascii':
    case 'binary':
      return str.length;

    case 'base64':
      return base64ToBytes(str).length;

    default:
      throw new Error('Unknown encoding');
  }
};

Buffer.prototype.utf8Write = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten =  blitBuffer(utf8ToBytes(string), this, offset, length);
};

Buffer.prototype.asciiWrite = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten =  blitBuffer(asciiToBytes(string), this, offset, length);
};

Buffer.prototype.binaryWrite = Buffer.prototype.asciiWrite;

Buffer.prototype.base64Write = function (string, offset, length) {
  var bytes, pos;
  return Buffer._charsWritten = blitBuffer(base64ToBytes(string), this, offset, length);
};

Buffer.prototype.base64Slice = function (start, end) {
  var bytes = Array.prototype.slice.apply(this, arguments)
  return require("base64-js").fromByteArray(bytes);
};

Buffer.prototype.utf8Slice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var res = "";
  var tmp = "";
  var i = 0;
  while (i < bytes.length) {
    if (bytes[i] <= 0x7F) {
      res += decodeUtf8Char(tmp) + String.fromCharCode(bytes[i]);
      tmp = "";
    } else
      tmp += "%" + bytes[i].toString(16);

    i++;
  }

  return res + decodeUtf8Char(tmp);
}

Buffer.prototype.asciiSlice = function () {
  var bytes = Array.prototype.slice.apply(this, arguments);
  var ret = "";
  for (var i = 0; i < bytes.length; i++)
    ret += String.fromCharCode(bytes[i]);
  return ret;
}

Buffer.prototype.binarySlice = Buffer.prototype.asciiSlice;

Buffer.prototype.inspect = function() {
  var out = [],
      len = this.length;
  for (var i = 0; i < len; i++) {
    out[i] = toHex(this[i]);
    if (i == exports.INSPECT_MAX_BYTES) {
      out[i + 1] = '...';
      break;
    }
  }
  return '<Buffer ' + out.join(' ') + '>';
};


Buffer.prototype.hexSlice = function(start, end) {
  var len = this.length;

  if (!start || start < 0) start = 0;
  if (!end || end < 0 || end > len) end = len;

  var out = '';
  for (var i = start; i < end; i++) {
    out += toHex(this[i]);
  }
  return out;
};


Buffer.prototype.toString = function(encoding, start, end) {
  encoding = String(encoding || 'utf8').toLowerCase();
  start = +start || 0;
  if (typeof end == 'undefined') end = this.length;

  // Fastpath empty strings
  if (+end == start) {
    return '';
  }

  switch (encoding) {
    case 'hex':
      return this.hexSlice(start, end);

    case 'utf8':
    case 'utf-8':
      return this.utf8Slice(start, end);

    case 'ascii':
      return this.asciiSlice(start, end);

    case 'binary':
      return this.binarySlice(start, end);

    case 'base64':
      return this.base64Slice(start, end);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Slice(start, end);

    default:
      throw new Error('Unknown encoding');
  }
};


Buffer.prototype.hexWrite = function(string, offset, length) {
  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }

  // must be an even number of digits
  var strLen = string.length;
  if (strLen % 2) {
    throw new Error('Invalid hex string');
  }
  if (length > strLen / 2) {
    length = strLen / 2;
  }
  for (var i = 0; i < length; i++) {
    var byte = parseInt(string.substr(i * 2, 2), 16);
    if (isNaN(byte)) throw new Error('Invalid hex string');
    this[offset + i] = byte;
  }
  Buffer._charsWritten = i * 2;
  return i;
};


Buffer.prototype.write = function(string, offset, length, encoding) {
  // Support both (string, offset, length, encoding)
  // and the legacy (string, encoding, offset, length)
  if (isFinite(offset)) {
    if (!isFinite(length)) {
      encoding = length;
      length = undefined;
    }
  } else {  // legacy
    var swap = encoding;
    encoding = offset;
    offset = length;
    length = swap;
  }

  offset = +offset || 0;
  var remaining = this.length - offset;
  if (!length) {
    length = remaining;
  } else {
    length = +length;
    if (length > remaining) {
      length = remaining;
    }
  }
  encoding = String(encoding || 'utf8').toLowerCase();

  switch (encoding) {
    case 'hex':
      return this.hexWrite(string, offset, length);

    case 'utf8':
    case 'utf-8':
      return this.utf8Write(string, offset, length);

    case 'ascii':
      return this.asciiWrite(string, offset, length);

    case 'binary':
      return this.binaryWrite(string, offset, length);

    case 'base64':
      return this.base64Write(string, offset, length);

    case 'ucs2':
    case 'ucs-2':
      return this.ucs2Write(string, offset, length);

    default:
      throw new Error('Unknown encoding');
  }
};

// slice(start, end)
function clamp(index, len, defaultValue) {
  if (typeof index !== 'number') return defaultValue;
  index = ~~index;  // Coerce to integer.
  if (index >= len) return len;
  if (index >= 0) return index;
  index += len;
  if (index >= 0) return index;
  return 0;
}

Buffer.prototype.slice = function(start, end) {
  var len = this.length;
  start = clamp(start, len, 0);
  end = clamp(end, len, len);
  return new Buffer(this, end - start, +start);
};

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function(target, target_start, start, end) {
  var source = this;
  start || (start = 0);
  if (end === undefined || isNaN(end)) {
    end = this.length;
  }
  target_start || (target_start = 0);

  if (end < start) throw new Error('sourceEnd < sourceStart');

  // Copy 0 bytes; we're done
  if (end === start) return 0;
  if (target.length == 0 || source.length == 0) return 0;

  if (target_start < 0 || target_start >= target.length) {
    throw new Error('targetStart out of bounds');
  }

  if (start < 0 || start >= source.length) {
    throw new Error('sourceStart out of bounds');
  }

  if (end < 0 || end > source.length) {
    throw new Error('sourceEnd out of bounds');
  }

  // Are we oob?
  if (end > this.length) {
    end = this.length;
  }

  if (target.length - target_start < end - start) {
    end = target.length - target_start + start;
  }

  var temp = [];
  for (var i=start; i<end; i++) {
    assert.ok(typeof this[i] !== 'undefined', "copying undefined buffer bytes!");
    temp.push(this[i]);
  }

  for (var i=target_start; i<target_start+temp.length; i++) {
    target[i] = temp[i-target_start];
  }
};

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill(value, start, end) {
  value || (value = 0);
  start || (start = 0);
  end || (end = this.length);

  if (typeof value === 'string') {
    value = value.charCodeAt(0);
  }
  if (!(typeof value === 'number') || isNaN(value)) {
    throw new Error('value is not a number');
  }

  if (end < start) throw new Error('end < start');

  // Fill 0 bytes; we're done
  if (end === start) return 0;
  if (this.length == 0) return 0;

  if (start < 0 || start >= this.length) {
    throw new Error('start out of bounds');
  }

  if (end < 0 || end > this.length) {
    throw new Error('end out of bounds');
  }

  for (var i = start; i < end; i++) {
    this[i] = value;
  }
}

// Static methods
Buffer.isBuffer = function isBuffer(b) {
  return b instanceof Buffer || b instanceof Buffer;
};

Buffer.concat = function (list, totalLength) {
  if (!isArray(list)) {
    throw new Error("Usage: Buffer.concat(list, [totalLength])\n \
      list should be an Array.");
  }

  if (list.length === 0) {
    return new Buffer(0);
  } else if (list.length === 1) {
    return list[0];
  }

  if (typeof totalLength !== 'number') {
    totalLength = 0;
    for (var i = 0; i < list.length; i++) {
      var buf = list[i];
      totalLength += buf.length;
    }
  }

  var buffer = new Buffer(totalLength);
  var pos = 0;
  for (var i = 0; i < list.length; i++) {
    var buf = list[i];
    buf.copy(buffer, pos);
    pos += buf.length;
  }
  return buffer;
};

Buffer.isEncoding = function(encoding) {
  switch ((encoding + '').toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
    case 'raw':
      return true;

    default:
      return false;
  }
};

// helpers

function coerce(length) {
  // Coerce length to a number (possibly NaN), round up
  // in case it's fractional (e.g. 123.456) then do a
  // double negate to coerce a NaN to 0. Easy, right?
  length = ~~Math.ceil(+length);
  return length < 0 ? 0 : length;
}

function isArray(subject) {
  return (Array.isArray ||
    function(subject){
      return {}.toString.apply(subject) == '[object Array]'
    })
    (subject)
}

function isArrayIsh(subject) {
  return isArray(subject) || Buffer.isBuffer(subject) ||
         subject && typeof subject === 'object' &&
         typeof subject.length === 'number';
}

function toHex(n) {
  if (n < 16) return '0' + n.toString(16);
  return n.toString(16);
}

function utf8ToBytes(str) {
  var byteArray = [];
  for (var i = 0; i < str.length; i++)
    if (str.charCodeAt(i) <= 0x7F)
      byteArray.push(str.charCodeAt(i));
    else {
      var h = encodeURIComponent(str.charAt(i)).substr(1).split('%');
      for (var j = 0; j < h.length; j++)
        byteArray.push(parseInt(h[j], 16));
    }

  return byteArray;
}

function asciiToBytes(str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++ )
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push( str.charCodeAt(i) & 0xFF );

  return byteArray;
}

function base64ToBytes(str) {
  return require("base64-js").toByteArray(str);
}

function blitBuffer(src, dst, offset, length) {
  var pos, i = 0;
  while (i < length) {
    if ((i+offset >= dst.length) || (i >= src.length))
      break;

    dst[i + offset] = src[i];
    i++;
  }
  return i;
}

function decodeUtf8Char(str) {
  try {
    return decodeURIComponent(str);
  } catch (err) {
    return String.fromCharCode(0xFFFD); // UTF 8 invalid char
  }
}

// read/write bit-twiddling

Buffer.prototype.readUInt8 = function(offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return;

  return buffer[offset];
};

function readUInt16(buffer, offset, isBigEndian, noAssert) {
  var val = 0;


  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return 0;

  if (isBigEndian) {
    val = buffer[offset] << 8;
    if (offset + 1 < buffer.length) {
      val |= buffer[offset + 1];
    }
  } else {
    val = buffer[offset];
    if (offset + 1 < buffer.length) {
      val |= buffer[offset + 1] << 8;
    }
  }

  return val;
}

Buffer.prototype.readUInt16LE = function(offset, noAssert) {
  return readUInt16(this, offset, false, noAssert);
};

Buffer.prototype.readUInt16BE = function(offset, noAssert) {
  return readUInt16(this, offset, true, noAssert);
};

function readUInt32(buffer, offset, isBigEndian, noAssert) {
  var val = 0;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return 0;

  if (isBigEndian) {
    if (offset + 1 < buffer.length)
      val = buffer[offset + 1] << 16;
    if (offset + 2 < buffer.length)
      val |= buffer[offset + 2] << 8;
    if (offset + 3 < buffer.length)
      val |= buffer[offset + 3];
    val = val + (buffer[offset] << 24 >>> 0);
  } else {
    if (offset + 2 < buffer.length)
      val = buffer[offset + 2] << 16;
    if (offset + 1 < buffer.length)
      val |= buffer[offset + 1] << 8;
    val |= buffer[offset];
    if (offset + 3 < buffer.length)
      val = val + (buffer[offset + 3] << 24 >>> 0);
  }

  return val;
}

Buffer.prototype.readUInt32LE = function(offset, noAssert) {
  return readUInt32(this, offset, false, noAssert);
};

Buffer.prototype.readUInt32BE = function(offset, noAssert) {
  return readUInt32(this, offset, true, noAssert);
};


/*
 * Signed integer types, yay team! A reminder on how two's complement actually
 * works. The first bit is the signed bit, i.e. tells us whether or not the
 * number should be positive or negative. If the two's complement value is
 * positive, then we're done, as it's equivalent to the unsigned representation.
 *
 * Now if the number is positive, you're pretty much done, you can just leverage
 * the unsigned translations and return those. Unfortunately, negative numbers
 * aren't quite that straightforward.
 *
 * At first glance, one might be inclined to use the traditional formula to
 * translate binary numbers between the positive and negative values in two's
 * complement. (Though it doesn't quite work for the most negative value)
 * Mainly:
 *  - invert all the bits
 *  - add one to the result
 *
 * Of course, this doesn't quite work in Javascript. Take for example the value
 * of -128. This could be represented in 16 bits (big-endian) as 0xff80. But of
 * course, Javascript will do the following:
 *
 * > ~0xff80
 * -65409
 *
 * Whoh there, Javascript, that's not quite right. But wait, according to
 * Javascript that's perfectly correct. When Javascript ends up seeing the
 * constant 0xff80, it has no notion that it is actually a signed number. It
 * assumes that we've input the unsigned value 0xff80. Thus, when it does the
 * binary negation, it casts it into a signed value, (positive 0xff80). Then
 * when you perform binary negation on that, it turns it into a negative number.
 *
 * Instead, we're going to have to use the following general formula, that works
 * in a rather Javascript friendly way. I'm glad we don't support this kind of
 * weird numbering scheme in the kernel.
 *
 * (BIT-MAX - (unsigned)val + 1) * -1
 *
 * The astute observer, may think that this doesn't make sense for 8-bit numbers
 * (really it isn't necessary for them). However, when you get 16-bit numbers,
 * you do. Let's go back to our prior example and see how this will look:
 *
 * (0xffff - 0xff80 + 1) * -1
 * (0x007f + 1) * -1
 * (0x0080) * -1
 */
Buffer.prototype.readInt8 = function(offset, noAssert) {
  var buffer = this;
  var neg;

  if (!noAssert) {
    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to read beyond buffer length');
  }

  if (offset >= buffer.length) return;

  neg = buffer[offset] & 0x80;
  if (!neg) {
    return (buffer[offset]);
  }

  return ((0xff - buffer[offset] + 1) * -1);
};

function readInt16(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt16(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x8000;
  if (!neg) {
    return val;
  }

  return (0xffff - val + 1) * -1;
}

Buffer.prototype.readInt16LE = function(offset, noAssert) {
  return readInt16(this, offset, false, noAssert);
};

Buffer.prototype.readInt16BE = function(offset, noAssert) {
  return readInt16(this, offset, true, noAssert);
};

function readInt32(buffer, offset, isBigEndian, noAssert) {
  var neg, val;

  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  val = readUInt32(buffer, offset, isBigEndian, noAssert);
  neg = val & 0x80000000;
  if (!neg) {
    return (val);
  }

  return (0xffffffff - val + 1) * -1;
}

Buffer.prototype.readInt32LE = function(offset, noAssert) {
  return readInt32(this, offset, false, noAssert);
};

Buffer.prototype.readInt32BE = function(offset, noAssert) {
  return readInt32(this, offset, true, noAssert);
};

function readFloat(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 3 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.readFloatLE = function(offset, noAssert) {
  return readFloat(this, offset, false, noAssert);
};

Buffer.prototype.readFloatBE = function(offset, noAssert) {
  return readFloat(this, offset, true, noAssert);
};

function readDouble(buffer, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset + 7 < buffer.length,
        'Trying to read beyond buffer length');
  }

  return require('./buffer_ieee754').readIEEE754(buffer, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.readDoubleLE = function(offset, noAssert) {
  return readDouble(this, offset, false, noAssert);
};

Buffer.prototype.readDoubleBE = function(offset, noAssert) {
  return readDouble(this, offset, true, noAssert);
};


/*
 * We have to make sure that the value is a valid integer. This means that it is
 * non-negative. It has no fractional component and that it does not exceed the
 * maximum allowed value.
 *
 *      value           The number to check for validity
 *
 *      max             The maximum value
 */
function verifuint(value, max) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value >= 0,
      'specified a negative value for writing an unsigned value');

  assert.ok(value <= max, 'value is larger than maximum value for type');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

Buffer.prototype.writeUInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xff);
  }

  if (offset < buffer.length) {
    buffer[offset] = value;
  }
};

function writeUInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffff);
  }

  for (var i = 0; i < Math.min(buffer.length - offset, 2); i++) {
    buffer[offset + i] =
        (value & (0xff << (8 * (isBigEndian ? 1 - i : i)))) >>>
            (isBigEndian ? 1 - i : i) * 8;
  }

}

Buffer.prototype.writeUInt16LE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt16BE = function(value, offset, noAssert) {
  writeUInt16(this, value, offset, true, noAssert);
};

function writeUInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'trying to write beyond buffer length');

    verifuint(value, 0xffffffff);
  }

  for (var i = 0; i < Math.min(buffer.length - offset, 4); i++) {
    buffer[offset + i] =
        (value >>> (isBigEndian ? 3 - i : i) * 8) & 0xff;
  }
}

Buffer.prototype.writeUInt32LE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeUInt32BE = function(value, offset, noAssert) {
  writeUInt32(this, value, offset, true, noAssert);
};


/*
 * We now move onto our friends in the signed number category. Unlike unsigned
 * numbers, we're going to have to worry a bit more about how we put values into
 * arrays. Since we are only worrying about signed 32-bit values, we're in
 * slightly better shape. Unfortunately, we really can't do our favorite binary
 * & in this system. It really seems to do the wrong thing. For example:
 *
 * > -32 & 0xff
 * 224
 *
 * What's happening above is really: 0xe0 & 0xff = 0xe0. However, the results of
 * this aren't treated as a signed number. Ultimately a bad thing.
 *
 * What we're going to want to do is basically create the unsigned equivalent of
 * our representation and pass that off to the wuint* functions. To do that
 * we're going to do the following:
 *
 *  - if the value is positive
 *      we can pass it directly off to the equivalent wuint
 *  - if the value is negative
 *      we do the following computation:
 *         mb + val + 1, where
 *         mb   is the maximum unsigned value in that byte size
 *         val  is the Javascript negative integer
 *
 *
 * As a concrete value, take -128. In signed 16 bits this would be 0xff80. If
 * you do out the computations:
 *
 * 0xffff - 128 + 1
 * 0xffff - 127
 * 0xff80
 *
 * You can then encode this value as the signed version. This is really rather
 * hacky, but it should work and get the job done which is our goal here.
 */

/*
 * A series of checks to make sure we actually have a signed 32-bit number
 */
function verifsint(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');

  assert.ok(Math.floor(value) === value, 'value has a fractional component');
}

function verifIEEE754(value, max, min) {
  assert.ok(typeof (value) == 'number',
      'cannot write a non-number as a number');

  assert.ok(value <= max, 'value larger than maximum allowed value');

  assert.ok(value >= min, 'value smaller than minimum allowed value');
}

Buffer.prototype.writeInt8 = function(value, offset, noAssert) {
  var buffer = this;

  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7f, -0x80);
  }

  if (value >= 0) {
    buffer.writeUInt8(value, offset, noAssert);
  } else {
    buffer.writeUInt8(0xff + value + 1, offset, noAssert);
  }
};

function writeInt16(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 1 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fff, -0x8000);
  }

  if (value >= 0) {
    writeUInt16(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt16(buffer, 0xffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt16LE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt16BE = function(value, offset, noAssert) {
  writeInt16(this, value, offset, true, noAssert);
};

function writeInt32(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifsint(value, 0x7fffffff, -0x80000000);
  }

  if (value >= 0) {
    writeUInt32(buffer, value, offset, isBigEndian, noAssert);
  } else {
    writeUInt32(buffer, 0xffffffff + value + 1, offset, isBigEndian, noAssert);
  }
}

Buffer.prototype.writeInt32LE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, false, noAssert);
};

Buffer.prototype.writeInt32BE = function(value, offset, noAssert) {
  writeInt32(this, value, offset, true, noAssert);
};

function writeFloat(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 3 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 3.4028234663852886e+38, -3.4028234663852886e+38);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      23, 4);
}

Buffer.prototype.writeFloatLE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, false, noAssert);
};

Buffer.prototype.writeFloatBE = function(value, offset, noAssert) {
  writeFloat(this, value, offset, true, noAssert);
};

function writeDouble(buffer, value, offset, isBigEndian, noAssert) {
  if (!noAssert) {
    assert.ok(value !== undefined && value !== null,
        'missing value');

    assert.ok(typeof (isBigEndian) === 'boolean',
        'missing or invalid endian');

    assert.ok(offset !== undefined && offset !== null,
        'missing offset');

    assert.ok(offset + 7 < buffer.length,
        'Trying to write beyond buffer length');

    verifIEEE754(value, 1.7976931348623157E+308, -1.7976931348623157E+308);
  }

  require('./buffer_ieee754').writeIEEE754(buffer, value, offset, isBigEndian,
      52, 8);
}

Buffer.prototype.writeDoubleLE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, false, noAssert);
};

Buffer.prototype.writeDoubleBE = function(value, offset, noAssert) {
  writeDouble(this, value, offset, true, noAssert);
};

},{"./buffer_ieee754":1,"assert":6,"base64-js":4}],"buffer-browserify":[function(require,module,exports){
module.exports=require('q9TxCC');
},{}],4:[function(require,module,exports){
(function (exports) {
	'use strict';

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	function b64ToByteArray(b64) {
		var i, j, l, tmp, placeHolders, arr;
	
		if (b64.length % 4 > 0) {
			throw 'Invalid string. Length must be a multiple of 4';
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		placeHolders = b64.indexOf('=');
		placeHolders = placeHolders > 0 ? b64.length - placeHolders : 0;

		// base64 is 4/3 + up to two characters of the original data
		arr = [];//new Uint8Array(b64.length * 3 / 4 - placeHolders);

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length;

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (lookup.indexOf(b64[i]) << 18) | (lookup.indexOf(b64[i + 1]) << 12) | (lookup.indexOf(b64[i + 2]) << 6) | lookup.indexOf(b64[i + 3]);
			arr.push((tmp & 0xFF0000) >> 16);
			arr.push((tmp & 0xFF00) >> 8);
			arr.push(tmp & 0xFF);
		}

		if (placeHolders === 2) {
			tmp = (lookup.indexOf(b64[i]) << 2) | (lookup.indexOf(b64[i + 1]) >> 4);
			arr.push(tmp & 0xFF);
		} else if (placeHolders === 1) {
			tmp = (lookup.indexOf(b64[i]) << 10) | (lookup.indexOf(b64[i + 1]) << 4) | (lookup.indexOf(b64[i + 2]) >> 2);
			arr.push((tmp >> 8) & 0xFF);
			arr.push(tmp & 0xFF);
		}

		return arr;
	}

	function uint8ToBase64(uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length;

		function tripletToBase64 (num) {
			return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
		};

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
			output += tripletToBase64(temp);
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1];
				output += lookup[temp >> 2];
				output += lookup[(temp << 4) & 0x3F];
				output += '==';
				break;
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);
				output += lookup[temp >> 10];
				output += lookup[(temp >> 4) & 0x3F];
				output += lookup[(temp << 2) & 0x3F];
				output += '=';
				break;
		}

		return output;
	}

	module.exports.toByteArray = b64ToByteArray;
	module.exports.fromByteArray = uint8ToBase64;
}());

},{}],5:[function(require,module,exports){


//
// The shims in this file are not fully implemented shims for the ES5
// features, but do work for the particular usecases there is in
// the other modules.
//

var toString = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

// Array.isArray is supported in IE9
function isArray(xs) {
  return toString.call(xs) === '[object Array]';
}
exports.isArray = typeof Array.isArray === 'function' ? Array.isArray : isArray;

// Array.prototype.indexOf is supported in IE9
exports.indexOf = function indexOf(xs, x) {
  if (xs.indexOf) return xs.indexOf(x);
  for (var i = 0; i < xs.length; i++) {
    if (x === xs[i]) return i;
  }
  return -1;
};

// Array.prototype.filter is supported in IE9
exports.filter = function filter(xs, fn) {
  if (xs.filter) return xs.filter(fn);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    if (fn(xs[i], i, xs)) res.push(xs[i]);
  }
  return res;
};

// Array.prototype.forEach is supported in IE9
exports.forEach = function forEach(xs, fn, self) {
  if (xs.forEach) return xs.forEach(fn, self);
  for (var i = 0; i < xs.length; i++) {
    fn.call(self, xs[i], i, xs);
  }
};

// Array.prototype.map is supported in IE9
exports.map = function map(xs, fn) {
  if (xs.map) return xs.map(fn);
  var out = new Array(xs.length);
  for (var i = 0; i < xs.length; i++) {
    out[i] = fn(xs[i], i, xs);
  }
  return out;
};

// Array.prototype.reduce is supported in IE9
exports.reduce = function reduce(array, callback, opt_initialValue) {
  if (array.reduce) return array.reduce(callback, opt_initialValue);
  var value, isValueSet = false;

  if (2 < arguments.length) {
    value = opt_initialValue;
    isValueSet = true;
  }
  for (var i = 0, l = array.length; l > i; ++i) {
    if (array.hasOwnProperty(i)) {
      if (isValueSet) {
        value = callback(value, array[i], i, array);
      }
      else {
        value = array[i];
        isValueSet = true;
      }
    }
  }

  return value;
};

// String.prototype.substr - negative index don't work in IE8
if ('ab'.substr(-1) !== 'b') {
  exports.substr = function (str, start, length) {
    // did we get a negative start, calculate how much it is from the beginning of the string
    if (start < 0) start = str.length + start;

    // call the original function
    return str.substr(start, length);
  };
} else {
  exports.substr = function (str, start, length) {
    return str.substr(start, length);
  };
}

// String.prototype.trim is supported in IE9
exports.trim = function (str) {
  if (str.trim) return str.trim();
  return str.replace(/^\s+|\s+$/g, '');
};

// Function.prototype.bind is supported in IE9
exports.bind = function () {
  var args = Array.prototype.slice.call(arguments);
  var fn = args.shift();
  if (fn.bind) return fn.bind.apply(fn, args);
  var self = args.shift();
  return function () {
    fn.apply(self, args.concat([Array.prototype.slice.call(arguments)]));
  };
};

// Object.create is supported in IE9
function create(prototype, properties) {
  var object;
  if (prototype === null) {
    object = { '__proto__' : null };
  }
  else {
    if (typeof prototype !== 'object') {
      throw new TypeError(
        'typeof prototype[' + (typeof prototype) + '] != \'object\''
      );
    }
    var Type = function () {};
    Type.prototype = prototype;
    object = new Type();
    object.__proto__ = prototype;
  }
  if (typeof properties !== 'undefined' && Object.defineProperties) {
    Object.defineProperties(object, properties);
  }
  return object;
}
exports.create = typeof Object.create === 'function' ? Object.create : create;

// Object.keys and Object.getOwnPropertyNames is supported in IE9 however
// they do show a description and number property on Error objects
function notObject(object) {
  return ((typeof object != "object" && typeof object != "function") || object === null);
}

function keysShim(object) {
  if (notObject(object)) {
    throw new TypeError("Object.keys called on a non-object");
  }

  var result = [];
  for (var name in object) {
    if (hasOwnProperty.call(object, name)) {
      result.push(name);
    }
  }
  return result;
}

// getOwnPropertyNames is almost the same as Object.keys one key feature
//  is that it returns hidden properties, since that can't be implemented,
//  this feature gets reduced so it just shows the length property on arrays
function propertyShim(object) {
  if (notObject(object)) {
    throw new TypeError("Object.getOwnPropertyNames called on a non-object");
  }

  var result = keysShim(object);
  if (exports.isArray(object) && exports.indexOf(object, 'length') === -1) {
    result.push('length');
  }
  return result;
}

var keys = typeof Object.keys === 'function' ? Object.keys : keysShim;
var getOwnPropertyNames = typeof Object.getOwnPropertyNames === 'function' ?
  Object.getOwnPropertyNames : propertyShim;

if (new Error().hasOwnProperty('description')) {
  var ERROR_PROPERTY_FILTER = function (obj, array) {
    if (toString.call(obj) === '[object Error]') {
      array = exports.filter(array, function (name) {
        return name !== 'description' && name !== 'number' && name !== 'message';
      });
    }
    return array;
  };

  exports.keys = function (object) {
    return ERROR_PROPERTY_FILTER(object, keys(object));
  };
  exports.getOwnPropertyNames = function (object) {
    return ERROR_PROPERTY_FILTER(object, getOwnPropertyNames(object));
  };
} else {
  exports.keys = keys;
  exports.getOwnPropertyNames = getOwnPropertyNames;
}

// Object.getOwnPropertyDescriptor - supported in IE8 but only on dom elements
function valueObject(value, key) {
  return { value: value[key] };
}

if (typeof Object.getOwnPropertyDescriptor === 'function') {
  try {
    Object.getOwnPropertyDescriptor({'a': 1}, 'a');
    exports.getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
  } catch (e) {
    // IE8 dom element issue - use a try catch and default to valueObject
    exports.getOwnPropertyDescriptor = function (value, key) {
      try {
        return Object.getOwnPropertyDescriptor(value, key);
      } catch (e) {
        return valueObject(value, key);
      }
    };
  }
} else {
  exports.getOwnPropertyDescriptor = valueObject;
}

},{}],6:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// UTILITY
var util = require('util');
var shims = require('_shims');
var pSlice = Array.prototype.slice;

// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  this.message = options.message || getMessage(this);
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function replacer(key, value) {
  if (util.isUndefined(value)) {
    return '' + value;
  }
  if (util.isNumber(value) && (isNaN(value) || !isFinite(value))) {
    return value.toString();
  }
  if (util.isFunction(value) || util.isRegExp(value)) {
    return value.toString();
  }
  return value;
}

function truncate(s, n) {
  if (util.isString(s)) {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}

function getMessage(self) {
  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
         self.operator + ' ' +
         truncate(JSON.stringify(self.expected, replacer), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (isArguments(a)) {
    if (!isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try {
    var ka = shims.keys(a),
        kb = shims.keys(b),
        key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  } else if (actual instanceof expected) {
    return true;
  } else if (expected.call({}, actual) === true) {
    return true;
  }

  return false;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (util.isString(expected)) {
    message = expected;
    expected = null;
  }

  try {
    block();
  } catch (e) {
    actual = e;
  }

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  if (!shouldThrow && expectedException(actual, expected)) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws.apply(this, [true].concat(pSlice.call(arguments)));
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/message) {
  _throws.apply(this, [false].concat(pSlice.call(arguments)));
};

assert.ifError = function(err) { if (err) {throw err;}};
},{"_shims":5,"util":7}],7:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var shims = require('_shims');

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  shims.forEach(array, function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = shims.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = shims.getOwnPropertyNames(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }

  shims.forEach(keys, function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = shims.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }

  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (shims.indexOf(ctx.seen, desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = shims.reduce(output, function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return shims.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) && objectToString(e) === '[object Error]';
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

function isBuffer(arg) {
  return arg instanceof Buffer;
}
exports.isBuffer = isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = function(ctor, superCtor) {
  ctor.super_ = superCtor;
  ctor.prototype = shims.create(superCtor.prototype, {
    constructor: {
      value: ctor,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
};

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = shims.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

},{"_shims":5}]},{},[])
;;module.exports=require("buffer-browserify")

},{}],35:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            if (ev.source === window && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],36:[function(require,module,exports){
if(typeof process !== 'undefined' && typeof process.versions !== 'undefined' && typeof process.versions.node !== 'undefined') {
;var http = require('http');
var url = require('url');
var zlib = require('zlib');

;;var isArrayBufferView = function(input) {
    return typeof input === 'object' && input !== null && (
        (global.ArrayBufferView && input instanceof ArrayBufferView) ||
        (global.Int8Array && input instanceof Int8Array) ||
        (global.Uint8Array && input instanceof Uint8Array) ||
        (global.Uint8ClampedArray && input instanceof Uint8ClampedArray) ||
        (global.Int16Array && input instanceof Int16Array) ||
        (global.Uint16Array && input instanceof Uint16Array) ||
        (global.Int32Array && input instanceof Int32Array) ||
        (global.Uint32Array && input instanceof Uint32Array) ||
        (global.Float32Array && input instanceof Float32Array) ||
        (global.Float64Array && input instanceof Float64Array)
    );
}, isArray = function(object) {
    return Object.prototype.toString.call(object) === '[object Array]';
}, isByteArray = function(input) {
    return typeof input === 'object' && input !== null && (
        (global.Buffer && input instanceof Buffer) ||
        (global.Blob && input instanceof Blob) ||
        (global.File && input instanceof File) ||
        (global.ArrayBuffer && input instanceof ArrayBuffer) ||
        isArrayBufferView(input) ||
        isArray(input)
    );
}, bytearrayMessage = 'an instance of Buffer, nor Blob, nor File, nor ArrayBuffer, nor ArrayBufferView, nor Int8Array, nor Uint8Array, nor Uint8ClampedArray, nor Int16Array, nor Uint16Array, nor Int32Array, nor Uint32Array, nor Float32Array, nor Float64Array, nor Array', supportedMethods = ',GET,HEAD,PATCH,POST,PUT,DELETE,', pass = function(value) {
    return value;
}, nextTick = (global.process && global.process.nextTick) || global.setImmediate || global.setTimeout, _undefined;
;

var decompress = function(output, encoding, cb) {
    if(encoding === 'gzip') {
        zlib.gunzip(output, cb);
    } else if(encoding === 'deflate') {
        zlib.inflate(output, function(err, out) {
            if(err) {
                return zlib.inflateRaw(output, cb);
            }
            cb(null, out);
        });
    } else if(encoding === 'identity') {
        process.nextTick(function() {
            cb(null, output);
        });
    } else {
        process.nextTick(function() {
            cb(new Error('unsupported encoding ' + encoding));
        });
    }
};

// http://www.w3.org/TR/XMLHttpRequest/#the-setrequestheader()-method
var forbiddenInputHeaders = ['accept-charset', 'accept-encoding', 'access-control-request-headers', 'access-control-request-method', 'connection', 'content-length', 'content-transfer-encoding', 'cookie', 'cookie2', 'date', 'dnt', 'expect', 'host', 'keep-alive', 'origin', 'referer', 'te', 'trailer', 'transfer-encoding', 'upgrade', 'user-agent', 'via'];
var validateInputHeaders = function(headers) {
    for(var header in headers) {
        if(headers.hasOwnProperty(header)) {
            var headerl = header.toLowerCase();
            if(forbiddenInputHeaders.indexOf(headerl) >= 0) {
                throw new Error('Input header ' + header + ' is forbidden to be set programmatically');
            }
            if(headerl.substr(0, 'proxy-'.length) === 'proxy-') {
                throw new Error('Input header ' + header + ' (to be precise, all Proxy-*) is forbidden to be set programmatically');
            }
            if(headerl.substr(0, 'sec-'.length) === 'sec-') {
                throw new Error('Input header ' + header + ' (to be precise, all Sec-*) is forbidden to be set programmatically');
            }
        }
    }
};

var copy = function(from, to) {
    Object.keys(from).forEach(function(key) {
        to[key] = from[key];
    });
    return to;
};

var httpinvoke = function(uri, method, options, cb) {
    ;var mixInPromise, promise, failWithoutRequest, uploadProgressCb, inputLength, noData, timeout, inputHeaders, statusCb, initDownload, updateDownload, outputHeaders, exposedHeaders, status, outputBinary, input, outputLength, outputConverter;
/*************** COMMON initialize parameters **************/
if(!method) {
    // 1 argument
    // method, options, cb skipped
    method = 'GET';
    options = {};
} else if(!options) {
    // 2 arguments
    if(typeof method === 'string') {
        // options. cb skipped
        options = {};
    } else if(typeof method === 'object') {
        // method, cb skipped
        options = method;
        method = 'GET';
    } else {
        // method, options skipped
        options = {
            finished: method
        };
        method = 'GET';
    }
} else if(!cb) {
    // 3 arguments
    if(typeof method === 'object') {
        // method skipped
        method.finished = options;
        options = method;
        method = 'GET';
    } else if(typeof options === 'function') {
        // options skipped
        options = {
            finished: options
        };
    }
    // cb skipped
} else {
    // 4 arguments
    options.finished = cb;
}
var safeCallback = function(name, aspect) {
    if(name in options) {
        return function(a, b, c, d) {
            try {
                options[name](a, b, c, d);
            } catch(_) {
            }
            aspect(a, b, c, d);
        };
    }
    return aspect;
};
var chain = function(a, b) {
    a && a.then && a.then(function() {
        b[resolve].apply(null, arguments);
    }, function() {
        b[reject].apply(null, arguments);
    }, function() {
        b[progress].apply(null, arguments);
    });
};
var resolve = 0, reject = 1, progress = 2;
mixInPromise = function(o) {
    var value, queue = [], state = progress;
    var makeState = function(newstate) {
        o[newstate] = function(newvalue) {
            var i, p;
            if(queue) {
                value = newvalue;
                state = newstate;

                for(i = 0; i < queue.length; i++) {
                    if(typeof queue[i][state] === 'function') {
                        try {
                            p = queue[i][state].call(null, value);
                            if(state < progress) {
                                chain(p, queue[i]._);
                            }
                        } catch(err) {
                            queue[i]._[reject](err);
                        }
                    } else if(state < progress) {
                        queue[i]._[state](value);
                    }
                }
                if(state < progress) {
                    queue = null;
                }
            }
        };
    };
    makeState(progress);
    makeState(resolve);
    makeState(reject);
    o.then = function() {
        var item = [].slice.call(arguments);
        item._ = mixInPromise({});
        if(queue) {
            queue.push(item);
        } else if(typeof item[state] === 'function') {
            nextTick(function() {
                chain(item[state](value), item._);
            });
        }
        return item._;
    };
    return o;
};
failWithoutRequest = function(cb, err) {
    nextTick(function() {
        if(cb === null) {
            return;
        }
        cb(err);
    });
    promise = function() {
    };
    return mixInPromise(promise);
};

uploadProgressCb = safeCallback('uploading', function(current, total) {
    promise[progress]({
        type: 'upload',
        current: current,
        total: total
    });
});
var downloadProgressCb = safeCallback('downloading', function(current, total) {
    promise[progress]({
        type: 'download',
        current: current,
        total: total
    });
});
statusCb = safeCallback('gotStatus', function(statusCode, headers) {
    promise[progress]({
        type: 'headers',
        statusCode: statusCode,
        headers: headers
    });
});
cb = safeCallback('finished', function(err, body, statusCode, headers) {
    if(err) {
        return promise[reject](err);
    }
    promise[resolve]({
        body: body,
        statusCode: statusCode,
        headers: headers
    });
});
timeout = options.timeout || 0;
var converters = options.converters || {};
var inputConverter;
inputLength = 0;
inputHeaders = options.headers || {};
outputHeaders = {};
exposedHeaders = options.corsExposedHeaders || [];
exposedHeaders.push.apply(exposedHeaders, ['Cache-Control', 'Content-Language', 'Content-Type', 'Content-Length', 'Expires', 'Last-Modified', 'Pragma', 'Content-Range']);
/*************** COMMON convert and validate parameters **************/
if(method.indexOf(',') >= 0 || supportedMethods.indexOf(',' + method + ',') < 0) {
    return failWithoutRequest(cb, new Error('Unsupported method ' + method));
}
outputBinary = options.outputType === 'bytearray';
if(!options.outputType || options.outputType === 'text' || outputBinary) {
    outputConverter = pass;
} else if(converters['text ' + options.outputType]) {
    outputConverter = converters['text ' + options.outputType];
    outputBinary = false;
} else if(converters['bytearray ' + options.outputType]) {
    outputConverter = converters['bytearray ' + options.outputType];
    outputBinary = true;
} else {
    return failWithoutRequest(cb, new Error('Unsupported outputType ' + options.outputType));
}
inputConverter = pass;
if('input' in options) {
    input = options.input;
    if(!options.inputType || options.inputType === 'auto') {
        if(typeof input !== 'string' && !isByteArray(input)) {
            return failWithoutRequest(cb, new Error('inputType is undefined or auto and input is neither string, nor ' + bytearrayMessage));
        }
    } else if(options.inputType === 'text') {
        if(typeof input !== 'string') {
            return failWithoutRequest(cb, new Error('inputType is text, but input is not a string'));
        }
    } else if (options.inputType === 'bytearray') {
        if(!isByteArray(input)) {
            return failWithoutRequest(cb, new Error('inputType is bytearray, but input is neither ' + bytearrayMessage));
        }
    } else if(converters[options.inputType + ' text']) {
        inputConverter = converters[options.inputType + ' text'];
    } else if(converters[options.inputType + ' bytearray']) {
        inputConverter = converters[options.inputType + ' bytearray'];
    } else {
        return failWithoutRequest(cb, new Error('There is no converter for specified inputType'));
    }
    if(typeof input === 'object') {
        if(global.ArrayBuffer && input instanceof ArrayBuffer) {
            input = new Uint8Array(input);
        } else if(isArrayBufferView(input)) {
            input = new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
        }
    }
    try {
        input = inputConverter(input);
    } catch(err) {
        return failWithoutRequest(cb, err);
    }
} else {
    if(options.inputType) {
        return failWithoutRequest(cb, new Error('"input" is undefined, but inputType is defined'));
    }
    if(inputHeaders['Content-Type']) {
        return failWithoutRequest(cb, new Error('"input" is undefined, but Content-Type request header is defined'));
    }
}

/*************** COMMON initialize helper variables **************/
var downloaded;
initDownload = function(total) {
    if(typeof outputLength === 'undefined') {
        downloadProgressCb(downloaded, outputLength = total);
    }
};
updateDownload = function(value) {
    if(value !== downloaded) {
        downloadProgressCb(downloaded = value, outputLength);
    }
};
noData = function() {
    initDownload(0);
    if(cb) {
        cb(null, _undefined, status, outputHeaders);
        cb = null;
    }
};
;
    /*************** initialize helper variables **************/
    try {
        validateInputHeaders(inputHeaders);
    } catch(err) {
        return failWithoutRequest(cb, err);
    }
    inputHeaders = copy(inputHeaders, {});
    inputHeaders['Accept-Encoding'] = 'gzip, deflate, identity';

    var ignorantlyConsume = function(res) {
        res.on('data', pass);
        res.on('end', pass);
    };
    uri = url.parse(uri);
    if(timeout > 0) {
        setTimeout(function() {
            cb(new Error('Timeout of ' + timeout + 'ms exceeded'));
            cb = null;
        }, timeout);
    }
    var req = http.request({
        hostname: uri.hostname,
        port: Number(uri.port),
        path: uri.path,
        method: method,
        headers: inputHeaders
    }, function(res) {
        var contentEncoding;
        if(cb === null) {
            ignorantlyConsume(res);
            return;
        }

        outputHeaders = res.headers;
        if('content-encoding' in outputHeaders) {
            contentEncoding = outputHeaders['content-encoding'];
            delete outputHeaders['content-encoding'];
        } else {
            contentEncoding = 'identity';
        }

        status = res.statusCode;

        uploadProgressCb(inputLength, inputLength);
        if(cb === null) {
            ignorantlyConsume(res);
            return;
        }

        statusCb(status, outputHeaders);
        if(cb === null) {
            ignorantlyConsume(res);
            return;
        }

        updateDownload(0);
        if(cb === null) {
            ignorantlyConsume(res);
            return;
        }
        if(typeof outputHeaders['content-length'] !== 'undefined') {
            initDownload(Number(outputHeaders['content-length']));
            if(cb === null) {
                ignorantlyConsume(res);
                return;
            }
        }
        if(method === 'HEAD' || typeof outputHeaders['content-type'] === 'undefined') {
            ignorantlyConsume(res);
            return noData();
        }

        var output = [], downloaded = 0;
        res.on('data', function(chunk) {
            if(cb === null) {
                return;
            }
            downloaded += chunk.length;
            output.push(chunk);
            updateDownload(downloaded);
            if(cb === null) {
                return;
            }
        });
        res.on('end', function() {
            if(cb === null) {
                return;
            }
            updateDownload(downloaded);
            if(cb === null) {
                return;
            }

            if(typeof outputLength === 'undefined') {
                outputLength = downloaded;
            }

            decompress(Buffer.concat(output, downloaded), contentEncoding, function(err, output) {
                if(!cb) {
                    return;
                }
                if(err) {
                    cb(err);
                    cb = null;
                    return;
                }
                if(!outputBinary) {
                    output = output.toString('utf8');
                }
                try {
                    cb(null, outputConverter(output), status, outputHeaders);
                } catch(err) {
                    cb(err);
                }
                cb = null;
            });
        });
    });

    nextTick(function() {
        if(cb === null) {
            return;
        }
        uploadProgressCb(0, inputLength);
    });
    if(typeof input !== 'undefined') {
        input = new Buffer(input);
        inputLength = input.length;
        req.write(input);
    }
    req.on('error', function(e) {
        if(cb === null) {
            return;
        }
        cb(e);
        cb = null;
    });
    req.end();
    promise = function() {
        if(cb === null) {
            return;
        }

        // these statements are in case "abort" is called in "finished" callback
        var _cb = cb;
        cb = null;
        _cb(new Error('abort'));
    };
    return mixInPromise(promise);
};
httpinvoke.corsResponseContentTypeOnly = false;
httpinvoke.corsRequestHeaders = true;
httpinvoke.corsCredentials = true;
httpinvoke.cors = true;
httpinvoke.corsDELETE = true;
httpinvoke.corsHEAD = true;
httpinvoke.corsPATCH = true;
httpinvoke.corsPUT = true;
httpinvoke.corsStatus = true;
httpinvoke.corsResponseTextOnly = false;
httpinvoke.requestTextOnly = false;

module.exports = httpinvoke;
;
} else {
;(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define(factory);
    } else if (typeof exports === 'object') {
        module.exports = factory();
    } else {
        root.httpinvoke = factory();
  }
}(this, function () {
    var global;
    ;global = window;;var isArrayBufferView = function(input) {
    return typeof input === 'object' && input !== null && (
        (global.ArrayBufferView && input instanceof ArrayBufferView) ||
        (global.Int8Array && input instanceof Int8Array) ||
        (global.Uint8Array && input instanceof Uint8Array) ||
        (global.Uint8ClampedArray && input instanceof Uint8ClampedArray) ||
        (global.Int16Array && input instanceof Int16Array) ||
        (global.Uint16Array && input instanceof Uint16Array) ||
        (global.Int32Array && input instanceof Int32Array) ||
        (global.Uint32Array && input instanceof Uint32Array) ||
        (global.Float32Array && input instanceof Float32Array) ||
        (global.Float64Array && input instanceof Float64Array)
    );
}, isArray = function(object) {
    return Object.prototype.toString.call(object) === '[object Array]';
}, isByteArray = function(input) {
    return typeof input === 'object' && input !== null && (
        (global.Buffer && input instanceof Buffer) ||
        (global.Blob && input instanceof Blob) ||
        (global.File && input instanceof File) ||
        (global.ArrayBuffer && input instanceof ArrayBuffer) ||
        isArrayBufferView(input) ||
        isArray(input)
    );
}, bytearrayMessage = 'an instance of Buffer, nor Blob, nor File, nor ArrayBuffer, nor ArrayBufferView, nor Int8Array, nor Uint8Array, nor Uint8ClampedArray, nor Int16Array, nor Uint16Array, nor Int32Array, nor Uint32Array, nor Float32Array, nor Float64Array, nor Array', supportedMethods = ',GET,HEAD,PATCH,POST,PUT,DELETE,', pass = function(value) {
    return value;
}, nextTick = (global.process && global.process.nextTick) || global.setImmediate || global.setTimeout, _undefined;
;
    // this could be a simple map, but with this "compression" we save about 100 bytes, if minified (50 bytes, if also gzipped)
    var statusTextToCode = (function() {
        for(var group = arguments.length, map = {};group--;) {
            for(var texts = arguments[group].split(','), index = texts.length;index--;) {
                map[texts[index]] = (group + 1) * 100 + index;
            }
        }
        return map;
    })(
        'Continue,Switching Protocols',
        'OK,Created,Accepted,Non-Authoritative Information,No Content,Reset Content,Partial Content',
        'Multiple Choices,Moved Permanently,Found,See Other,Not Modified,Use Proxy,_,Temporary Redirect',
        'Bad Request,Unauthorized,Payment Required,Forbidden,Not Found,Method Not Allowed,Not Acceptable,Proxy Authentication Required,Request Timeout,Conflict,Gone,Length Required,Precondition Failed,Request Entity Too Large,Request-URI Too Long,Unsupported Media Type,Requested Range Not Satisfiable,Expectation Failed',
        'Internal Server Error,Not Implemented,Bad Gateway,Service Unavailable,Gateway Time-out,HTTP Version Not Supported'
    );
    var bufferSlice = function(buffer, begin, end) {
        if(begin === 0 && end === buffer.byteLength) {
            return buffer;
        }
        return buffer.slice ? buffer.slice(begin, end) : new Uint8Array(Array.prototype.slice.call(new Uint8Array(buffer), begin, end)).buffer;
    };
    var responseBodyToBytes, responseBodyLength;
    try {
        execScript('Function httpinvoke0(B,A)\r\nDim i\r\nFor i=1 to LenB(B)\r\nA.push(AscB(MidB(B,i,1)))\r\nNext\r\nEnd Function\r\nFunction httpinvoke1(B)\r\nhttpinvoke1=LenB(B)\r\nEnd Function', 'vbscript');
        responseBodyToBytes = function(binary) {
            var bytes = [];
            httpinvoke0(binary, bytes);
            return bytes;
        };
        // cannot just assign the function, because httpinvoke1 is not a javascript 'function'
        responseBodyLength = function(binary) {
            return httpinvoke1(binary);
        };
    } catch(err) {
    }
    var getOutputText = function(xhr) {
        return xhr.response || xhr.responseText;
    };
    var binaryStringToByteArray = function(str) {
        for(var n = str.length, bytearray = new Array(n);n--;) {
            bytearray[n] = str.charCodeAt(n) & 255;
        }
        return bytearray;
    };
    var getOutputBinary = function(xhr) {
        if('response' in xhr) {
            return new Uint8Array(xhr.response || []);
        }
        // responseBody must be checked this way, because otherwise
        // it is falsy and then accessing responseText for binary data
        // results in the "c00ce514" error
        if('responseBody' in xhr) {
            return responseBodyToBytes(xhr.responseBody);
        }
        var bytearray = binaryStringToByteArray(xhr.responseText);
        // firefox 4 supports typed arrays but not xhr2
        return global.Uint8Array ? new global.Uint8Array(bytearray) : bytearray;
    };
    var getOutputLengthText = function(xhr) {
        return countStringBytes(getOutputText(xhr));
    };
    var getOutputLengthBinary = function(xhr) {
        if('response' in xhr) {
            return xhr.response ? xhr.response.byteLength : 0;
        }
        // responseBody must be checked this way, because otherwise
        // it is falsy and then accessing responseText for binary data
        // results in the "c00ce514" error
        if('responseBody' in xhr) {
            return responseBodyLength(xhr.responseBody);
        }
        return xhr.responseText.length;
    };

    var countStringBytes = function(string) {
        for(var c, n = 0, i = string.length;i--;) {
            c = string.charCodeAt(i);
            n += c < 128 ? 1 : (c < 2048 ? 2 : 3);
        }
        return n;
    };

    var fillOutputHeaders = function(xhr, outputHeaders) {
        var headers = xhr.getAllResponseHeaders().split(/\r?\n/);
        var atLeastOne = false;
        for(var i = headers.length, colon, header; i--;) {
            if((colon = headers[i].indexOf(':')) >= 0) {
                outputHeaders[headers[i].substr(0, colon).toLowerCase()] = headers[i].substr(colon + 2);
                atLeastOne = true;
            }
        }
        return atLeastOne;
    };

    var urlPartitioningRegExp = /^([\w.+-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/;
    var isCrossDomain = function(location, uri) {
        uri = urlPartitioningRegExp.exec(uri.toLowerCase());
        location = urlPartitioningRegExp.exec(location.toLowerCase()) || [];
        return !!(uri && (uri[1] !== location[1] || uri[2] !== location[2] || (uri[3] || (uri[1] === 'http:' ? '80' : '443')) !== (location[3] || (location[1] === 'http:' ? '80' : '443'))));
    };
    var createXHR;
    var httpinvoke = function(uri, method, options, cb) {
        ;var mixInPromise, promise, failWithoutRequest, uploadProgressCb, inputLength, noData, timeout, inputHeaders, statusCb, initDownload, updateDownload, outputHeaders, exposedHeaders, status, outputBinary, input, outputLength, outputConverter;
/*************** COMMON initialize parameters **************/
if(!method) {
    // 1 argument
    // method, options, cb skipped
    method = 'GET';
    options = {};
} else if(!options) {
    // 2 arguments
    if(typeof method === 'string') {
        // options. cb skipped
        options = {};
    } else if(typeof method === 'object') {
        // method, cb skipped
        options = method;
        method = 'GET';
    } else {
        // method, options skipped
        options = {
            finished: method
        };
        method = 'GET';
    }
} else if(!cb) {
    // 3 arguments
    if(typeof method === 'object') {
        // method skipped
        method.finished = options;
        options = method;
        method = 'GET';
    } else if(typeof options === 'function') {
        // options skipped
        options = {
            finished: options
        };
    }
    // cb skipped
} else {
    // 4 arguments
    options.finished = cb;
}
var safeCallback = function(name, aspect) {
    if(name in options) {
        return function(a, b, c, d) {
            try {
                options[name](a, b, c, d);
            } catch(_) {
            }
            aspect(a, b, c, d);
        };
    }
    return aspect;
};
var chain = function(a, b) {
    a && a.then && a.then(function() {
        b[resolve].apply(null, arguments);
    }, function() {
        b[reject].apply(null, arguments);
    }, function() {
        b[progress].apply(null, arguments);
    });
};
var resolve = 0, reject = 1, progress = 2;
mixInPromise = function(o) {
    var value, queue = [], state = progress;
    var makeState = function(newstate) {
        o[newstate] = function(newvalue) {
            var i, p;
            if(queue) {
                value = newvalue;
                state = newstate;

                for(i = 0; i < queue.length; i++) {
                    if(typeof queue[i][state] === 'function') {
                        try {
                            p = queue[i][state].call(null, value);
                            if(state < progress) {
                                chain(p, queue[i]._);
                            }
                        } catch(err) {
                            queue[i]._[reject](err);
                        }
                    } else if(state < progress) {
                        queue[i]._[state](value);
                    }
                }
                if(state < progress) {
                    queue = null;
                }
            }
        };
    };
    makeState(progress);
    makeState(resolve);
    makeState(reject);
    o.then = function() {
        var item = [].slice.call(arguments);
        item._ = mixInPromise({});
        if(queue) {
            queue.push(item);
        } else if(typeof item[state] === 'function') {
            nextTick(function() {
                chain(item[state](value), item._);
            });
        }
        return item._;
    };
    return o;
};
failWithoutRequest = function(cb, err) {
    nextTick(function() {
        if(cb === null) {
            return;
        }
        cb(err);
    });
    promise = function() {
    };
    return mixInPromise(promise);
};

uploadProgressCb = safeCallback('uploading', function(current, total) {
    promise[progress]({
        type: 'upload',
        current: current,
        total: total
    });
});
var downloadProgressCb = safeCallback('downloading', function(current, total) {
    promise[progress]({
        type: 'download',
        current: current,
        total: total
    });
});
statusCb = safeCallback('gotStatus', function(statusCode, headers) {
    promise[progress]({
        type: 'headers',
        statusCode: statusCode,
        headers: headers
    });
});
cb = safeCallback('finished', function(err, body, statusCode, headers) {
    if(err) {
        return promise[reject](err);
    }
    promise[resolve]({
        body: body,
        statusCode: statusCode,
        headers: headers
    });
});
timeout = options.timeout || 0;
var converters = options.converters || {};
var inputConverter;
inputLength = 0;
inputHeaders = options.headers || {};
outputHeaders = {};
exposedHeaders = options.corsExposedHeaders || [];
exposedHeaders.push.apply(exposedHeaders, ['Cache-Control', 'Content-Language', 'Content-Type', 'Content-Length', 'Expires', 'Last-Modified', 'Pragma', 'Content-Range']);
/*************** COMMON convert and validate parameters **************/
if(method.indexOf(',') >= 0 || supportedMethods.indexOf(',' + method + ',') < 0) {
    return failWithoutRequest(cb, new Error('Unsupported method ' + method));
}
outputBinary = options.outputType === 'bytearray';
if(!options.outputType || options.outputType === 'text' || outputBinary) {
    outputConverter = pass;
} else if(converters['text ' + options.outputType]) {
    outputConverter = converters['text ' + options.outputType];
    outputBinary = false;
} else if(converters['bytearray ' + options.outputType]) {
    outputConverter = converters['bytearray ' + options.outputType];
    outputBinary = true;
} else {
    return failWithoutRequest(cb, new Error('Unsupported outputType ' + options.outputType));
}
inputConverter = pass;
if('input' in options) {
    input = options.input;
    if(!options.inputType || options.inputType === 'auto') {
        if(typeof input !== 'string' && !isByteArray(input)) {
            return failWithoutRequest(cb, new Error('inputType is undefined or auto and input is neither string, nor ' + bytearrayMessage));
        }
    } else if(options.inputType === 'text') {
        if(typeof input !== 'string') {
            return failWithoutRequest(cb, new Error('inputType is text, but input is not a string'));
        }
    } else if (options.inputType === 'bytearray') {
        if(!isByteArray(input)) {
            return failWithoutRequest(cb, new Error('inputType is bytearray, but input is neither ' + bytearrayMessage));
        }
    } else if(converters[options.inputType + ' text']) {
        inputConverter = converters[options.inputType + ' text'];
    } else if(converters[options.inputType + ' bytearray']) {
        inputConverter = converters[options.inputType + ' bytearray'];
    } else {
        return failWithoutRequest(cb, new Error('There is no converter for specified inputType'));
    }
    if(typeof input === 'object') {
        if(global.ArrayBuffer && input instanceof ArrayBuffer) {
            input = new Uint8Array(input);
        } else if(isArrayBufferView(input)) {
            input = new Uint8Array(input.buffer, input.byteOffset, input.byteLength);
        }
    }
    try {
        input = inputConverter(input);
    } catch(err) {
        return failWithoutRequest(cb, err);
    }
} else {
    if(options.inputType) {
        return failWithoutRequest(cb, new Error('"input" is undefined, but inputType is defined'));
    }
    if(inputHeaders['Content-Type']) {
        return failWithoutRequest(cb, new Error('"input" is undefined, but Content-Type request header is defined'));
    }
}

/*************** COMMON initialize helper variables **************/
var downloaded;
initDownload = function(total) {
    if(typeof outputLength === 'undefined') {
        downloadProgressCb(downloaded, outputLength = total);
    }
};
updateDownload = function(value) {
    if(value !== downloaded) {
        downloadProgressCb(downloaded = value, outputLength);
    }
};
noData = function() {
    initDownload(0);
    if(cb) {
        cb(null, _undefined, status, outputHeaders);
        cb = null;
    }
};
;
        /*************** initialize helper variables **************/
        var xhr, i, j, currentLocation, crossDomain, output,
            getOutput = outputBinary ? getOutputBinary : getOutputText,
            getOutputLength = outputBinary ? getOutputLengthBinary : getOutputLengthText,
            uploadProgressCbCalled = false;
        var uploadProgress = function(uploaded) {
            if(!uploadProgressCb) {
                return;
            }
            if(!uploadProgressCbCalled) {
                uploadProgressCbCalled = true;
                uploadProgressCb(0, inputLength);
                if(!cb) {
                    return;
                }
            }
            uploadProgressCb(uploaded, inputLength);
            if(uploaded === inputLength) {
                uploadProgressCb = null;
            }
        };
        try {
            // IE may throw an exception when accessing
            // a field from location if document.domain has been set
            currentLocation = location.href;
        } catch(_) {
            // Use the href attribute of an A element
            // since IE will modify it given document.location
            currentLocation = document.createElement('a');
            currentLocation.href = '';
            currentLocation = currentLocation.href;
        }
        crossDomain = isCrossDomain(currentLocation, uri);
        /*************** start XHR **************/
        if(typeof input === 'object' && httpinvoke.requestTextOnly) {
            return failWithoutRequest(cb, new Error('bytearray inputType is not supported on this platform, please always test using requestTextOnly feature flag'));
        }
        if(crossDomain && !httpinvoke.cors) {
            return failWithoutRequest(cb, new Error('Cross-origin requests are not supported'));
        }
        for(j = ['DELETE', 'PATCH', 'PUT', 'HEAD'], i = j.length;i-- > 0;) {
            if(crossDomain && method === j[i] && !httpinvoke['cors' + j[i]]) {
                return failWithoutRequest(cb, new Error(j[i] + ' method in cross-origin requests is not supported in this browser'));
            }
        }
        if(!createXHR) {
            return failWithoutRequest(cb, new Error('unable to construct XMLHttpRequest object'));
        }
        xhr = createXHR(crossDomain);
        xhr.open(method, uri, true);
        if(timeout > 0) {
            if('timeout' in xhr) {
                xhr.timeout = timeout;
            } else {
                setTimeout(function() {
                    cb(new Error('download timeout'));
                    cb = null;
                }, timeout);
            }
        }
        if(options.corsCredentials && httpinvoke.corsCredentials && typeof xhr.withCredentials === 'boolean') {
            xhr.withCredentials = true;
        }
        if(crossDomain && options.corsOriginHeader) {
            // on some Android devices CORS implementations are buggy
            // that is why there needs to be two workarounds:
            // 1. custom header with origin has to be passed, because they do not send Origin header on the actual request
            // 2. caching must be avoided, because of unknown reasons
            // read more: http://www.kinvey.com/blog/107/how-to-build-a-service-that-supports-every-android-browser

            // workaraound for #1: sending origin in custom header, also see the server-side part of the workaround in dummyserver.js
            inputHeaders[options.corsOriginHeader] = location.protocol + '//' + location.host;
        }

        /*************** bind XHR event listeners **************/
        var makeErrorCb = function(message) {
            return function() {
                // must check, because some callbacks are called synchronously, thus throwing exceptions and breaking code
                if(cb) {
                    cb(new Error(message));
                    cb = null;
                }
            };
        };
        var onuploadprogress = function(progressEvent) {
            if(cb && progressEvent.lengthComputable) {
                uploadProgress(progressEvent.loaded);
            }
        };
        if('upload' in xhr) {
            xhr.upload.ontimeout = makeErrorCb('upload timeout');
            xhr.upload.onerror = makeErrorCb('upload error');
            xhr.upload.onprogress = onuploadprogress;
        } else if('onuploadprogress' in xhr) {
            xhr.onuploadprogress = onuploadprogress;
        }

        if('ontimeout' in xhr) {
            xhr.ontimeout = makeErrorCb('download timeout');
        }
        if('onerror' in xhr) {
            xhr.onerror = function() {
                //inspect('onerror', arguments[0]);
                //dbg('onerror');
                // For 4XX and 5XX response codes Firefox 3.6 cross-origin request ends up here, but has correct statusText, but no status and headers
                onLoad();
            };
        }
        if('onloadstart' in xhr) {
            xhr.onloadstart = function() {
                //dbg('onloadstart');
                onHeadersReceived(false);
            };
        }
        if('onloadend' in xhr) {
            xhr.onloadend = function() {
                //dbg('onloadend');
                onHeadersReceived(false);
            };
        }
        if('onprogress' in xhr) {
            xhr.onprogress = function(progressEvent) {
                //dbg('onprogress');
                if(!cb) {
                    return;
                }
                onHeadersReceived(false);
                if(statusCb) {
                    return;
                }
                // There is a bug in Chrome 10 on 206 response with Content-Range=0-4/12 - total must be 5
                // 'total', 12, 'totalSize', 12, 'loaded', 5, 'position', 5, 'lengthComputable', true, 'status', 206
                // console.log('total', progressEvent.total, 'totalSize', progressEvent.totalSize, 'loaded', progressEvent.loaded, 'position', progressEvent.position, 'lengthComputable', progressEvent.lengthComputable, 'status', status);
                // httpinvoke does not work around this bug, because Chrome 10 is practically not used at all, as Chrome agressively auto-updates itself to latest version
                var total = progressEvent.total || progressEvent.totalSize || 0,
                    current = progressEvent.loaded || progressEvent.position || 0;
                if(progressEvent.lengthComputable) {
                    initDownload(total);
                }
                if(!cb) {
                    return;
                }
                if(current > total) {
                    // Opera 12 progress events has a bug - .loaded can be higher than .total
                    // see http://dev.opera.com/articles/view/xhr2/#comment-96081222
                    return;
                }
                updateDownload(current);
            };
        }
        /*
        var inspect = function(name, obj) {
            return;
            console.log('INSPECT ----- ', name, uri);
            for(var i in obj) {
                try {
                    console.log(name, 'PASS', i, typeof obj[i], typeof obj[i] === 'function' ? '[code]' : obj[i]);
                } catch(_) {
                    console.log(name, 'FAIL', i);
                }
            }
        };
        var dbg = function(name) {
            console.log('DBG ----- ', name, uri);
            inspect('xhr', xhr);
            try {
                console.log('PASS', 'headers', xhr.getAllResponseHeaders());
            } catch(_) {
                console.log('FAIL', 'headers');
            }
            try {
                console.log('PASS', 'cache-control', xhr.getResponseHeader('Cache-Control'));
            } catch(_) {
                console.log('FAIL', 'cache-control');
            }
        };
        */
        var received = {
            success: false,
            status: false,
            entity: false,
            headers: false
        };
        var onHeadersReceived = function(lastTry) {
            if(!cb) {
                return;
            }

            try {
                if(xhr.status) {
                    received.status = true;
                }
            } catch(_) {
            }
            try {
                if(xhr.statusText) {
                    received.status = true;
                }
            } catch(_) {
            }
            try {
                if(xhr.responseText) {
                    received.entity = true;
                }
            } catch(_) {
            }
            try {
                if(xhr.response) {
                    received.entity = true;
                }
            } catch(_) {
            }

            if(!statusCb) {
                return;
            }

            if(received.status || received.entity || received.success || lastTry) {
                if(typeof xhr.contentType === 'string') {
                    if(xhr.contentType !== 'text/html' || xhr.responseText !== '') {
                        // When no entity body and/or no Content-Type header is sent,
                        // XDomainRequest on IE-8 defaults to text/html xhr.contentType.
                        // Also, empty string is not a valid 'text/html' entity.
                        outputHeaders['content-type'] = xhr.contentType;
                        received.headers = true;
                    }
                }
                for(var i = 0; i < exposedHeaders.length; i += 1) {
                    var header;
                    try {
                        if(header = xhr.getResponseHeader(exposedHeaders[i])) {
                            outputHeaders[exposedHeaders[i].toLowerCase()] = header;
                            received.headers = true;
                        }
                    } catch(err) {
                    }
                }
                try {
                    // note - on Opera 11.10 and 11.50 calling getAllResponseHeaders may introduce side effects on xhr and responses will timeout when server responds with some HTTP status codes
                    if(fillOutputHeaders(xhr, outputHeaders)) {
                        received.headers = true;
                    }
                } catch(err) {
                }

                if(!status && (!crossDomain || httpinvoke.corsStatus)) {
                    // Sometimes on IE 9 accessing .status throws an error, but .statusText does not.
                    try {
                        if(xhr.status) {
                            status = xhr.status;
                        }
                    } catch(_) {
                    }
                    if(!status) {
                        try {
                            status = statusTextToCode[xhr.statusText];
                        } catch(_) {
                        }
                    }
                    // sometimes IE returns 1223 when it should be 204
                    if(status === 1223) {
                        status = 204;
                    }
                }
            }

            if(!lastTry && !(received.status && received.headers)) {
                return;
            }

            uploadProgress(inputLength);
            if(!cb) {
                return;
            }

            statusCb(status, outputHeaders);
            statusCb = null;
            if(!cb) {
                return;
            }

            if(method === 'HEAD') {
                return noData();
            }

            updateDownload(0);
            if(!cb) {
                return;
            }

            if('content-length' in outputHeaders && (!crossDomain || 'content-encoding' in outputHeaders) && (!outputHeaders['content-encoding'] || outputHeaders['content-encoding'] === 'identity')) {
                initDownload(Number(outputHeaders['content-length']));
                if(!cb) {
                    return;
                }
            }
        };
        var onLoad = function() {
            if(!cb) {
                return;
            }

            onHeadersReceived(true);
            if(!cb) {
                return;
            }

            if(!received.success && !status) {
                // 'finished in onerror and status code is undefined'
                cb(new Error('download error'));
                cb = null;
                return;
            }

            var length;
            try {
                length = getOutputLength(xhr);
            } catch(_) {
                return noData();
            }
            if(!outputLength) {
                initDownload(length);
            } else if(length !== outputLength) {
                // 'output length ' + outputLength + ' is not equal to actually received entity length ' + length
                cb(new Error('download error'));
                cb = null;
            }
            if(!cb) {
                return;
            }

            updateDownload(outputLength);
            if(!cb) {
                return;
            }

            try {
                cb(null, !received.entity && outputLength === 0 && typeof outputHeaders['content-type'] === 'undefined' ? _undefined : outputConverter(getOutput(xhr)), status, outputHeaders);
            } catch(err) {
                cb(err);
            }
            cb = null;
        };
        var onloadBound = false;
        if(typeof xhr.onload !== 'undefined') {
            onloadBound = true;
            xhr.onload = function() {
                received.success = true;
                //dbg('onload');
                onLoad();
            };
        }
        if(typeof xhr.onreadystatechange !== 'undefined') {
            xhr.onreadystatechange = function() {
                //dbg('onreadystatechange ' + xhr.readyState);
                if(xhr.readyState === 2) {
                    // HEADERS_RECEIVED
                    onHeadersReceived(false);
                } else if(xhr.readyState === 3) {
                    // LOADING
                    received.success = true;
                    onHeadersReceived(false);
                    if(statusCb) {
                        return;
                    }
                    try {
                        updateDownload(getOutputLength(xhr));
                    } catch(err) {
                    }
                // Instead of 'typeof xhr.onload === "undefined"', we must use
                // onloadBound variable, because otherwise Firefox 3.5 synchronously
                // throws a "Permission denied for <> to create wrapper for
                // object of class UnnamedClass" error
                } else if(xhr.readyState === 4 && !onloadBound) {
                    // DONE
                    onLoad();
                }
            };
        }

        /*************** set XHR request headers **************/
        if(!crossDomain || httpinvoke.corsRequestHeaders) {
            for(var inputHeaderName in inputHeaders) {
                if(inputHeaders.hasOwnProperty(inputHeaderName)) {
                    try {
                        xhr.setRequestHeader(inputHeaderName, inputHeaders[inputHeaderName]);
                    } catch(err) {
                        return failWithoutRequest(cb, err);
                    }
                }
            }
        }
        /*************** invoke XHR request process **************/
        nextTick(function() {
            if(!cb) {
                return;
            }
            if('response' in xhr) {
                try {
                    xhr.responseType = outputBinary ? 'arraybuffer' : 'text';
                } catch(err) {
                }
            } else {
                try {
                    // mime type override must be done before receiving headers - at least for Safari 5.0.4
                    if(outputBinary) {
                        xhr.overrideMimeType('text/plain; charset=x-user-defined');
                    }
                } catch(err) {
                }
            }
            if(typeof input === 'object') {
                var triedSendArrayBufferView = false;
                var triedSendBlob = false;
                var triedSendBinaryString = false;

                var BlobBuilder = global.BlobBuilder || global.WebKitBlobBuilder || global.MozBlobBuilder || global.MSBlobBuilder;
                if(isArray(input)) {
                    input = global.Uint8Array ? new Uint8Array(input) : String.fromCharCode.apply(String, input);
                }
                var toBlob = BlobBuilder ? function() {
                    var bb = new BlobBuilder();
                    bb.append(input);
                    input = bb.getBlob(inputHeaders['Content-Type'] || 'application/octet-stream');
                } : function() {
                    try {
                        input = new Blob([input], {
                            type: inputHeaders['Content-Type'] || 'application/octet-stream'
                        });
                    } catch(_) {
                        triedSendBlob = true;
                    }
                };
                var go = function() {
                    var reader;
                    if(triedSendBlob && triedSendArrayBufferView && triedSendBinaryString) {
                        return failWithoutRequest(cb, new Error('Unable to send'));
                    }
                    if(isArrayBufferView(input)) {
                        if(triedSendArrayBufferView) {
                            if(!triedSendBinaryString) {
                                try {
                                    input = String.fromCharCode.apply(String, input);
                                } catch(_) {
                                    triedSendBinaryString = true;
                                }
                            } else if(!triedSendBlob) {
                                toBlob();
                            }
                        } else {
                            try {
                                inputLength = input.byteLength;
                                // if there is ArrayBufferView, then the browser supports sending instances of subclasses of ArayBufferView, otherwise we must send an ArrayBuffer
                                xhr.send(global.ArrayBufferView ? input : bufferSlice(input.buffer, input.byteOffset, input.byteOffset + input.byteLength));
                                return;
                            } catch(_) {
                                triedSendArrayBufferView = true;
                            }
                        }
                    } else if(global.Blob && input instanceof Blob) {
                        if(triedSendBlob) {
                            if(!triedSendArrayBufferView) {
                                try {
                                    reader = new FileReader();
                                    reader.onerror = function() {
                                        triedSendArrayBufferView = true;
                                        go();
                                    };
                                    reader.onload = function() {
                                        try {
                                            input = new Uint8Array(reader.result);
                                        } catch(_) {
                                            triedSendArrayBufferView = true;
                                        }
                                        go();
                                    };
                                    reader.readAsArrayBuffer(input);
                                    return;
                                } catch(_) {
                                    triedSendArrayBufferView = true;
                                }
                            } else if(!triedSendBinaryString) {
                                try {
                                    reader = new FileReader();
                                    reader.onerror = function() {
                                        triedSendBinaryString = true;
                                        go();
                                    };
                                    reader.onload = function() {
                                        input = reader.result;
                                        go();
                                    };
                                    reader.readAsBinaryString(input);
                                    return;
                                } catch(_) {
                                    triedSendBinaryString = true;
                                }
                            }
                        } else {
                            try {
                                inputLength = input.size;
                                xhr.send(input);
                                return;
                            } catch(_) {
                                triedSendBlob = true;
                            }
                        }
                    } else {
                        if(triedSendBinaryString) {
                            if(!triedSendArrayBufferView) {
                                try {
                                    input = binaryStringToByteArray(input);
                                } catch(_) {
                                    triedSendArrayBufferView = true;
                                }
                            } else if(!triedSendBlob) {
                                toBlob();
                            }
                        } else {
                            try {
                                inputLength = input.length;
                                xhr.sendAsBinary(input);
                                return;
                            } catch(_) {
                                triedSendBinaryString = true;
                            }
                        }
                    }
                    nextTick(go);
                };
                go();
            } else {
                try {
                    if(typeof input === 'string') {
                        inputLength = countStringBytes(input);
                        xhr.send(input);
                    } else {
                        xhr.send(null);
                    }
                } catch(err) {
                    var _cb = cb;
                    cb = null;
                    return failWithoutRequest(cb, new Error('Unable to send'));
                }
            }
            uploadProgress(0);
        });

        /*************** return "abort" function **************/
        promise = function() {
            if(!cb) {
                return;
            }

            // these statements are in case "abort" is called in "finished" callback
            var _cb = cb;
            cb = null;
            _cb(new Error('abort'));

            try {
                xhr.abort();
            } catch(err){
            }
        };
        return mixInPromise(promise);
    };
    httpinvoke.corsResponseContentTypeOnly = false;
    httpinvoke.corsRequestHeaders = false;
    httpinvoke.corsCredentials = false;
    httpinvoke.cors = false;
    httpinvoke.corsDELETE = false;
    httpinvoke.corsHEAD = false;
    httpinvoke.corsPATCH = false;
    httpinvoke.corsPUT = false;
    httpinvoke.corsStatus = false;
    httpinvoke.corsResponseTextOnly = false;
    httpinvoke.requestTextOnly = false;
    (function() {
        try {
            createXHR = function() {
                return new XMLHttpRequest();
            };
            var tmpxhr = createXHR();
            httpinvoke.requestTextOnly = typeof Uint8Array === 'undefined' && typeof tmpxhr.sendAsBinary === 'undefined';
            httpinvoke.cors = 'withCredentials' in tmpxhr;
            if(httpinvoke.cors) {
                httpinvoke.corsRequestHeaders = true;
                httpinvoke.corsCredentials = true;
                httpinvoke.corsDELETE = true;
                httpinvoke.corsPATCH = true;
                httpinvoke.corsPUT = true;
                httpinvoke.corsHEAD = true;
                httpinvoke.corsStatus = true;
                return;
            }
        } catch(err) {
        }
        try {
            if(typeof XDomainRequest === 'undefined') {
                createXHR = function() {
                    return new XMLHttpRequest();
                };
                createXHR();
            } else {
                createXHR = function(cors) {
                    return cors ? new XDomainRequest() : new XMLHttpRequest();
                };
                createXHR(true);
                httpinvoke.cors = true;
                httpinvoke.corsResponseContentTypeOnly = true;
                httpinvoke.corsResponseTextOnly = true;
            }
            return;
        } catch(err) {
        }
        try {
            createXHR();
            return;
        } catch(err) {
        }
        var candidates = ['Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.6.0', 'Msxml2.XMLHTTP.3.0', 'Msxml2.XMLHTTP'];
        for(var i = candidates.length; i--;) {
            try {
                createXHR = function() {
                    return new ActiveXObject(candidates[i]);
                };
                createXHR();
                httpinvoke.requestTextOnly = true;
                return;
            } catch(err) {
            }
            i -= 1;
        }
        createXHR = _undefined;
    })();

    return httpinvoke;
}));
;
}

},{}],37:[function(require,module,exports){
'use strict'

var nextTick = require('./lib/next-tick')

module.exports = Promise
function Promise(fn) {
  if (!(this instanceof Promise)) return new Promise(fn)
  if (typeof fn !== 'function') throw new TypeError('not a function')
  var state = null
  var delegating = false
  var value = null
  var deferreds = []
  var self = this

  this.then = function(onFulfilled, onRejected) {
    return new Promise(function(resolve, reject) {
      handle(new Handler(onFulfilled, onRejected, resolve, reject))
    })
  }

  function handle(deferred) {
    if (state === null) {
      deferreds.push(deferred)
      return
    }
    nextTick(function() {
      var cb = state ? deferred.onFulfilled : deferred.onRejected
      if (cb === null) {
        (state ? deferred.resolve : deferred.reject)(value)
        return
      }
      var ret
      try {
        ret = cb(value)
      }
      catch (e) {
        deferred.reject(e)
        return
      }
      deferred.resolve(ret)
    })
  }

  function resolve(newValue) {
    if (delegating)
      return
    resolve_(newValue)
  }

  function resolve_(newValue) {
    if (state !== null)
      return
    try { //Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.')
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then
        if (typeof then === 'function') {
          delegating = true
          then.call(newValue, resolve_, reject_)
          return
        }
      }
      state = true
      value = newValue
      finale()
    } catch (e) { reject_(e) }
  }

  function reject(newValue) {
    if (delegating)
      return
    reject_(newValue)
  }

  function reject_(newValue) {
    if (state !== null)
      return
    state = false
    value = newValue
    finale()
  }

  function finale() {
    for (var i = 0, len = deferreds.length; i < len; i++)
      handle(deferreds[i])
    deferreds = null
  }

  try { fn(resolve, reject) }
  catch(e) { reject(e) }
}


function Handler(onFulfilled, onRejected, resolve, reject){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null
  this.onRejected = typeof onRejected === 'function' ? onRejected : null
  this.resolve = resolve
  this.reject = reject
}

},{"./lib/next-tick":39}],38:[function(require,module,exports){
'use strict'

//This file contains then/promise specific extensions to the core promise API

var Promise = require('./core.js')
var nextTick = require('./lib/next-tick')

module.exports = Promise

/* Static Functions */

Promise.from = function (value) {
  if (value instanceof Promise) return value
  return new Promise(function (resolve) { resolve(value) })
}
Promise.denodeify = function (fn) {
  return function () {
    var self = this
    var args = Array.prototype.slice.call(arguments)
    return new Promise(function (resolve, reject) {
      args.push(function (err, res) {
        if (err) reject(err)
        else resolve(res)
      })
      fn.apply(self, args)
    })
  }
}
Promise.nodeify = function (fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments)
    var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null
    try {
      return fn.apply(this, arguments).nodeify(callback)
    } catch (ex) {
      if (callback == null) {
        return new Promise(function (resolve, reject) { reject(ex) })
      } else {
        nextTick(function () {
          callback(ex)
        })
      }
    }
  }
}

Promise.all = function () {
  var args = Array.prototype.slice.call(arguments.length === 1 && Array.isArray(arguments[0]) ? arguments[0] : arguments)

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([])
    var remaining = args.length
    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then
          if (typeof then === 'function') {
            then.call(val, function (val) { res(i, val) }, reject)
            return
          }
        }
        args[i] = val
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex)
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i])
    }
  })
}

/* Prototype Methods */

Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this
  self.then(null, function (err) {
    nextTick(function () {
      throw err
    })
  })
}
Promise.prototype.nodeify = function (callback) {
  if (callback == null) return this

  this.then(function (value) {
    nextTick(function () {
      callback(null, value)
    })
  }, function (err) {
    nextTick(function () {
      callback(err)
    })
  })
}
},{"./core.js":37,"./lib/next-tick":39}],39:[function(require,module,exports){
var process=require("__browserify_process");'use strict'

if (typeof setImmediate === 'function') { // IE >= 10 & node.js >= 0.10
  module.exports = function(fn){ setImmediate(fn) }
} else if (typeof process !== 'undefined' && process && typeof process.nextTick === 'function') { // node.js before 0.10
  module.exports = function(fn){ process.nextTick(fn) }
} else {
  module.exports = function(fn){ setTimeout(fn, 0) }
}

},{"__browserify_process":35}],40:[function(require,module,exports){
// Taken from node's assert module, because it sucks
// and exposes next to nothing useful.
var util = require('./util');

module.exports = _deepEqual;

var pSlice = Array.prototype.slice;

function _deepEqual(actual, expected) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;

  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
    if (actual.length != expected.length) return false;

    for (var i = 0; i < actual.length; i++) {
      if (actual[i] !== expected[i]) return false;
    }

    return true;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if (!util.isObject(actual) && !util.isObject(expected)) {
    return actual == expected;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else {
    return objEquiv(actual, expected);
  }
}


function objEquiv (a, b) {
  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
    return false;
  // an identical 'prototype' property.
  if (a.prototype !== b.prototype) return false;
  //~~~I've managed to break Object.keys through screwy arguments passing.
  //   Converting to array solves the problem.
  if (util.isArguments(a)) {
    if (!util.isArguments(b)) {
      return false;
    }
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b);
  }
  try{
    var ka = Object.keys(a),
      kb = Object.keys(b),
      key, i;
  } catch (e) {//happens when one is a string literal and the other isn't
    return false;
  }
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length != kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] != kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key])) return false;
  }
  return true;
}

},{"./util":42}],41:[function(require,module,exports){
/*!
 * Should
 * Copyright(c) 2010-2012 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var util = require('./util')
  , assert = require('assert')
  , AssertionError = assert.AssertionError
  , statusCodes = require('./http').STATUS_CODES
  , eql = require('./eql')
  , inspect = require('util').inspect;

/**
 * Our function should
 * @param obj
 * @returns {Assertion}
 */
var should = function(obj) {
  return new Assertion(util.isWrapperType(obj) ? obj.valueOf(): obj);
};

should.inspect = function(obj, opts) {
  if(util.isDate(obj) && typeof obj.inspect !== 'function') obj = obj.toISOString();
  return inspect(obj, opts);
};

/**
 * Expose assert to should
 *
 * This allows you to do things like below
 * without require()ing the assert module.
 *
 *    should.equal(foo.bar, undefined);
 *
 */
util.merge(should, assert);


/**
 * Assert _obj_ exists, with optional message.
 *
 * @param {*} obj
 * @param {String} [msg]
 * @api public
 */
should.exist = should.exists = function(obj, msg) {
  if(null == obj) {
    throw new AssertionError({
      message: msg || ('expected ' + should.inspect(obj) + ' to exist')
      , stackStartFunction: should.exist
    });
  }
};

/**
 * Asserts _obj_ does not exist, with optional message.
 *
 * @param {*} obj
 * @param {String} [msg]
 * @api public
 */

should.not = {};
should.not.exist = should.not.exists = function(obj, msg){
  if (null != obj) {
    throw new AssertionError({
      message: msg || ('expected ' + should.inspect(obj) + ' to not exist')
      , stackStartFunction: should.not.exist
    });
  }
};

/**
 * Expose should to external world.
 */
exports = module.exports = should;


/**
 * Expose api via `Object#should`.
 *
 * @api public
 */

Object.defineProperty(Object.prototype, 'should', {
  set: function(){},
  get: function(){
    return should(this);
  },
  configurable: true
});

/**
 * Initialize a new `Assertion` with the given _obj_.
 *
 * @param {*} obj
 * @api private
 */

var Assertion = should.Assertion = function Assertion(obj) {
  this.obj = obj;
};

var hasOwnProperty = Object.prototype.hasOwnProperty;

/**
 * Prototype.
 */

Assertion.prototype = {

  /**
   * Assert _expr_ with the given _msg_ and _negatedMsg_.
   *
   * @param {Boolean} expr
   * @param {function} msg
   * @param {function} negatedMsg
   * @param {Object} [expected]
   * @param {Boolean} [showDiff]
   * @param {String} [description]
   * @api private
   */

  assert: function(expr, msg, negatedMsg, expected, showDiff, description){
    msg = this.negate ? negatedMsg : msg

    var ok = this.negate ? !expr : expr
      , obj = this.obj;

    if (ok) return;

    var err = new AssertionError({
        message: msg.call(this)
      , actual: obj
      , expected: expected
      , stackStartFunction: this.assert
      , negated: this.negate
    });

    err.showDiff = showDiff;
    err.description = description

    throw err;
  },

  /**
   * Dummy getter.
   *
   * @api public
   */

  get an() {
    return this;
  },

  /**
   * Dummy getter.
   *
   * @api public
   */

  get of() {
    return this;
  },

  /**
   * Dummy getter.
   *
   * @api public
   */

  get a() {
    return this;
  },

  /**
   * Dummy getter.
   *
   * @api public
   */

  get and() {
    return this;
  },

  /**
   * Dummy getter.
   *
   * @api public
   */

  get be() {
    return this;
  },

  /**
   * Dummy getter.
   *
   * @api public
   */

  get have() {
    return this;
  },

  /**
   * Dummy getter.
   *
   * @api public
   */

  get with() {
    return this;
  },

  /**
   * Negation modifier.
   *
   * @api public
   */

  get not() {
    this.negate = true;
    return this;
  },

  /**
   * Get object inspection string.
   *
   * @return {String}
   * @api private
   */

  get inspect() {
    return should.inspect(this.obj);
  },

  /**
   * Assert instanceof `Arguments`.
   *
   * @api public
   */

  get arguments() {
    this.assert(
        util.isArguments(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be arguments' }
      , function(){ return 'expected ' + this.inspect + ' to not be arguments' });
    return this;
  },

  /**
   * Assert that object is empty.
   *
   * @api public
   */

  get empty() {
    var length = this.obj.length;

    if(util.isString(this.obj) || Array.isArray(this.obj) || util.isArguments(this.obj)) {
      this.assert(
        0 === length
        , function(){ return 'expected ' + this.inspect + ' to be empty' }
        , function(){ return 'expected ' + this.inspect + ' not to be empty' });
    } else {
      var ok = true;
      for (var prop in this.obj) {
        if(hasOwnProperty.call(this.obj, prop)) {
          ok = false;
          break;
        }
      }

      this.assert(
        ok
        , function(){ return 'expected ' + this.inspect + ' to be empty' }
        , function(){ return 'expected ' + this.inspect + ' not to be empty' });

    }
    return this;
  },

  /**
   * Assert ok.
   *
   * @api public
   */

  get ok() {
    this.assert(
        this.obj
      , function(){ return 'expected ' + this.inspect + ' to be truthy' }
      , function(){ return 'expected ' + this.inspect + ' to be falsey' });
    return this;
  },

  /**
   * Assert true.
   *
   * @api public
   */

  get true() {
    this.assert(
        true === this.obj
      , function(){ return 'expected ' + this.inspect + ' to be true' }
      , function(){ return 'expected ' + this.inspect + ' not to be true' });
    return this;
  },

  /**
   * Assert false.
   *
   * @api public
   */

  get false() {
    this.assert(
        false === this.obj
      , function(){ return 'expected ' + this.inspect + ' to be false' }
      , function(){ return 'expected ' + this.inspect + ' not to be false' });
    return this;
  },

  /**
   * Assert NaN.
   *
   * @api public
   */

  get NaN() {
    this.assert(
        util.isNumber(this.obj) && isNaN(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be NaN' }
      , function(){ return 'expected ' + this.inspect + ' not to be NaN' });
    return this;
  },

  /**
   * Assert Infinity.
   *
   * @api public
   */

  get Infinity() {
    this.assert(
      util.isNumber(this.obj) && !isNaN(this.obj) && !isFinite(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be Infinity' }
      , function(){ return 'expected ' + this.inspect + ' not to be Infinity' });
    return this;
  },

  /**
   * Assert equal.
   *
   * @param {*} val
   * @param {String} description
   * @api public
   */

  eql: function(val, description){
    this.assert(
        eql(val, this.obj)
      , function(){ return 'expected ' + this.inspect + ' to equal ' + should.inspect(val) + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to not equal ' + should.inspect(val) + (description ? " | " + description : "") }
      , val
      , true
      , description);
    return this;
  },

  /**
   * Assert strict equal.
   *
   * @param {*} val
   * @param {String} description
   * @api public
   */

  equal: function(val, description){
    this.assert(
        val === this.obj
      , function(){ return 'expected ' + this.inspect + ' to equal ' + should.inspect(val) + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to not equal ' + should.inspect(val) + (description ? " | " + description : "") }
      , val
      , void 0
      , description);
    return this;
  },

  /**
   * Assert within start to finish (inclusive).
   *
   * @param {Number} start
   * @param {Number} finish
   * @param {String} description
   * @api public
   */

  within: function(start, finish, description){
    var range = start + '..' + finish;
    this.assert(
        this.obj >= start && this.obj <= finish
      , function(){ return 'expected ' + this.inspect + ' to be within ' + range + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to not be within ' + range + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert within value +- delta (inclusive).
   *
   * @param {Number} value
   * @param {Number} delta
   * @param {String} description
   * @api public
   */

  approximately: function(value, delta, description) {
    this.assert(
      Math.abs(this.obj - value) <= delta
      , function(){ return 'expected ' + this.inspect + ' to be approximately ' + value + " +- " + delta + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to not be approximately ' + value + " +- " + delta + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert typeof.
   *
   * @param {*} type
   * @param {String} description
   * @api public
   */
  type: function(type, description){
    this.assert(
        type == typeof this.obj
      , function(){ return 'expected ' + this.inspect + ' to have type ' + type + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' not to have type ' + type  + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert instanceof.
   *
   * @param {Function} constructor
   * @param {String} description
   * @api public
   */

  instanceof: function(constructor, description){
    var name = constructor.name;
    this.assert(
        this.obj instanceof constructor
      , function(){ return 'expected ' + this.inspect + ' to be an instance of ' + name + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' not to be an instance of ' + name + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert if given object is a function.
   */
  get Function(){
    this.assert(
      util.isFunction(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be a function' }
      , function(){ return 'expected ' + this.inspect + ' not to be a function' });
    return this;
  },

  /**
   * Assert given object is an object.
   */
  get Object(){
    this.assert(
      util.isObject(this.obj) && !Array.isArray(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be an object' }
      , function(){ return 'expected ' + this.inspect + ' not to be an object' });
    return this;
  },

  /**
   * Assert given object is a string
   */
  get String(){
    this.assert(
      util.isString(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be a string' }
      , function(){ return 'expected ' + this.inspect + ' not to be a string' });
    return this;
  },

  /**
   * Assert given object is an array
   */
  get Array(){
    this.assert(
      Array.isArray(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be an array' }
      , function(){ return 'expected ' + this.inspect + ' not to be an array' });
    return this;
  },

  /**
   * Assert given object is a number. NaN and Infinity are not numbers.
   */
  get Number(){
    this.assert(
      util.isNumber(this.obj) && isFinite(this.obj) && !isNaN(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be a number' }
      , function(){ return 'expected ' + this.inspect + ' not to be a number' });
    return this;
  },

  /**
   * Assert given object is a boolean
   */
  get Boolean(){
    this.assert(
      util.isBoolean(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be a boolean' }
      , function(){ return 'expected ' + this.inspect + ' not to be a boolean' });
    return this;
  },

  /**
   * Assert given object is an error
   */
  get Error() {
    this.assert(
      util.isError(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to be an error' }
      , function(){ return 'expected ' + this.inspect + ' not to be an error' });
    return this;
  },
  /**
   * Assert numeric value above _n_.
   *
   * @param {Number} n
   * @param {String} description
   * @api public
   */

  above: function(n, description){
    this.assert(
        this.obj > n
      , function(){ return 'expected ' + this.inspect + ' to be above ' + n + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to be below ' + n + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert numeric value below _n_.
   *
   * @param {Number} n
   * @param {String} description
   * @api public
   */

  below: function(n, description){
    this.assert(
        this.obj < n
      , function(){ return 'expected ' + this.inspect + ' to be below ' + n + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to be above ' + n + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert string value matches _regexp_.
   *
   * @param {RegExp} regexp
   * @param {String} description
   * @api public
   */

  match: function(regexp, description){
    this.assert(
        regexp.exec(this.obj)
      , function(){ return 'expected ' + this.inspect + ' to match ' + regexp + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' not to match ' + regexp + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert property "length" exists and has value of _n_.
   *
   * @param {Number} n
   * @param {String} description
   * @api public
   */

  length: function(n, description){
    this.obj.should.have.property('length');
    var len = this.obj.length;
    this.assert(
        n == len
      , function(){ return 'expected ' + this.inspect + ' to have a length of ' + n + ' but got ' + len + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to not have a length of ' + len + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert property _name_ exists, with optional _val_.
   *
   * @param {String} name
   * @param {*} [val]
   * @param {String} description
   * @api public
   */

  property: function(name, val, description){
    if (this.negate && undefined !== val) {
      if (undefined === this.obj[name]) {
        throw new Error(this.inspect + ' has no property ' + should.inspect(name) + (description ? " | " + description : ""));
      }
    } else {
      this.assert(
          undefined !== this.obj[name]
        , function(){ return 'expected ' + this.inspect + ' to have a property ' + should.inspect(name) + (description ? " | " + description : "") }
        , function(){ return 'expected ' + this.inspect + ' to not have a property ' + should.inspect(name) + (description ? " | " + description : "") }
        , void 0
        , void 0
        , description);
    }

    if (undefined !== val) {
      this.assert(
          val === this.obj[name]
        , function(){ return 'expected ' + this.inspect + ' to have a property ' + should.inspect(name)
          + ' of ' + should.inspect(val) + ', but got ' + should.inspect(this.obj[name]) + (description ? " | " + description : "") }
        , function(){ return 'expected ' + this.inspect + ' to not have a property ' + should.inspect(name) + ' of ' + should.inspect(val) + (description ? " | " + description : "") }
        , void 0
        , void 0
        , description);
    }

    this.obj = this.obj[name];
    return this;
  },
  /**
   * Asset have given properties
   * @param {Array|String ...} names
   * @api public
   */
  properties: function(names) {
    var str
      , ok = true;

    names = names instanceof Array
      ? names
      : Array.prototype.slice.call(arguments);

    var len = names.length;

    if (!len) throw new Error('names required');

    // make sure they're all present
    ok = names.every(function(name){
      return this.obj[name] !== undefined;
    }, this);

    // key string
    if (len > 1) {
      names = names.map(function(name){
        return should.inspect(name);
      });
      var last = names.pop();
      str = names.join(', ') + ', and ' + last;
    } else {
      str = should.inspect(names[0]);
    }

    // message
    str = 'have ' + (len > 1 ? 'properties ' : 'a property ') + str;

    this.assert(
      ok
      , function(){ return 'expected ' + this.inspect + ' to ' + str }
      , function(){ return 'expected ' + this.inspect + ' to not ' + str });

    return this;
  },

  /**
   * Assert own property _name_ exists.
   *
   * @param {String} name
   * @param {String} description
   * @api public
   */

  ownProperty: function(name, description){
    this.assert(
      hasOwnProperty.call(this.obj, name)
      , function(){ return 'expected ' + this.inspect + ' to have own property ' + should.inspect(name) + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to not have own property ' + should.inspect(name) + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    this.obj = this.obj[name];
    return this;
  },

  /**
   * Assert that string starts with `str`.
   * @param {String} str
   * @param {String} description
   * @api public
   */

  startWith: function(str, description) {
    this.assert(0 === this.obj.indexOf(str)
    , function() { return 'expected ' + this.inspect + ' to start with ' + should.inspect(str) + (description ? " | " + description : "") }
    , function() { return 'expected ' + this.inspect + ' to not start with ' + should.inspect(str) + (description ? " | " + description : "") }
    , void 0
    , void 0
    , description);
    return this;
  },

  /**
   * Assert that string ends with `str`.
   * @param {String} str
   * @param {String} description
   * @api public
   */

  endWith: function(str, description) {
    this.assert(-1 !== this.obj.indexOf(str, this.obj.length - str.length)
    , function() { return 'expected ' + this.inspect + ' to end with ' + should.inspect(str) + (description ? " | " + description : "") }
    , function() { return 'expected ' + this.inspect + ' to not end with ' + should.inspect(str) + (description ? " | " + description : "") }
    , void 0
    , void 0
    , description);
    return this;
  },

  /**
   * Assert that `obj` is present via `.indexOf()` or that `obj` contains some sub-object.
   *
   * @param {*} obj
   * @param {String} description
   * @api public
   */

  include: function(obj, description){
    if (!Array.isArray(this.obj) && !util.isString(this.obj)){
      var cmp = {};
      for (var key in obj) cmp[key] = this.obj[key];
      this.assert(
          eql(cmp, obj)
        , function(){ return 'expected ' + this.inspect + ' to include an object equal to ' + should.inspect(obj) + (description ? " | " + description : "") }
        , function(){ return 'expected ' + this.inspect + ' to not include an object equal to ' + should.inspect(obj) + (description ? " | " + description : "") }
        , void 0
        , void 0
        , description);
    } else {
      this.assert(
          ~this.obj.indexOf(obj)
        , function(){ return 'expected ' + this.inspect + ' to include ' + should.inspect(obj) + (description ? " | " + description : "") }
        , function(){ return 'expected ' + this.inspect + ' to not include ' + should.inspect(obj) + (description ? " | " + description : "") }
        , void 0
        , void 0
        , description);
    }
    return this;
  },

  /**
   * Assert that an object equal to `obj` is present.
   *
   * @param {Array} obj
   * @param {String} description
   * @api public
   */

  includeEql: function(obj, description){
    this.assert(
      this.obj.some(function(item) { return eql(obj, item); })
      , function(){ return 'expected ' + this.inspect + ' to include an object equal to ' + should.inspect(obj) + (description ? " | " + description : "") }
      , function(){ return 'expected ' + this.inspect + ' to not include an object equal to ' + should.inspect(obj) + (description ? " | " + description : "") }
      , void 0
      , void 0
      , description);
    return this;
  },

  /**
   * Assert exact keys or inclusion of keys by using
   * the `.include` modifier.
   *
   * @param {Array|String ...} keys
   * @api public
   */

  keys: function(keys){
    var str
      , ok = true;

    keys = keys instanceof Array
      ? keys
      : Array.prototype.slice.call(arguments);

    if (!keys.length) throw new Error('keys required');

    var actual = Object.keys(this.obj)
      , len = keys.length;

    // make sure they're all present
    ok = keys.every(function(key){
      return ~actual.indexOf(key);
    });

    // matching length
    ok = ok && keys.length == actual.length;

    // key string
    if (len > 1) {
      keys = keys.map(function(key){
        return should.inspect(key);
      });
      var last = keys.pop();
      str = keys.join(', ') + ', and ' + last;
    } else {
      str = should.inspect(keys[0]);
    }

    // message
    str = 'have ' + (len > 1 ? 'keys ' : 'key ') + str;

    this.assert(
        ok
      , function(){ return 'expected ' + this.inspect + ' to ' + str }
      , function(){ return 'expected ' + this.inspect + ' to not ' + str });

    return this;
  },

  /**
   * Assert that header `field` has the given `val`.
   *
   * @param {String} field
   * @param {String} val
   * @return {Assertion} for chaining
   * @api public
   */

  header: function(field, val){
    this.obj.should
      .have.property('headers').and
      .have.property(field.toLowerCase(), val);
    return this;
  },

  /**
   * Assert `.statusCode` of `code`.
   *
   * @param {Number} code
   * @return {Assertion} for chaining
   * @api public
   */

  status:  function(code){
    this.obj.should.have.property('statusCode');
    var status = this.obj.statusCode;

    this.assert(
        code == status
      , function(){ return 'expected response code of ' + code + ' ' + should.inspect(statusCodes[code])
        + ', but got ' + status + ' ' + should.inspect(statusCodes[status]) }
      , function(){ return 'expected to not respond with ' + code + ' ' + should.inspect(statusCodes[code]) });

    return this;
  },

  /**
   * Assert that this response has content-type: application/json.
   *
   * @return {Assertion} for chaining
   * @api public
   */

  get json() {
    this.obj.should.have.property('headers');
    this.obj.headers.should.have.property('content-type');
    this.obj.headers['content-type'].should.include('application/json');
    return this;
  },

  /**
   * Assert that this response has content-type: text/html.
   *
   * @return {Assertion} for chaining
   * @api public
   */

  get html() {
    this.obj.should.have.property('headers');
    this.obj.headers.should.have.property('content-type');
    this.obj.headers['content-type'].should.include('text/html');
    return this;
  },

  /**
   * Assert that this function will or will not
   * throw an exception.
   *
   * @return {Assertion} for chaining
   * @api public
   */

  throw: function(message){
    var fn = this.obj
      , err = {}
      , errorInfo = ''
      , ok = true;

    try {
      fn();
      ok = false;
    } catch (e) {
      err = e;
    }

    if (ok) {
      if ('string' == typeof message) {
        ok = message == err.message;
      } else if (message instanceof RegExp) {
        ok = message.test(err.message);
      } else if ('function' == typeof message) {
        ok = err instanceof message;
      }

      if (message && !ok) {
        if ('string' == typeof message) {
          errorInfo = " with a message matching '" + message + "', but got '" + err.message + "'";
        } else if (message instanceof RegExp) {
          errorInfo = " with a message matching " + message + ", but got '" + err.message + "'";
        } else if ('function' == typeof message) {
          errorInfo = " of type " + message.name + ", but got " + err.constructor.name;
        }
      }
    }

    this.assert(
        ok
      , function(){ return 'expected an exception to be thrown' + errorInfo }
      , function(){ return 'expected no exception to be thrown, got "' + err.message + '"' });

    return this;
  }
};

/**
 * Aliases.
 */

(function alias(name, as){
  Assertion.prototype[as] = Assertion.prototype[name];
  return alias;
})
('instanceof', 'instanceOf')
('throw', 'throwError')
('length', 'lengthOf')
('keys', 'key')
('ownProperty', 'haveOwnProperty')
('above', 'greaterThan')
('below', 'lessThan')
('include', 'contain')
('equal', 'exactly');


},{"./eql":40,"./http":"j+v/Vf","./util":42,"assert":32,"util":33}],42:[function(require,module,exports){
var Buffer=require("__browserify_Buffer").Buffer;/**
 * Check if given obj just a primitive type wrapper
 * @param {Object} obj
 * @returns {boolean}
 * @api private
 */
exports.isWrapperType = function(obj) {
    return isNumber(obj) || isString(obj) || isBoolean(obj);
}

/**
 * Merge object b with object a.
 *
 *     var a = { foo: 'bar' }
 *       , b = { bar: 'baz' };
 *
 *     utils.merge(a, b);
 *     // => { foo: 'bar', bar: 'baz' }
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Object}
 * @api private
 */

exports.merge = function(a, b){
  if (a && b) {
    for (var key in b) {
      a[key] = b[key];
    }
  }
  return a;
};

function isNumber(arg) {
  return typeof arg === 'number' || arg instanceof Number;
}

exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string' || arg instanceof String;
}

function isBoolean(arg) {
  return typeof arg === 'boolean' || arg instanceof Boolean;
}
exports.isBoolean = isBoolean;

exports.isString = isString;

function isBuffer(arg) {
  return typeof Buffer !== 'undefined' && arg instanceof Buffer;
}

exports.isBuffer = isBuffer;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}

exports.isDate = isDate;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

exports.isObject = isObject;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}

exports.isRegExp = isRegExp;

function isNullOrUndefined(arg) {
  return arg == null;
}

exports.isNullOrUndefined = isNullOrUndefined;

function isArguments(object) {
  return objectToString(object) === '[object Arguments]';
}

exports.isArguments = isArguments;

exports.isFunction = function(arg) {
  return typeof arg === 'function' || arg instanceof Function;
};

function isError(e) {
  return isObject(e) && objectToString(e) === '[object Error]';
}
exports.isError = isError;
},{"__browserify_Buffer":34}],43:[function(require,module,exports){
(function(root){

  // Let's borrow a couple of things from Underscore that we'll need

  // _.each
  var breaker = {},
      AP = Array.prototype,
      OP = Object.prototype,

      hasOwn = OP.hasOwnProperty,
      toString = OP.toString,
      forEach = AP.forEach,
      indexOf = AP.indexOf,
      slice = AP.slice;

  var _each = function( obj, iterator, context ) {
    var key, i, l;

    if ( !obj ) {
      return;
    }
    if ( forEach && obj.forEach === forEach ) {
      obj.forEach( iterator, context );
    } else if ( obj.length === +obj.length ) {
      for ( i = 0, l = obj.length; i < l; i++ ) {
        if ( i in obj && iterator.call( context, obj[i], i, obj ) === breaker ) {
          return;
        }
      }
    } else {
      for ( key in obj ) {
        if ( hasOwn.call( obj, key ) ) {
          if ( iterator.call( context, obj[key], key, obj) === breaker ) {
            return;
          }
        }
      }
    }
  };

  // _.isFunction
  var _isFunction = function( obj ) {
    return !!(obj && obj.constructor && obj.call && obj.apply);
  };

  // _.extend
  var _extend = function( obj ) {

    _each( slice.call( arguments, 1), function( source ) {
      var prop;

      for ( prop in source ) {
        if ( source[prop] !== void 0 ) {
          obj[ prop ] = source[ prop ];
        }
      }
    });
    return obj;
  };

  // $.inArray
  var _inArray = function( elem, arr, i ) {
    var len;

    if ( arr ) {
      if ( indexOf ) {
        return indexOf.call( arr, elem, i );
      }

      len = arr.length;
      i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

      for ( ; i < len; i++ ) {
        // Skip accessing in sparse arrays
        if ( i in arr && arr[ i ] === elem ) {
          return i;
        }
      }
    }

    return -1;
  };

  // And some jQuery specific helpers

  var class2type = {};

  // Populate the class2type map
  _each("Boolean Number String Function Array Date RegExp Object".split(" "), function(name, i) {
    class2type[ "[object " + name + "]" ] = name.toLowerCase();
  });

  var _type = function( obj ) {
    return obj == null ?
      String( obj ) :
      class2type[ toString.call(obj) ] || "object";
  };

  // Now start the jQuery-cum-Underscore implementation. Some very
  // minor changes to the jQuery source to get this working.

  // Internal Deferred namespace
  var _d = {};
  // String to Object options format cache
  var optionsCache = {};

  // Convert String-formatted options into Object-formatted ones and store in cache
  function createOptions( options ) {
    var object = optionsCache[ options ] = {};
    _each( options.split( /\s+/ ), function( flag ) {
      object[ flag ] = true;
    });
    return object;
  }

  _d.Callbacks = function( options ) {

    // Convert options from String-formatted to Object-formatted if needed
    // (we check in cache first)
    options = typeof options === "string" ?
      ( optionsCache[ options ] || createOptions( options ) ) :
      _extend( {}, options );

    var // Last fire value (for non-forgettable lists)
      memory,
      // Flag to know if list was already fired
      fired,
      // Flag to know if list is currently firing
      firing,
      // First callback to fire (used internally by add and fireWith)
      firingStart,
      // End of the loop when firing
      firingLength,
      // Index of currently firing callback (modified by remove if needed)
      firingIndex,
      // Actual callback list
      list = [],
      // Stack of fire calls for repeatable lists
      stack = !options.once && [],
      // Fire callbacks
      fire = function( data ) {
        memory = options.memory && data;
        fired = true;
        firingIndex = firingStart || 0;
        firingStart = 0;
        firingLength = list.length;
        firing = true;
        for ( ; list && firingIndex < firingLength; firingIndex++ ) {
          if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
            memory = false; // To prevent further calls using add
            break;
          }
        }
        firing = false;
        if ( list ) {
          if ( stack ) {
            if ( stack.length ) {
              fire( stack.shift() );
            }
          } else if ( memory ) {
            list = [];
          } else {
            self.disable();
          }
        }
      },
      // Actual Callbacks object
      self = {
        // Add a callback or a collection of callbacks to the list
        add: function() {
          if ( list ) {
            // First, we save the current length
            var start = list.length;
            (function add( args ) {
              _each( args, function( arg ) {
                var type = _type( arg );
                if ( type === "function" && ( !options.unique || !self.has( arg ) ) ) {
                  list.push( arg );
                } else if ( arg && arg.length && type !== "string" ) {
                  // Inspect recursively
                  add( arg );
                }
              });
            })( arguments );
            // Do we need to add the callbacks to the
            // current firing batch?
            if ( firing ) {
              firingLength = list.length;
            // With memory, if we're not firing then
            // we should call right away
            } else if ( memory ) {
              firingStart = start;
              fire( memory );
            }
          }
          return this;
        },
        // Remove a callback from the list
        remove: function() {
          if ( list ) {
            _each( arguments, function( arg ) {
              var index;
              while( ( index = _inArray( arg, list, index ) ) > -1 ) {
                list.splice( index, 1 );
                // Handle firing indexes
                if ( firing ) {
                  if ( index <= firingLength ) {
                    firingLength--;
                  }
                  if ( index <= firingIndex ) {
                    firingIndex--;
                  }
                }
              }
            });
          }
          return this;
        },
        // Control if a given callback is in the list
        has: function( fn ) {
          return _inArray( fn, list ) > -1;
        },
        // Remove all callbacks from the list
        empty: function() {
          list = [];
          return this;
        },
        // Have the list do nothing anymore
        disable: function() {
          list = stack = memory = undefined;
          return this;
        },
        // Is it disabled?
        disabled: function() {
          return !list;
        },
        // Lock the list in its current state
        lock: function() {
          stack = undefined;
          if ( !memory ) {
            self.disable();
          }
          return this;
        },
        // Is it locked?
        locked: function() {
          return !stack;
        },
        // Call all callbacks with the given context and arguments
        fireWith: function( context, args ) {
          args = args || [];
          args = [ context, args.slice ? args.slice() : args ];
          if ( list && ( !fired || stack ) ) {
            if ( firing ) {
              stack.push( args );
            } else {
              fire( args );
            }
          }
          return this;
        },
        // Call all the callbacks with the given arguments
        fire: function() {
          self.fireWith( this, arguments );
          return this;
        },
        // To know if the callbacks have already been called at least once
        fired: function() {
          return !!fired;
        }
      };

    return self;
  };

  _d.Deferred = function( func ) {

    var tuples = [
        // action, add listener, listener list, final state
        [ "resolve", "done", _d.Callbacks("once memory"), "resolved" ],
        [ "reject", "fail", _d.Callbacks("once memory"), "rejected" ],
        [ "notify", "progress", _d.Callbacks("memory") ]
      ],
      state = "pending",
      promise = {
        state: function() {
          return state;
        },
        always: function() {
          deferred.done( arguments ).fail( arguments );
          return this;
        },
        then: function( /* fnDone, fnFail, fnProgress */ ) {
          var fns = arguments;
          return _d.Deferred(function( newDefer ) {
            _each( tuples, function( tuple, i ) {
              var action = tuple[ 0 ],
                fn = fns[ i ];
              // deferred[ done | fail | progress ] for forwarding actions to newDefer
              deferred[ tuple[1] ]( _isFunction( fn ) ?
                function() {
                  var returned = fn.apply( this, arguments );
                  if ( returned && _isFunction( returned.promise ) ) {
                    returned.promise()
                      .done( newDefer.resolve )
                      .fail( newDefer.reject )
                      .progress( newDefer.notify );
                  } else {
                    newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
                  }
                } :
                newDefer[ action ]
              );
            });
            fns = null;
          }).promise();
        },
        // Get a promise for this deferred
        // If obj is provided, the promise aspect is added to the object
        promise: function( obj ) {
          return typeof obj === "object" ? _extend( obj, promise ) : promise;
        }
      },
      deferred = {};

    // Keep pipe for back-compat
    promise.pipe = promise.then;

    // Add list-specific methods
    _each( tuples, function( tuple, i ) {
      var list = tuple[ 2 ],
        stateString = tuple[ 3 ];

      // promise[ done | fail | progress ] = list.add
      promise[ tuple[1] ] = list.add;

      // Handle state
      if ( stateString ) {
        list.add(function() {
          // state = [ resolved | rejected ]
          state = stateString;

        // [ reject_list | resolve_list ].disable; progress_list.lock
        }, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
      }

      // deferred[ resolve | reject | notify ] = list.fire
      deferred[ tuple[0] ] = list.fire;
      deferred[ tuple[0] + "With" ] = list.fireWith;
    });

    // Make the deferred a promise
    promise.promise( deferred );

    // Call given func if any
    if ( func ) {
      func.call( deferred, deferred );
    }

    // All done!
    return deferred;
  };

    // Deferred helper
    _d.when = function( subordinate /* , ..., subordinateN */ ) {
    var i = 0,
      resolveValues = slice.call( arguments ),
      length = resolveValues.length,

      // the count of uncompleted subordinates
      remaining = length !== 1 || ( subordinate && _isFunction( subordinate.promise ) ) ? length : 0,

      // the master Deferred. If resolveValues consist of only a single Deferred, just use that.
      deferred = remaining === 1 ? subordinate : _d.Deferred(),

      // Update function for both resolve and progress values
      updateFunc = function( i, contexts, values ) {
        return function( value ) {
          contexts[ i ] = this;
          values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
          if( values === progressValues ) {
            deferred.notifyWith( contexts, values );
          } else if ( !( --remaining ) ) {
            deferred.resolveWith( contexts, values );
          }
        };
      },

      progressValues, progressContexts, resolveContexts;

    // add listeners to Deferred subordinates; treat others as resolved
    if ( length > 1 ) {
      progressValues = new Array( length );
      progressContexts = new Array( length );
      resolveContexts = new Array( length );
      for ( ; i < length; i++ ) {
        if ( resolveValues[ i ] && _isFunction( resolveValues[ i ].promise ) ) {
          resolveValues[ i ].promise()
            .done( updateFunc( i, resolveContexts, resolveValues ) )
            .fail( deferred.reject )
            .progress( updateFunc( i, progressContexts, progressValues ) );
        } else {
          --remaining;
        }
      }
    }

    // if we're not waiting on anything, resolve the master
    if ( !remaining ) {
      deferred.resolveWith( resolveContexts, resolveValues );
    }

    return deferred.promise();
  };

  // Try exporting as a Common.js Module
  if ( typeof module !== "undefined" && module.exports ) {
    module.exports = _d;

  // Or mixin to Underscore.js
  } else if ( typeof root._ !== "undefined" ) {
    root._.mixin(_d);

  // Or assign it to window._
  } else {
    root._ = _d;
  }

})(this);

},{}],44:[function(require,module,exports){
module.exports={
  "name": "imjs",
  "version": "3.0.0-beta",
  "description": "Client library for communication with InterMine web-services",
  "main": "js/index",
  "keywords": [
    "javascript",
    "webservice",
    "InterMine",
    "Bio-Informatics"
  ],
  "author": {
    "name": "Alex Kalderimis",
    "email": "alex@intermine.org",
    "twitter": "alexkalderimis"
  },
  "license": "LGPL",
  "repository": {
    "type": "git",
    "url": "git://github.com/alexkalderimis/imjs.git"
  },
  "dependencies": {
    "JSONStream": "~0.7.1",
    "promise": "~3.2.0",
    "xmldom": "~0.1.16"
  },
  "engines": {
    "node": ">= 0.8.0"
  },
  "directories": {
    "tests": "test"
  },
  "scripts": {
    "prepublish": "make",
    "test": "make test"
  },
  "devDependencies": {
    "bower": "latest",
    "codo": "~1.6.0",
    "coffee-script": "~1.3.3",
    "grunt": "~0.4.1",
    "grunt-browserify": "~1.2.11",
    "grunt-bump": "0.0.11",
    "grunt-cli": "~0.1.11",
    "grunt-coffeelint": "0.0.7",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-concat": "~0.3.0",
    "grunt-contrib-copy": "~0.4.1",
    "grunt-contrib-jshint": "~0.7.1",
    "grunt-contrib-symlink": "~0.2.0",
    "grunt-contrib-uglify": "~0.2.7",
    "grunt-mocha-phantomjs": "~0.3.1",
    "grunt-simple-mocha": "~0.4.0",
    "httpinvoke": "~1.0.4",
    "mocha": "latest",
    "oboe": "~1.11.0",
    "should": "latest",
    "coffeeify": "~0.5.2",
    "grunt-jscoverage": "0.0.3"
  }
}

},{}],45:[function(require,module,exports){
var add, even, lengthOf, should,
  __slice = [].slice;

should = require('should');

even = function(n) {
  return n % 2 === 0;
};

add = function(a, b) {
  return a + b;
};

lengthOf = function(x) {
  return x.length;
};

describe('utils', function() {
  var utils;
  utils = require('./lib/fixture').utils;
  describe('Type Checking', function() {
    var isArray, isFunction;
    isFunction = utils.isFunction, isArray = utils.isArray;
    describe('A function', function() {
      var f;
      f = function(x) {
        return x * x;
      };
      it('should be a function', function() {
        return isFunction(f).should.be["true"];
      });
      return it('should not be an array', function() {
        return isArray(f).should.not.be["true"];
      });
    });
    describe('An object', function() {
      var o;
      o = {};
      it('should not be a function', function() {
        return isFunction(o).should.not.be["true"];
      });
      return it('should not be an array', function() {
        return isArray(o).should.not.be["true"];
      });
    });
    describe('An array', function() {
      var a;
      a = [];
      it('should not be a function', function() {
        return isFunction(a).should.not.be["true"];
      });
      return it('should be an array', function() {
        return isArray(a).should.be["true"];
      });
    });
    describe('A regex', function() {
      var r;
      r = /foo/;
      it('should not be a function', function() {
        return isFunction(r).should.not.be["true"];
      });
      return it('should not be an array', function() {
        return isArray(r).should.not.be["true"];
      });
    });
    describe('A date', function() {
      var d;
      d = new Date;
      it('should not be a function', function() {
        return isFunction(d).should.not.be["true"];
      });
      return it('should not be an array', function() {
        return isArray(d).should.not.be["true"];
      });
    });
    describe('A string', function() {
      var s;
      s = "foo";
      it('should not be a function', function() {
        return isFunction(s).should.not.be["true"];
      });
      return it('should not be an array', function() {
        return isArray(s).should.not.be["true"];
      });
    });
    describe('A number', function() {
      var n;
      n = 100;
      it('should not be a function', function() {
        return isFunction(n).should.not.be["true"];
      });
      return it('should not be an array', function() {
        return isArray(n).should.not.be["true"];
      });
    });
    describe('A boolean', function() {
      var b;
      b = true;
      it('should not be a function', function() {
        return isFunction(b).should.not.be["true"];
      });
      return it('should not be an array', function() {
        return isArray(b).should.not.be["true"];
      });
    });
    return describe('null', function() {
      it('should not be a function', function() {
        return isFunction(null).should.not.be["true"];
      });
      return it('should not be an array', function() {
        return isArray(null).should.not.be["true"];
      });
    });
  });
  describe('isArray', function() {
    var isArray;
    isArray = utils.isArray;
    it('should agree that [] is an array', function() {
      return isArray([]).should.be["true"];
    });
    return it('should agree that [1, 2, 3] is an array', function() {
      return isArray([1, 2, 3]).should.be["true"];
    });
  });
  describe('querystring', function() {
    var querystring;
    querystring = utils.querystring;
    describe('from pairs', function() {
      it('should make "foo=bar" from [["foo", "bar"]]', function() {
        return querystring([['foo', 'bar']]).should.eql("foo=bar");
      });
      it('should make "" from [["foo", null]]', function() {
        return querystring([['foo', null]]).should.eql("");
      });
      it('should make "a=b&c=d" from [["a", "b"], ["c", "d"]]', function() {
        return querystring([["a", "b"], ["c", "d"]]).should.eql("a=b&c=d");
      });
      it('should make "a=1&a=2" from [["a", 1],["a",2]]', function() {
        return querystring([['a', 1], ['a', 2]]).should.eql("a=1&a=2");
      });
      return it('should make "key=some%20value" from [["key", "some value"]]', function() {
        return querystring([['key', 'some value']]).should.eql("key=some%20value");
      });
    });
    return describe('from object', function() {
      it('should make "foo=bar" from {"foo": "bar"}', function() {
        return querystring({
          foo: 'bar'
        }).should.eql("foo=bar");
      });
      it('should make "" from {"foo": undefined}', function() {
        return querystring({
          foo: void 0
        }).should.eql("");
      });
      it('should make "a=b&c=d" from {"a": "b", "c": "d"}', function() {
        return querystring({
          a: "b",
          c: "d"
        }).should.eql("a=b&c=d");
      });
      it('should make "a=1&a=2" from {"a": [1, 2]}', function() {
        return querystring({
          a: [1, 2]
        }).should.eql("a=1&a=2");
      });
      return it('should make "key=some%20value" from {"key": "some value"}', function() {
        return querystring({
          key: 'some value'
        }).should.eql("key=some%20value");
      });
    });
  });
  describe('curry', function() {
    var curry, getFour, plusTwo;
    curry = utils.curry;
    plusTwo = curry(add, 2);
    getFour = curry(add, 2, 2);
    it('can produce a partially applied function', function() {
      return plusTwo(2).should.eql(4);
    });
    return it('can partially apply all arguments', function() {
      return getFour().should.eql(4);
    });
  });
  describe('error', function() {
    var e, error;
    error = utils.error;
    e = error("Sth. bad happened");
    return it('should be a failed promise', function(done) {
      var shouldHaveFailed;
      shouldHaveFailed = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return done("Expected failure, got " + args);
      };
      return e.then(shouldHaveFailed, (function() {
        return done();
      }));
    });
  });
  describe('success', function() {
    var s, success;
    success = utils.success;
    s = success("Sth. good happened");
    return it('should be a resolved promise', function(done) {
      return s.then((function() {
        return done();
      }), (function() {
        return done("Failed");
      }));
    });
  });
  describe('defer', function() {
    var defer;
    defer = utils.defer;
    describe('resolution', function() {
      var promise, resolve, _ref;
      _ref = defer(), promise = _ref.promise, resolve = _ref.resolve;
      resolve("FOO");
      it('should be a thenable', function() {
        return should.exist(promise.then);
      });
      it('should have a "done" method', function() {
        return should.exist(promise.done);
      });
      return it('should have been resolved', function(done) {
        return promise.then(function(res) {
          return res.should.equal('FOO');
        }).then((function() {
          return done();
        }), done);
      });
    });
    return describe('rejection', function() {
      var promise, reject, _ref;
      _ref = defer(), promise = _ref.promise, reject = _ref.reject;
      reject("BAR");
      it('should be a thenable', function() {
        return should.exist(promise.then);
      });
      it('should have a "done" method', function() {
        return should.exist(promise.done);
      });
      return it('should have been rejected', function(done) {
        return promise.then((function(res) {
          return done(new Error("Expected failure, got " + res));
        }), (function(err) {
          err.should.equal('BAR');
          return done();
        }));
      });
    });
  });
  describe('the result of thenning a rejected promise', function() {
    var child, defer, promise, reject, _ref;
    defer = utils.defer;
    _ref = defer(), promise = _ref.promise, reject = _ref.reject;
    child = promise.then(function(x) {
      return x * 2;
    });
    reject('FOO');
    it('should be a thenable', function() {
      return should.exist(child.then);
    });
    it('should have a "done" method', function() {
      return should.exist(child.done);
    });
    return it('should have been rejected', function(done) {
      return child.then((function(res) {
        return done(new Error("Expected failure, got " + res));
      }), (function(err) {
        err.should.equal('FOO');
        return done();
      }));
    });
  });
  describe('fold', function() {
    var fold, sum;
    fold = utils.fold;
    add = function(a, b) {
      return a + b;
    };
    sum = fold(add);
    describe('the sum of an empty list with an initial state.', function() {
      var n;
      n = sum(0, []);
      return it('should equal 0', function() {
        return n.should.eql(0);
      });
    });
    describe('the sum of a non-empty list with an initial state.', function() {
      var n;
      n = sum(100, [1, 2, 3]);
      return it('should equal 106', function() {
        return n.should.eql(106);
      });
    });
    describe('the attempt to call sum with no arguments', function() {
      var attempt;
      attempt = function() {
        return sum();
      };
      return it('should throw an error', function() {
        return attempt.should["throw"](/null/);
      });
    });
    describe('the sum of a non-empty list', function() {
      var n;
      n = sum([1, 2, 3]);
      return it('should equal 6', function() {
        return n.should.equal(6);
      });
    });
    return describe('the sum of an empty list with no init', function() {
      var n;
      n = sum([]);
      return it('should be undefined', function() {
        return n.should.be.undefined;
      });
    });
  });
  describe('take', function() {
    var take;
    take = utils.take;
    return describe('take 2', function() {
      var takeTwo;
      takeTwo = take(2);
      it('should retrieve the first 2 items from an array', function() {
        return takeTwo([1, 2, 3]).should.eql([1, 2]);
      });
      it('should retrieve as many items as possible', function() {
        return takeTwo([1]).should.eql([1]);
      });
      return it('should not alter the input', function() {
        var firstTwo, input;
        input = [1, 2, 3];
        firstTwo = takeTwo(input);
        return firstTwo.should.not.equal(input);
      });
    });
  });
  describe('filter', function() {
    var evens, filter;
    filter = utils.filter;
    evens = filter(even);
    return describe('the first 5 even numbers', function() {
      var firstFive, xs;
      xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      firstFive = evens(xs);
      it('should contain 5 items', function() {
        return firstFive.should.have.lengthOf(5);
      });
      return it('should be [2, 4, 6, 8, 10]', function() {
        return firstFive.should.eql([2, 4, 6, 8, 10]);
      });
    });
  });
  describe('uniqBy', function() {
    var uniqBy;
    uniqBy = utils.uniqBy;
    describe('using a hashable key', function() {
      var input, uniqByLength;
      uniqByLength = uniqBy(lengthOf);
      input = ["foo", "bar", "quux"];
      return it('should get only one string of each length', function() {
        return uniqByLength(input).should.eql(['foo', 'quux']);
      });
    });
    describe('using a non-hashable-key', function() {
      var a, b, c, uniqByKey, xs;
      a = {};
      b = {};
      c = {};
      xs = [
        {
          key: a
        }, {
          key: a
        }, {
          key: b
        }, {
          key: b
        }, {
          key: b
        }, {
          key: c
        }
      ];
      uniqByKey = uniqBy(function(x) {
        return x.key;
      });
      it('should reduce the list to three items', function() {
        return uniqByKey(xs).should.have.lengthOf(3);
      });
      return it('should have unique keys', function() {
        var x;
        return ((function() {
          var _i, _len, _ref, _results;
          _ref = uniqByKey(xs);
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            x = _ref[_i];
            _results.push(x.key);
          }
          return _results;
        })()).should.eql([a, b, c]);
      });
    });
    return describe('calling uniqBy with both arguments', function() {
      var oneEvenOneOdd;
      oneEvenOneOdd = uniqBy((function(x) {
        return x % 2;
      }), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
      return it('should work as it would if curried', function() {
        return oneEvenOneOdd.should.eql([1, 2]);
      });
    });
  });
  describe('any', function() {
    var any;
    any = utils.any;
    return describe('The first ten numbers', function() {
      var firstTen;
      firstTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      it('should contain a truthy value', function() {
        return any(firstTen).should.be["true"];
      });
      it('should contain an even number', function() {
        return any(firstTen, even).should.be["true"];
      });
      return it('should not contain a number above ten', function() {
        var aboveTen;
        aboveTen = function(x) {
          return x > 10;
        };
        return any(firstTen, aboveTen).should.be["false"];
      });
    });
  });
  describe('Searching in', function() {
    var find;
    find = utils.find;
    return describe('The first ten numbers', function() {
      var firstTen;
      firstTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      describe('for even numbers', function() {
        var findEven;
        findEven = find(even);
        return it('should find two', function() {
          return findEven(firstTen).should.equal(2);
        });
      });
      return describe('for numbers above ten', function() {
        var findAboveTen;
        findAboveTen = find(function(x) {
          return x > 10;
        });
        return it('should not find anything', function() {
          return should.not.exist(findAboveTen(firstTen));
        });
      });
    });
  });
  describe('escape', function() {
    var escape;
    escape = utils.escape;
    describe('escaping "foo"', function() {
      var escaped;
      escaped = escape("foo");
      return it('should not have changed anything', function() {
        return escaped.should.eql("foo");
      });
    });
    return describe('escaping "foo said "bar\'s dumb", & walked off >.<"', function() {
      var escaped;
      escaped = escape('foo said "bar\'s dumb", & walked off >.<');
      return it('should have escaped all the XML entities', function() {
        return escaped.should.eql('foo said &quot;bar&#x27;s dumb&quot;, &amp; walked off &gt;.&lt;');
      });
    });
  });
  describe('omap', function() {
    var omap;
    omap = utils.omap;
    return describe('an inverter', function() {
      var invert;
      invert = omap(function(k, v) {
        return [v, k];
      });
      return it('should invert objects', function() {
        return invert({
          a: 'b',
          c: 'd'
        }).should.eql({
          d: 'c',
          b: 'a'
        });
      });
    });
  });
  describe('copy', function() {
    var copy, original;
    copy = utils.copy;
    original = {
      a: 'b',
      c: 'd'
    };
    describe('a copy of an object', function() {
      var clone;
      clone = copy(original);
      return it('should be equal to its source', function() {
        return clone.should.eql(original);
      });
    });
    return describe('an altered clone', function() {
      var clone;
      clone = copy(original);
      clone.e = 'f';
      return it('should not be connected', function() {
        return clone.should.not.eql(original);
      });
    });
  });
  describe('partitioning', function() {
    var partition;
    partition = utils.partition;
    return describe('the first ten numbers into evens and odds', function() {
      var evensAndOdds, firstTen, intoEvensAndOdds;
      firstTen = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      intoEvensAndOdds = partition(even);
      evensAndOdds = intoEvensAndOdds(firstTen);
      return it('should produce a collection of evens, and one of odds', function() {
        return evensAndOdds.should.eql([[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]]);
      });
    });
  });
  describe('id', function() {
    var id;
    id = utils.id;
    it('should be a function', function() {
      return utils.isFunction(id).should.be["true"];
    });
    return it('should return its input', function() {
      var x, _i, _len, _ref;
      _ref = [
        true, false, 1, 3.14, "foo", {
          a: 'b'
        }, [1, 2, 3]
      ];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        x = _ref[_i];
        id(x).should.equal(x);
      }
      return should.not.exist(id(null));
    });
  });
  describe('concatMap', function() {
    var concatMap;
    concatMap = utils.concatMap;
    describe('Getting the first three powers of the first three numbers', function() {
      var f, powers, xs;
      xs = [1, 2, 3];
      f = function(x) {
        var y, _i, _results;
        _results = [];
        for (y = _i = 1; _i <= 3; y = ++_i) {
          _results.push(Math.pow(x, y));
        }
        return _results;
      };
      powers = concatMap(f);
      return it('should return [1, 1, 1, 2, 4, 8, 3, 9, 27]', function() {
        return powers(xs).should.eql([1, 1, 1, 2, 4, 8, 3, 9, 27]);
      });
    });
    describe('Building an object from a list', function() {
      var charMapper, f, xs;
      xs = ['a', 'b', 'c'];
      f = function(c) {
        var o;
        o = {};
        o[c] = c.charCodeAt(0);
        return o;
      };
      charMapper = concatMap(f);
      return it('should build {a: 97, b: 98, c: 99} from ["a", "b", "c"]', function() {
        return charMapper(xs).should.eql({
          a: 97,
          b: 98,
          c: 99
        });
      });
    });
    describe('Summing a list', function() {
      var sum, xs;
      xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
      sum = concatMap(utils.id);
      return it('should sum the numbers', function() {
        return sum(xs).should.eql(55);
      });
    });
    return describe('Building a string', function() {
      var buildString, f, xs;
      xs = [97, 98, 99];
      f = String.fromCharCode;
      buildString = concatMap(f);
      return it('should build "abc" from [97, 98, 99]', function() {
        return buildString([97, 98, 99]).should.eql("abc");
      });
    });
  });
  describe('difference', function() {
    var difference;
    difference = utils.difference;
    return it('should be say that [4,5,6] is the difference of [1,2,3,4,5,6] and [1,2,3]', function() {
      return difference([1, 2, 3, 4, 5, 6], [1, 2, 3]).should.eql([4, 5, 6]);
    });
  });
  describe('invoke', function() {
    var invoke;
    invoke = utils.invoke;
    describe('attempting to invoke a method on a null object', function() {
      var attempt, invokeMethod;
      invokeMethod = invoke('method');
      attempt = function() {
        return invokeMethod(null);
      };
      return it('should throw a helpful error', function() {
        return attempt.should["throw"](/method.*of null/);
      });
    });
    describe('the invocation of a method without arguments', function() {
      var invokeMethod, o;
      o = {
        state: 10,
        method: function() {
          return this.state * 2;
        }
      };
      invokeMethod = invoke('method');
      return it('should call the method, in the context of the object', function() {
        return invokeMethod(o).should.eql(20);
      });
    });
    describe('the invocation of a method with an argument', function() {
      var invokeMethod, o;
      o = {
        state: 10,
        method: function(x) {
          return this.state * x;
        }
      };
      invokeMethod = invoke('method', 10);
      return it('should be called in the context of that object', function() {
        return invokeMethod(o).should.eql(100);
      });
    });
    describe('the invocation of a method with several arguments', function() {
      var invokeMethod, o;
      o = {
        state: 10,
        method: function(a, b) {
          return this.state * (a + b);
        }
      };
      invokeMethod = invoke('method', 2, 3);
      return it('should be called in the context of that object', function() {
        return invokeMethod(o).should.eql(50);
      });
    });
    return describe('attempting to call a non-existent method', function() {
      var attempt, invokeMethod, o;
      o = {
        method: function() {
          return 'foo';
        }
      };
      invokeMethod = invoke('notMethod');
      attempt = function() {
        return invokeMethod(o);
      };
      return it('shoud throw a helpful error', function() {
        return attempt.should["throw"](/notMethod/);
      });
    });
  });
  return describe('invokeWith', function() {
    var invokeWith;
    invokeWith = utils.invokeWith;
    describe('attempting to invoke a method on a null object', function() {
      var attempt, invokeMethod;
      invokeMethod = invokeWith('method');
      attempt = function() {
        return invokeMethod(null);
      };
      return it('should throw a helpful error', function() {
        return attempt.should["throw"](/method.*of null/);
      });
    });
    describe('the invocation of a method without arguments', function() {
      var invokeMethod, o;
      o = {
        state: 10,
        method: function() {
          return this.state * 2;
        }
      };
      invokeMethod = invokeWith('method');
      it('should call the method, in the context of the object', function() {
        return invokeMethod(o).should.eql(20);
      });
      return it('should be identical to the equivalent function constructed with "invoke"', function() {
        return invokeMethod(o).should.eql((utils.invoke('method'))(o));
      });
    });
    describe('invoking a method with an explicit this binding', function() {
      var ctx, invokeMethod, o;
      o = {
        method: function() {
          return this.state * 2;
        }
      };
      ctx = {
        state: 7
      };
      invokeMethod = invokeWith('method', [], ctx);
      return it('should call our method on the correct binding of this', function() {
        return invokeMethod(o).should.eql(14);
      });
    });
    describe('the invocation of a method with arguments', function() {
      var invokeMethod, o;
      o = {
        state: 10,
        method: function(x) {
          return this.state * x;
        }
      };
      invokeMethod = invokeWith('method', [10]);
      return it('should be called in the context of that object', function() {
        return invokeMethod(o).should.eql(100);
      });
    });
    describe('the invocation of a method with several arguments', function() {
      var invokeMethod, o;
      o = {
        state: 10,
        method: function(a, b) {
          return this.state * (a + b);
        }
      };
      invokeMethod = invokeWith('method', [2, 3]);
      return it('should be called in the context of that object', function() {
        return invokeMethod(o).should.eql(50);
      });
    });
    return describe('attempting to call a non-existent method', function() {
      var attempt, invokeMethod, o;
      o = {
        method: function() {
          return 'foo';
        }
      };
      invokeMethod = invokeWith('notMethod');
      attempt = function() {
        return invokeMethod(o);
      };
      return it('shoud throw a helpful error', function() {
        return attempt.should["throw"](/notMethod/);
      });
    });
  });
});


},{"./lib/fixture":"V5MhzQ","should":41}],46:[function(require,module,exports){
var Model, PathInfo, TESTMODEL, should, things;

should = require('should');

Model = require('./lib/fixture').Model;

PathInfo = require('../../build/path').PathInfo;

TESTMODEL = require('./data/model').TESTMODEL;

things = ["Thing", "Employable", "Contractor", "Employee", "Manager", "CEO", "Address"];

describe('Model', function() {
  describe('new', function() {
    var testmodel;
    testmodel = new Model(TESTMODEL.model);
    it('returns a Model', function() {
      should.exist(testmodel);
      return testmodel.should.be.an.instanceOf(Model);
    });
    return it('should have classes', function() {
      return testmodel.should.have.property('classes');
    });
  });
  describe('attempting to load bad data', function() {
    var attempt;
    attempt = function() {
      return Model.load({
        classes: {
          Foo: {
            attributes: {}
          }
        }
      });
    };
    return it('should throw some kind of error', function() {
      return attempt.should.throwError();
    });
  });
  describe('#getAncestorsOf', function() {
    var testmodel;
    testmodel = Model.load(TESTMODEL.model);
    return describe('attempting to get the ancestry of a non-class', function() {
      var attempt;
      attempt = function() {
        return testmodel.getAncestorsOf('Foo');
      };
      return it('should throw a helpful error', function() {
        return attempt.should["throw"](/not a table/);
      });
    });
  });
  describe('#findSharedAncestor', function() {
    var testmodel;
    testmodel = Model.load(TESTMODEL.model);
    describe('The shared ancestor of a class and null', function() {
      var ancestor;
      ancestor = testmodel.findSharedAncestor('Employee', null);
      return it('should not exist', function() {
        return should.not.exist(ancestor);
      });
    });
    describe('The shared ancestor of a class and itself', function() {
      var ancestor;
      ancestor = testmodel.findSharedAncestor('Employable', 'Employable');
      it('should be non-null', function() {
        return should.exist(ancestor);
      });
      return it('should be itself', function() {
        return ancestor.should.equal('Employable');
      });
    });
    describe('The shared ancestor of a class and one of its ancestors', function() {
      var ancestor;
      ancestor = testmodel.findSharedAncestor('CEO', 'Employable');
      return it('is the ancestor', function() {
        return ancestor.should.equal('Employable');
      });
    });
    describe('The shared ancestor of a class and one of its sub-classes', function() {
      var ancestor;
      ancestor = testmodel.findSharedAncestor('Employable', 'CEO');
      return it('is the class', function() {
        return ancestor.should.equal('Employable');
      });
    });
    return describe('The shared ancestor of cousins', function() {
      var ancestor;
      ancestor = testmodel.findSharedAncestor('Employee', 'Company');
      return it('is the closest common ancestor', function() {
        return ancestor.should.equal('HasAddress');
      });
    });
  });
  describe('#getSubclassesOf', function() {
    var testmodel;
    testmodel = new Model(TESTMODEL.model);
    describe('attempting to get subclasses of a non-class', function() {
      var attempt;
      attempt = function() {
        return testmodel.getSubclassesOf(null);
      };
      return it('should throw a helpful error', function() {
        return attempt.should["throw"](/not a table/);
      });
    });
    describe('the subclasses of Manager', function() {
      var managerTypes;
      managerTypes = testmodel.getSubclassesOf('Manager');
      return it('should include "CEO"', function() {
        return managerTypes.should.include('CEO');
      });
    });
    describe('the subclasses of HasAddress', function() {
      var addressables;
      addressables = testmodel.getSubclassesOf('HasAddress');
      it('should include "CEO"', function() {
        return addressables.should.include('CEO');
      });
      return it('should include "Company"', function() {
        return addressables.should.include('Company');
      });
    });
    describe('the subclasses of Employable', function() {
      var employables;
      employables = testmodel.getSubclassesOf('Employable');
      it('should include "CEO"', function() {
        return employables.should.include('CEO');
      });
      it('should include "Contractor"', function() {
        return employables.should.include('Contractor');
      });
      return it('should not include "Address"', function() {
        return employables.should.not.include('Address');
      });
    });
    return describe('Things', function() {
      var foundThings;
      foundThings = testmodel.getSubclassesOf('Thing');
      return it('should include all the things that are things', function() {
        return foundThings.should.eql(things);
      });
    });
  });
  describe('#findCommonType', function() {
    var testmodel;
    testmodel = new Model(TESTMODEL.model);
    it('should determine that the common class of a class is itself', function() {
      return testmodel.findCommonType(['Employee']).should.equal('Employee');
    });
    it('should say the common class of two examples of the same class is that class', function() {
      return testmodel.findCommonType(['Employee', 'Employee']).should.equal('Employee');
    });
    it('should say the common type of a class and its super-type is the super-type', function() {
      return testmodel.findCommonType(['Manager', 'Employee']).should.equal('Employee');
    });
    it('should say the common type of a class and one of its sub-types is the super-type', function() {
      return testmodel.findCommonType(['Manager', 'CEO']).should.equal('Manager');
    });
    it('should return a non-existent value for incompatible classes', function() {
      return should.not.exist(testmodel.findCommonType(['Department', 'CEO']));
    });
    it('should return the mutual super class of compatible classes', function() {
      return testmodel.findCommonType(['CEO', 'Address']).should.equal('Thing');
    });
    it('should handle more than two classes', function() {
      var types;
      types = ['Employee', 'Contractor', 'Manager'];
      return testmodel.findCommonType(types).should.equal('Employable');
    });
    return it('should determine that the set of all things are things', function() {
      return testmodel.findCommonType(things).should.equal('Thing');
    });
  });
  describe('#getPathInfo', function() {
    var testmodel;
    testmodel = new Model(TESTMODEL.model);
    return it('should be able to make a path', function() {
      var path;
      path = testmodel.makePath('Employee.age');
      should.exist(path);
      return path.should.be.an.instanceOf(PathInfo);
    });
  });
  return describe('NUMERIC_TYPES', function() {
    it('should include whole number types', function() {
      Model.NUMERIC_TYPES.should.include('int');
      Model.NUMERIC_TYPES.should.include('Integer');
      Model.NUMERIC_TYPES.should.include('long');
      return Model.NUMERIC_TYPES.should.include('Long');
    });
    return it('should include fractional types', function() {
      Model.NUMERIC_TYPES.should.include('float');
      Model.NUMERIC_TYPES.should.include('Float');
      Model.NUMERIC_TYPES.should.include('double');
      return Model.NUMERIC_TYPES.should.include('Double');
    });
  });
});


},{"../../build/path":21,"./data/model":64,"./lib/fixture":"V5MhzQ","should":41}],47:[function(require,module,exports){
var Model, TESTMODEL, should;

should = require('should');

Model = require('./lib/fixture').Model;

TESTMODEL = require('./data/model').TESTMODEL;

describe('Table', function() {
  var Employee, testmodel;
  testmodel = new Model(TESTMODEL.model);
  Employee = testmodel.classes.Employee;
  it('should stringify correctly', function() {
    var expected;
    expected = "[Table name=Employee, " + "fields=[fullTime,age,end,name,id,department,departmentThatRejectedMe,employmentPeriod," + "address,simpleObjects]]";
    return Employee.toString().should.equal(expected);
  });
  return it('should know about its parents', function() {
    return Employee.parents().should.include('Employable');
  });
});


},{"./data/model":64,"./lib/fixture":"V5MhzQ","should":41}],48:[function(require,module,exports){
var Fixture, Model, Query, TESTMODEL, get, options;

TESTMODEL = require('./data/model').TESTMODEL;

Fixture = require('./lib/fixture');

Query = Fixture.Query, Model = Fixture.Model;

get = Fixture.funcutils.get;

options = {
  intermine: {
    view: ["Employee.name", "Employee.age", "Employee.department.name"],
    constraints: [
      {
        path: "Employee.department.name",
        op: '=',
        value: "Sales*"
      }, {
        path: "Employee.age",
        op: ">",
        value: "50"
      }
    ]
  },
  sqlish: {
    from: "Employee",
    select: ["name", "age", "department.name"],
    where: {
      'department.name': 'Sales*',
      'age': {
        gt: 50
      }
    }
  }
};

describe('Query', function() {
  var k, testmodel, v, _fn;
  testmodel = new Model(TESTMODEL.model);
  describe('new', function() {
    it('should make a new query', function() {
      var q;
      q = new Query();
      return q.should.be.an.instanceOf(Query);
    });
    it('should set the root based on the "root" option', function() {
      var q;
      q = new Query({
        root: 'Gene'
      });
      return q.root.should.equal('Gene');
    });
    return it('should set the root based on the "from" option', function() {
      var q;
      q = new Query({
        from: 'Gene'
      });
      return q.root.should.equal('Gene');
    });
  });
  _fn = function(k, v) {
    return describe("handles " + k + " options", function() {
      var q;
      q = new Query(v);
      it('can interpret views', function() {
        return q.views.should.eql(options.intermine.view);
      });
      it('can derive root', function() {
        return q.root.should.eql('Employee');
      });
      return it('can interpret constraints', function() {
        var cs;
        cs = q.constraints;
        cs.should.have.lengthOf(2);
        cs.map(get('op')).should.eql(['=', '>']);
        return cs.map(get('path')).should.eql(['Employee.department.name', 'Employee.age']);
      });
    });
  };
  for (k in options) {
    v = options[k];
    _fn(k, v);
  }
  describe('Query syntaxes', function() {
    var qsqlish, qtrad;
    qtrad = new Query(options.intermine);
    qsqlish = new Query(options.sqlish);
    return it('should be synonymous', function() {
      return qtrad.toXML().should.equal(qsqlish.toXML());
    });
  });
  describe('toJSON', function() {
    var asStr, q;
    q = new Query(options.intermine);
    asStr = '{"constraintLogic":"","from":"Employee",' + '"select":["name","age","department.name"],"orderBy":[],' + '"joins":[],"where":[{"path":"department.name","op":"=",' + '"value":"Sales*"},{"path":"age","op":">","value":"50"}]}';
    it('should be what we think', function() {
      return q.toJSON().should.eql({
        from: 'Employee',
        select: ['name', 'age', 'department.name'],
        orderBy: [],
        constraintLogic: '',
        joins: [],
        where: [
          {
            path: "department.name",
            op: '=',
            value: "Sales*"
          }, {
            path: "age",
            op: ">",
            value: "50"
          }
        ]
      });
    });
    it('should produce unconnected objects', function() {
      var j1, j2;
      j1 = q.toJSON();
      j2 = q.toJSON();
      j1.select.push('foo');
      j1.select.should.include('foo');
      j2.select.should.not.include('foo');
      return q.views.should.not.include('foo');
    });
    it('should clone the values in multi-value constraints', function() {
      var j, q2;
      q2 = new Query({
        select: 'Employee.name',
        where: [
          {
            path: 'name',
            op: 'ONE OF',
            values: ['x', 'y', 'z']
          }
        ]
      });
      j = q2.toJSON();
      j.where[0].values.should.eql(['x', 'y', 'z']);
      j.where[0].values.push('foo');
      return q2.constraints[0].values.should.not.include('foo');
    });
    it('should produce objects suitable as query arguments', function() {
      var j, q2;
      j = q.toJSON();
      q2 = new Query(j);
      q2.toJSON().should.eql(j);
      return q2.views.should.include('Employee.age');
    });
    return it('should then stringify correctly', function() {
      return (JSON.stringify(q)).should.eql(asStr);
    });
  });
  describe('addToSelect(path)', function() {
    var q;
    q = new Query({
      from: 'Employee',
      select: ['name', 'age']
    });
    q.model = testmodel;
    return it('should add views to the select list', function() {
      q.addToSelect('fullTime');
      return q.isInView('Employee.fullTime').should.be["true"];
    });
  });
  describe('removeFromSelect(path)', function() {
    var q;
    q = new Query({
      from: 'Employee',
      select: ['name', 'age', 'fullTime']
    });
    q.model = testmodel;
    return it('should remove views to the select list', function() {
      var changes, removals;
      removals = changes = 0;
      q.on('remove:view', function() {
        return removals++;
      });
      q.bind('change:views', function() {
        return changes++;
      });
      q.removeFromSelect('Employee.age');
      q.isInView('Employee.fullTime').should.be["true"];
      q.isInView('fullTime').should.be["true"];
      q.isInView('age').should.not.be["true"];
      q.isInView('Employee.age').should.not.be["true"];
      q.removeFromSelect('fullTime');
      q.isInView('Employee.name').should.be["true"];
      q.isInView('name').should.be["true"];
      q.isInView('fullTime').should.not.be["true"];
      q.isInView('Employee.fullTime').should.not.be["true"];
      removals.should.equal(2);
      return changes.should.equal(2);
    });
  });
  describe('#addToSelect(path)', function() {
    var q;
    q = new Query({
      from: 'Employee',
      select: ['name', 'age', 'fullTime']
    });
    q.model = testmodel;
    it('should throw errors if there are duplicate views', function() {
      return (function() {
        return q.addToSelect('Employee.name');
      }).should["throw"](/already/);
    });
    it('should throw errors if the addenda contain duplicates', function() {
      return (function() {
        return q.addToSelect(['Employee.end', 'Employee.end']);
      }).should["throw"](/multiple/);
    });
    return it('should not have added more views', function() {
      return q.views.length.should.equal(3);
    });
  });
  describe('#clone()', function() {
    var orig;
    orig = new Query({
      from: 'Employee',
      select: ['name']
    });
    it('should produce unconnected clones', function() {
      var clone;
      clone = orig.clone();
      clone.addToSelect('age');
      orig.views.should.have.lengthOf(1);
      return clone.views.should.have.lengthOf(2);
    });
    return it('cloning should not include events by default', function() {
      var clone, n, y;
      y = n = 0;
      orig.on('test:event', function() {
        return y++;
      });
      clone = orig.clone();
      clone.on('test:event', function() {
        return n++;
      });
      orig.trigger('test:event');
      y.should.equal(1);
      return n.should.equal(0);
    });
  });
  describe('#off', function() {
    var f, g, n;
    n = 0;
    f = function() {
      return n++;
    };
    g = function() {
      return n++;
    };
    this.beforeAll(function() {
      var q;
      q = new Query();
      q.on('add:constraint', f);
      q.on('add:constraint', g);
      q.addConstraint({
        path: 'Foo.bar',
        op: 'IS NULL'
      });
      q.off('add:constraint', f);
      q.addConstraint({
        path: 'Foo.baz',
        op: 'IS NULL'
      });
      q.off('add:constraint');
      return q.addConstraint({
        path: 'Foo.fop',
        op: 'IS NULL'
      });
    });
    return it('should have fired three events in total', function() {
      return n.should.equal(3);
    });
  });
  return describe('#once', function() {
    var f, n;
    n = 0;
    f = function() {
      return n++;
    };
    this.beforeAll(function() {
      var q;
      q = new Query();
      q.once('add:constraint', f);
      q.addConstraint({
        path: 'Foo.bar',
        op: 'IS NULL'
      });
      return q.addConstraint({
        path: 'Foo.baz',
        op: 'IS NULL'
      });
    });
    return it('should have fired once in total', function() {
      return n.should.equal(1);
    });
  });
});


},{"./data/model":64,"./lib/fixture":"V5MhzQ"}],49:[function(require,module,exports){
var Fixture, eventually, prepare, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare;

describe('Query', function() {
  return describe('expandStar', function() {
    var service;
    service = new Fixture().service;
    return describe("#select(['*'])", function() {
      this.beforeEach(prepare(function() {
        return service.query({
          root: 'Employee'
        });
      }));
      it('should expand stars to the summary fields', eventually(function(q) {
        var expected_views;
        expected_views = ['Employee.name', 'Employee.department.name', 'Employee.department.manager.name', 'Employee.department.company.name', 'Employee.fullTime', 'Employee.address.address'];
        q.select(['*']);
        return q.views.should.eql(expected_views);
      }));
      it('should expand double stars to all fields', eventually(function(q) {
        var expected_views;
        expected_views = ['Employee.name', 'Employee.department.name', 'Employee.department.manager.name', 'Employee.department.company.name', 'Employee.fullTime', 'Employee.address.address', 'Employee.age', 'Employee.end', 'Employee.id'];
        q.select(['**']);
        return q.views.should.eql(expected_views);
      }));
      return it('should be able to expand paths ending in a star', eventually(function(q) {
        var expected_views;
        expected_views = ['Employee.department.name'];
        q.select(['department.*']);
        return q.views.should.eql(expected_views);
      }));
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],50:[function(require,module,exports){
var Fixture, Promise, eventually, prepare, sqlish, trad, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

Promise = require('promise');

trad = {
  view: ["Employee.name", "Employee.age", "Employee.department.name"],
  constraints: [
    {
      path: "Employee.department.name",
      op: '=',
      value: "Sales*"
    }, {
      path: "Employee.age",
      op: ">",
      value: "50"
    }
  ]
};

sqlish = {
  from: "Employee",
  select: ["name", "age", "department.name"],
  where: {
    'department.name': 'Sales*',
    'age': {
      gt: 50
    }
  }
};

describe('The equivalence of syntaxes', function() {
  var service;
  service = new Fixture().service;
  this.beforeAll(prepare(function() {
    return Promise.all([service.query(trad), service.query(sqlish)]);
  }));
  return it('should mean that both syntaxes produce the same XML', eventually(function(_arg) {
    var q1, q2;
    q1 = _arg[0], q2 = _arg[1];
    return q1.toXML().should.equal(q2.toXML());
  }));
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","promise":38}],51:[function(require,module,exports){
var Fixture, Query, arrays, constraintsTest, eventually, expected, headless, mapping, mappingWithNull, operatorAliases, prepare, _ref;

Query = (Fixture = require('./lib/fixture')).Query;

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare;

expected = [
  {
    path: 'Employee.department.manager',
    type: 'CEO'
  }, {
    path: 'Employee.name',
    op: '=',
    value: 'methuselah'
  }, {
    path: 'Employee.age',
    op: '>',
    value: 1000
  }, {
    path: 'Employee.end',
    op: 'IS NULL'
  }, {
    path: 'Employee.department.name',
    op: 'ONE OF',
    values: ['Sales', 'Accounting']
  }, {
    path: 'Employee.address',
    op: 'LOOKUP',
    value: 'Springfield',
    extraValue: 'Illinois'
  }
];

headless = [
  {
    path: 'department.manager',
    type: 'CEO'
  }, {
    path: 'name',
    op: '=',
    value: 'methuselah'
  }, {
    path: 'age',
    op: '>',
    value: 1000
  }, {
    path: 'end',
    op: 'IS NULL'
  }, {
    path: 'department.name',
    op: 'ONE OF',
    values: ['Sales', 'Accounting']
  }, {
    path: 'address',
    op: 'LOOKUP',
    value: 'Springfield',
    extraValue: 'Illinois'
  }
];

arrays = [['department.manager', 'CEO'], ['name', '=', 'methuselah'], ['age', '>', 1000], ['end', 'IS NULL'], ['department.name', 'ONE OF', ['Sales', 'Accounting']], ['address', 'LOOKUP', 'Springfield', 'Illinois']];

operatorAliases = [['department.manager', 'CEO'], ['name', 'eq', 'methuselah'], ['age', 'gt', 1000], ['end', 'is null'], ['department.name', 'one of', ['Sales', 'Accounting']], ['address', 'lookup', 'Springfield', 'Illinois']];

mapping = {
  'department.manager': {
    isa: 'CEO'
  },
  name: 'methuselah',
  age: {
    gt: 1000
  },
  end: 'is null',
  'department.name': ['Sales', 'Accounting'],
  address: {
    lookup: 'Springfield',
    extraValue: 'Illinois'
  }
};

mappingWithNull = {
  'department.manager': {
    isa: 'CEO'
  },
  name: 'methuselah',
  age: {
    gt: 1000
  },
  end: null,
  'department.name': ['Sales', 'Accounting'],
  address: {
    lookup: 'Springfield',
    extraValue: 'Illinois'
  }
};

constraintsTest = function(input) {
  return function() {
    it('should work using the constraints key', function() {
      var q;
      q = new Query({
        root: 'Employee',
        constraints: input
      });
      return q.constraints.should.eql(expected);
    });
    it('should work using the where key', function() {
      var q;
      q = new Query({
        from: 'Employee',
        where: input
      });
      return q.constraints.should.eql(expected);
    });
    it('should be able to add them one by one using #addConstraint', function() {
      var c, q, _i, _len;
      q = new Query({
        root: 'Employee'
      });
      if (input.length != null) {
        for (_i = 0, _len = input.length; _i < _len; _i++) {
          c = input[_i];
          q.addConstraint(c);
        }
        return q.constraints.should.eql(expected);
      } else {
        return true.should.equal["true"];
      }
    });
    return it('should be able to add them all at once using #addConstraints', function() {
      var q;
      q = new Query({
        root: 'Employee'
      });
      q.addConstraints(input);
      return q.constraints.should.eql(expected);
    });
  };
};

describe('Defining Query constraints', function() {
  describe('using the internal verbose format', constraintsTest(expected));
  describe('using headless paths', constraintsTest(headless));
  describe('using array encoding', constraintsTest(arrays));
  describe('using operator aliases', constraintsTest(operatorAliases));
  describe('using an mapping', constraintsTest(mapping));
  return describe('using a null value', constraintsTest(mappingWithNull));
});

describe('Query', function() {
  return describe('#isConstrained', function() {
    var service;
    service = new Fixture().service;
    this.beforeAll(prepare(function() {
      return service.query({
        from: 'Employee',
        select: 'name',
        where: {
          age: 10,
          'department.manager': {
            isa: 'CEO'
          },
          'address.address': 'IS NOT NULL',
          'department.company': {
            lookup: '*Hogg'
          }
        }
      });
    }));
    it('should say that "Employee.age" is constrained', eventually(function(q) {
      return q.isConstrained('Employee.age').should.be["true"];
    }));
    it('should say that "Employee.department.company" is constrained', eventually(function(q) {
      return q.isConstrained('Employee.department.company').should.be["true"];
    }));
    it('should say that "Employee.address.address" is constrained', eventually(function(q) {
      return q.isConstrained('Employee.address.address').should.be["true"];
    }));
    it('should not say that "Employee.address" is constrained', eventually(function(q) {
      return q.isConstrained('Employee.address').should.not.be["true"];
    }));
    it('should not say that "Employee.department.manager" is constrained', eventually(function(q) {
      return q.isConstrained('Employee.department.manager').should.not.be["true"];
    }));
    it('should not say that "Employee.department.company.name" is constrained', eventually(function(q) {
      return q.isConstrained('Employee.department.company.name').should.not.be["true"];
    }));
    it('should not say that "departmentThatRejectedMe.name" is constrained', eventually(function(q) {
      return q.isConstrained('Employee.departmentThatRejectedMe.name').should.not.be["true"];
    }));
    return it('should say that and attr of "Employee.address" is constrained', eventually(function(q) {
      return q.isConstrained('Employee.address', true).should.be["true"];
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],52:[function(require,module,exports){
var process=require("__browserify_process");var Fixture, Model, PathInfo, Promise, TESTMODEL, eventually, prepare, service, shouldFail, testmodel, _ref;

if (process.env.IMJS_COV) {
  Model = require("../../build-cov/model").Model;
  PathInfo = require("../../build-cov/path").PathInfo;
} else {
  Model = require("../../build/service").Model;
  PathInfo = require("../../build/path").PathInfo;
}

Promise = require('promise');

_ref = require('./lib/utils'), shouldFail = _ref.shouldFail, prepare = _ref.prepare, eventually = _ref.eventually;

Fixture = require('./lib/fixture');

TESTMODEL = require('./data/model').TESTMODEL;

testmodel = new Model(TESTMODEL.model);

service = (new Fixture).service;

testmodel.service = service;

describe('PathInfo', function() {
  this.afterEach(PathInfo.flushCache);
  describe('Illegal paths', function() {
    return it('should be detected upon creation', function() {
      (function() {
        return testmodel.makePath('Foo.bar');
      }).should["throw"]();
      return (function() {
        return testmodel.makePath('Department.employees.seniority');
      }).should["throw"]();
    });
  });
  describe('root', function() {
    var path;
    path = null;
    this.beforeEach(function() {
      return path = testmodel.makePath('Employee');
    });
    it('should stringify with toString()', function() {
      return path.toString().should.equal('Employee');
    });
    it('should stringify with toPathString()', function() {
      return path.toPathString().should.equal('Employee');
    });
    it('should stringify with string concatenation', function() {
      return ('' + path).should.equal('Employee');
    });
    describe('#getType()', function() {
      return it('should report an appropriate type', function() {
        return path.getType().should.have.property('name', 'Employee');
      });
    });
    describe('#containsCollection()', function() {
      return it('should not contain a collection', function() {
        return path.containsCollection().should.be["false"];
      });
    });
    describe('#getParent()', function() {
      return it('should throw an error', function() {
        return path.getParent.should["throw"]();
      });
    });
    describe('#append(field)', function() {
      it('should return a new child path', function() {
        return path.append('id').getType().should.equal('Integer');
      });
      return it("should throw if the field doesn't exist", function() {
        return (function() {
          return path.append('postCode');
        }).should["throw"]();
      });
    });
    describe('#getChildNodes()', function() {
      it('should find 10 child nodes', function() {
        return path.getChildNodes().length.should.equal(10);
      });
      it('should find Employee.department', function() {
        var n;
        return ((function() {
          var _i, _len, _ref1, _results;
          _ref1 = path.getChildNodes();
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            n = _ref1[_i];
            _results.push(n.toString());
          }
          return _results;
        })()).should.include('Employee.department');
      });
      return it('should produce nodes that can find their parent', function() {
        var n, _i, _len, _ref1, _results;
        _ref1 = path.getChildNodes();
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          n = _ref1[_i];
          _results.push(n.getParent().equals(path).should.be["true"]);
        }
        return _results;
      });
    });
    describe('#isRoot()', function() {
      return it('should return true', function() {
        return path.isRoot().should.be["true"];
      });
    });
    describe('#isAttribute()', function() {
      return it('should return false', function() {
        return path.isAttribute().should.be["false"];
      });
    });
    describe('#isReference', function() {
      return it('should return false', function() {
        return path.isReference().should.be["false"];
      });
    });
    describe('#isCollection', function() {
      return it('should return false', function() {
        return path.isCollection().should.be["false"];
      });
    });
    describe('#isClass', function() {
      return it('should return true', function() {
        return path.isClass().should.be["true"];
      });
    });
    return describe('#isa(type)', function() {
      it('should say it is an Employee', function() {
        return path.isa('Employee').should.be["true"];
      });
      it('should say it is a Thing', function() {
        return path.isa('Thing').should.be["true"];
      });
      it('should not say it is a Department', function() {
        return path.isa('Department').should.not.be["true"];
      });
      return it('should not say it is an int', function() {
        return path.isa('int').should.not.be["true"];
      });
    });
  });
  describe('Simple attribute', function() {
    var path;
    path = testmodel.makePath('Employee.age');
    it('should stringify with toString()', function() {
      return path.toString().should.equal('Employee.age');
    });
    it('should stringify with toPathString()', function() {
      return path.toPathString().should.equal('Employee.age');
    });
    it('should stringify with string concatenation', function() {
      return ('' + path).should.equal('Employee.age');
    });
    describe('#getType()', function() {
      return it('should report an appropriate type', function() {
        return path.getType().should.equal('int');
      });
    });
    describe('#getDisplayName', function() {
      describe('promise API', function() {
        this.beforeAll(prepare(path.getDisplayName));
        return it('should be a nice human readable string', eventually(function(name) {
          return name.should.equal("Employee > Years Alive");
        }));
      });
      return describe('callback api', function() {
        return it('should yield the name', function(done) {
          return path.getDisplayName(function(err, name) {
            var e;
            if (err != null) {
              return done(err);
            }
            try {
              name.should.equal("Employee > Years Alive");
              return done();
            } catch (_error) {
              e = _error;
              return done(e);
            }
          });
        });
      });
    });
    describe('#containsCollection()', function() {
      return it('should not contain a collection', function() {
        return path.containsCollection().should.be["false"];
      });
    });
    describe('#getParent()', function() {
      return it('should have a parent of the right type', function() {
        return path.getParent().getType().name.should.equal('Employee');
      });
    });
    describe('#append(field)', function() {
      return it('should throw an error', function() {
        return path.append.should["throw"]();
      });
    });
    describe('#isRoot()', function() {
      return it('should return false', function() {
        return path.isRoot().should.be["false"];
      });
    });
    describe('#isAttribute()', function() {
      return it('should return true', function() {
        return path.isAttribute().should.be["true"];
      });
    });
    describe('#isReference', function() {
      return it('should return false', function() {
        return path.isReference().should.be["false"];
      });
    });
    describe('#isCollection', function() {
      return it('should return false', function() {
        return path.isCollection().should.be["false"];
      });
    });
    describe('#isClass', function() {
      return it('should return false', function() {
        return path.isClass().should.be["false"];
      });
    });
    return describe('#isa(type)', function() {
      it('should not say it is an Employee', function() {
        return path.isa('Employee').should.not.be["true"];
      });
      it('should not say it is a Thing', function() {
        return path.isa('Thing').should.not.be["true"];
      });
      it('should not say it is a Department', function() {
        return path.isa('Department').should.not.be["true"];
      });
      return it('should say it is an int', function() {
        return path.isa('int').should.be["true"];
      });
    });
  });
  describe('Simple reference', function() {
    var path;
    path = testmodel.makePath('Employee.address');
    it('should stringify with toString()', function() {
      return path.toString().should.equal('Employee.address');
    });
    it('should stringify with toPathString()', function() {
      return path.toPathString().should.equal('Employee.address');
    });
    it('should stringify with string concatenation', function() {
      return ('' + path).should.equal('Employee.address');
    });
    describe('#getType()', function() {
      return it('should report an appropriate type', function() {
        return path.getType().name.should.equal('Address');
      });
    });
    describe('#containsCollection()', function() {
      return it('should not contain a collection', function() {
        return path.containsCollection().should.be["false"];
      });
    });
    describe('#getParent()', function() {
      return it('should have a parent of the right type', function() {
        return path.getParent().getType().name.should.equal('Employee');
      });
    });
    describe('#append(field)', function() {
      it('should return the appropriate child path', function() {
        return path.append('id').getType().should.equal('Integer');
      });
      return it("should throw if the field doesn't exist", function() {
        return (function() {
          return path.append('postCode');
        }).should["throw"]();
      });
    });
    describe('#isRoot()', function() {
      return it('should return false', function() {
        return path.isRoot().should.be["false"];
      });
    });
    describe('#isAttribute()', function() {
      return it('should return false', function() {
        return path.isAttribute().should.be["false"];
      });
    });
    describe('#isReference', function() {
      return it('should return true', function() {
        return path.isReference().should.be["true"];
      });
    });
    describe('#isCollection', function() {
      return it('should return false', function() {
        return path.isCollection().should.be["false"];
      });
    });
    describe('#isClass', function() {
      return it('should return true', function() {
        return path.isClass().should.be["true"];
      });
    });
    return describe('#isa(type)', function() {
      it('should not say it is an Employee', function() {
        return path.isa('Employee').should.not.be["true"];
      });
      it('should say it is a Thing', function() {
        return path.isa('Thing').should.be["true"];
      });
      it('should not say it is a Department', function() {
        return path.isa('Department').should.not.be["true"];
      });
      return it('should not say it is an int', function() {
        return path.isa('int').should.not.be["true"];
      });
    });
  });
  describe('Simple collection', function() {
    var path;
    path = testmodel.makePath('Department.employees');
    it('should stringify with toString()', function() {
      return path.toString().should.equal('Department.employees');
    });
    it('should stringify with toPathString()', function() {
      return path.toPathString().should.equal('Department.employees');
    });
    it('should stringify with string concatenation', function() {
      return ('' + path).should.equal('Department.employees');
    });
    describe('#getType()', function() {
      return it('should report an appropriate type', function() {
        return path.getType().name.should.equal('Employee');
      });
    });
    describe('#containsCollection()', function() {
      return it('should contain a collection', function() {
        return path.containsCollection().should.be["true"];
      });
    });
    describe('#getParent()', function() {
      return it('should have a parent of the right type', function() {
        return path.getParent().getType().name.should.equal('Department');
      });
    });
    describe('#append(field)', function() {
      it('should return the appropriate child path', function() {
        return path.append('id').getType().should.equal('Integer');
      });
      return it("should throw if the field doesn't exist", function() {
        return (function() {
          return path.append('postCode');
        }).should["throw"]();
      });
    });
    describe('#isRoot()', function() {
      return it('should return false', function() {
        return path.isRoot().should.be["false"];
      });
    });
    describe('#isAttribute()', function() {
      return it('should return false', function() {
        return path.isAttribute().should.be["false"];
      });
    });
    describe('#isReference', function() {
      return it('should return true', function() {
        return path.isReference().should.be["true"];
      });
    });
    describe('#isCollection', function() {
      return it('should return true', function() {
        return path.isCollection().should.be["true"];
      });
    });
    describe('#isClass', function() {
      return it('should return true', function() {
        return path.isClass().should.be["true"];
      });
    });
    return describe('#isa(type)', function() {
      it('should say it is an Employee', function() {
        return path.isa('Employee').should.be["true"];
      });
      it('should say it is a Thing', function() {
        return path.isa('Thing').should.be["true"];
      });
      it('should not say it is a Department', function() {
        return path.isa('Department').should.not.be["true"];
      });
      return it('should not say it is an int', function() {
        return path.isa('int').should.not.be["true"];
      });
    });
  });
  describe('Subclassed path', function() {
    var path;
    path = testmodel.makePath('Department.employees', {
      'Department.employees': 'CEO'
    });
    describe('#getType()', function() {
      return it('should report the subclass', function() {
        return path.getType().name.should.equal('CEO');
      });
    });
    describe('#containsCollection()', function() {
      return it('should contain a collection', function() {
        return path.containsCollection().should.be["true"];
      });
    });
    describe('#getParent()', function() {
      return it('should have a parent of the right type', function() {
        return path.getParent().getType().name.should.equal('Department');
      });
    });
    describe('#append(field)', function() {
      it('should return the appropriate child path', function() {
        path.append('seniority').getType().should.equal('Integer');
        return path.append('company').getType().name.should.equal('Company');
      });
      return it("should throw if the field doesn't exist", function() {
        return (function() {
          return path.append('postCode');
        }).should["throw"]();
      });
    });
    describe('#isRoot()', function() {
      return it('should return false', function() {
        return path.isRoot().should.be["false"];
      });
    });
    describe('#isAttribute()', function() {
      return it('should return false', function() {
        return path.isAttribute().should.be["false"];
      });
    });
    describe('#isReference', function() {
      return it('should return true', function() {
        return path.isReference().should.be["true"];
      });
    });
    describe('#isCollection', function() {
      return it('should return true', function() {
        return path.isCollection().should.be["true"];
      });
    });
    describe('#isClass', function() {
      return it('should return true', function() {
        return path.isClass().should.be["true"];
      });
    });
    return describe('#isa(type)', function() {
      it('should say it is an Employee', function() {
        return path.isa('Employee').should.be["true"];
      });
      it('should say it is a Thing', function() {
        return path.isa('Thing').should.be["true"];
      });
      it('should not say it is a Department', function() {
        return path.isa('Department').should.not.be["true"];
      });
      return it('should not say it is an int', function() {
        return path.isa('int').should.not.be["true"];
      });
    });
  });
  describe('Long reference chain', function() {
    var path;
    path = testmodel.makePath('Employee.department.company.address');
    it('should stringify with toString()', function() {
      return path.toString().should.equal('Employee.department.company.address');
    });
    it('should stringify with toPathString()', function() {
      return path.toPathString().should.equal('Employee.department.company.address');
    });
    it('should stringify with string concatenation', function() {
      return ('' + path).should.equal('Employee.department.company.address');
    });
    describe('#getType()', function() {
      return it('should report an appropriate type', function() {
        return path.getType().name.should.equal('Address');
      });
    });
    describe('#containsCollection()', function() {
      return it('should not contain a collection', function() {
        return path.containsCollection().should.not.be["true"];
      });
    });
    describe('#getParent()', function() {
      return it('should have a parent of the right type', function() {
        return path.getParent().getType().name.should.equal('Company');
      });
    });
    describe('#append(field)', function() {
      it('should return the appropriate child path', function() {
        return path.append('id').getType().should.equal('Integer');
      });
      return it("should throw if the field doesn't exist", function() {
        return (function() {
          return path.append('postCode');
        }).should["throw"]();
      });
    });
    describe('#isRoot()', function() {
      return it('should return false', function() {
        return path.isRoot().should.be["false"];
      });
    });
    describe('#isAttribute()', function() {
      return it('should return false', function() {
        return path.isAttribute().should.be["false"];
      });
    });
    describe('#isReference', function() {
      return it('should return true', function() {
        return path.isReference().should.be["true"];
      });
    });
    describe('#isCollection', function() {
      return it('should return false', function() {
        return path.isCollection().should.be["false"];
      });
    });
    describe('#isClass', function() {
      return it('should return true', function() {
        return path.isClass().should.be["true"];
      });
    });
    return describe('#isa(type)', function() {
      it('should not say it is an Employee', function() {
        return path.isa('Employee').should.not.be["true"];
      });
      it('should say it is a Thing', function() {
        return path.isa('Thing').should.be["true"];
      });
      it('should not say it is a Department', function() {
        return path.isa('Department').should.not.be["true"];
      });
      return it('should not say it is an int', function() {
        return path.isa('int').should.not.be["true"];
      });
    });
  });
  describe('A path with a custom name', function() {
    var path;
    path = testmodel.makePath('Company.departments.manager.address');
    path.displayName = "FOO";
    return describe('#getDisplayName', function() {
      this.beforeAll(prepare(path.getDisplayName));
      this.afterEach(PathInfo.flushCache);
      return it('should promise to return the name we gave it', eventually(function(name) {
        return name.should.equal("FOO");
      }));
    });
  });
  return describe('Long reference with collection chain', function() {
    var path;
    PathInfo.flushCache();
    path = testmodel.makePath('Company.departments.manager.address');
    it('should stringify with toString()', function() {
      return path.toString().should.equal('Company.departments.manager.address');
    });
    it('should stringify with toPathString()', function() {
      return path.toPathString().should.equal('Company.departments.manager.address');
    });
    it('should stringify with string concatenation', function() {
      return ('' + path).should.equal('Company.departments.manager.address');
    });
    describe('#getPathInfo', function() {
      this.beforeAll(prepare(path.getDisplayName));
      return it('should promise to return a name', eventually(function(name) {
        return name.should.equal("Company > Departments > Manager > Address");
      }));
    });
    describe('#getType()', function() {
      return it('should report an appropriate type', function() {
        return path.getType().name.should.equal('Address');
      });
    });
    describe('#containsCollection()', function() {
      return it('should contain a collection', function() {
        return path.containsCollection().should.be["true"];
      });
    });
    describe('#getParent()', function() {
      return it('should have a parent of the right type', function() {
        return path.getParent().getType().name.should.equal('Manager');
      });
    });
    describe('#append(field)', function() {
      it('should return the appropriate child path', function() {
        return path.append('id').getType().should.equal('Integer');
      });
      return it("should throw if the field doesn't exist", function() {
        return (function() {
          return path.append('postCode');
        }).should["throw"]();
      });
    });
    describe('#isRoot()', function() {
      return it('should return false', function() {
        return path.isRoot().should.be["false"];
      });
    });
    describe('#isAttribute()', function() {
      return it('should return false', function() {
        return path.isAttribute().should.be["false"];
      });
    });
    describe('#isReference', function() {
      return it('should return true', function() {
        return path.isReference().should.be["true"];
      });
    });
    describe('#isCollection', function() {
      return it('should return false', function() {
        return path.isCollection().should.not.be["true"];
      });
    });
    describe('#isClass', function() {
      return it('should return true', function() {
        return path.isClass().should.be["true"];
      });
    });
    return describe('#isa(type)', function() {
      it('should not say it is an Employee', function() {
        return path.isa('Employee').should.not.be["true"];
      });
      it('should say it is a Thing', function() {
        return path.isa('Thing').should.be["true"];
      });
      it('should not say it is a Department', function() {
        return path.isa('Department').should.not.be["true"];
      });
      return it('should not say it is an int', function() {
        return path.isa('int').should.not.be["true"];
      });
    });
  });
});

describe('Two similar paths', function() {
  var pathA, pathB;
  pathA = testmodel.makePath('Employee.name');
  pathB = testmodel.makePath('Employee.name');
  it('should equal each other', function() {
    return pathA.equals(pathB).should.be["true"];
  });
  return describe('their names', function() {
    this.beforeAll(prepare(function() {
      var p;
      return Promise.all((function() {
        var _i, _len, _ref1, _results;
        _ref1 = [pathA, pathB];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          p = _ref1[_i];
          _results.push(p.getDisplayName());
        }
        return _results;
      })());
    }));
    return it('should be the same', eventually(function(_arg) {
      var a, b;
      a = _arg[0], b = _arg[1];
      return a.should.eql(b);
    }));
  });
});


},{"../../build-cov/model":4,"../../build-cov/path":5,"../../build/path":21,"../../build/service":24,"./data/model":64,"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","__browserify_process":35,"promise":38}],53:[function(require,module,exports){
var Fixture, always, eventually, get, invoke, prepare, _ref, _ref1;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare, always = _ref.always;

_ref1 = Fixture.funcutils, get = _ref1.get, invoke = _ref1.invoke;

describe('Query', function() {
  var olderEmployees, query, service, _ref2;
  query = {
    model: {
      "name": "testmodel"
    },
    select: ["Employee.name", "Employee.age", "Employee.department.name"],
    where: [
      {
        path: "Employee.department.name",
        op: "ONE OF",
        code: "A",
        values: ["Sales", "Accounting"]
      }
    ]
  };
  _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
  return describe('one of constraints', function() {
    describe('count', function() {
      var expected;
      expected = 36;
      this.beforeAll(prepare(function() {
        return service.count(query);
      }));
      return it("should find " + expected + " rows", eventually(function(c) {
        return c.should.equal(expected);
      }));
    });
    return describe('results', function() {
      var allowed;
      allowed = query.where[0].values;
      this.beforeAll(prepare(function() {
        return service.records(query);
      }));
      it('should only find employees in sales and accounting', eventually(function(emps) {
        var e, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = emps.length; _i < _len; _i++) {
          e = emps[_i];
          _results.push(allowed.should.include(e.department.name));
        }
        return _results;
      }));
      return it('should find David', eventually(function(emps) {
        return emps.map(get('name')).should.include('David Brent');
      }));
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],54:[function(require,module,exports){
var Fixture, always, clear, eventually, prepare, report, _ref;

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always, clear = _ref.clear, report = _ref.report;

Fixture = require('./lib/fixture');

describe('Query#clone', function() {
  var service, youngerEmployees, _ref1;
  _ref1 = new Fixture(), service = _ref1.service, youngerEmployees = _ref1.youngerEmployees;
  this.beforeAll(prepare(function() {
    return service.query(youngerEmployees).then(function(q) {
      return [q, q.clone().addToSelect('end')];
    });
  }));
  it('should have several views in q', eventually(function(_arg) {
    var clone, q;
    q = _arg[0], clone = _arg[1];
    return q.views.length.should.be.above(0);
  }));
  return it('should have more views in clone', eventually(function(_arg) {
    var clone, q;
    q = _arg[0], clone = _arg[1];
    return clone.views.length.should.be.above(q.views.length);
  }));
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],55:[function(require,module,exports){
var Fixture, always, clear, eventually, prepare, report, _ref;

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always, clear = _ref.clear, report = _ref.report;

Fixture = require('./lib/fixture');

describe('Query#makeListQuery', function() {
  var service, youngerEmployees, _ref1;
  _ref1 = new Fixture(), service = _ref1.service, youngerEmployees = _ref1.youngerEmployees;
  this.beforeAll(prepare(function() {
    return service.query(youngerEmployees).then(function(q) {
      return q.makeListQuery();
    });
  }));
  it('should leave us with more constraints', eventually(function(lq) {
    return lq.constraints.length.should.be.above(1);
  }));
  return it('should still thinl Employee.address is in the query', eventually(function(lq) {
    return lq.isInQuery('address').should.be["true"];
  }));
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],56:[function(require,module,exports){
var Fixture, Model, Query, TESTMODEL, get, xml;

TESTMODEL = require('./data/model').TESTMODEL;

Fixture = require('./lib/fixture');

Query = Fixture.Query, Model = Fixture.Model;

get = Fixture.funcutils.get;

xml = "<query view=\"Employee.name Employee.age\" sortOrder=\"Employee.name ASC Employee.fullTime DESC\">\n  <constraint path=\"Employee.department.manager\" type=\"CEO\"/>\n  <constraint path=\"Employee.department.name\" op=\"=\" value=\"Sales\"/>\n  <constraint path=\"Employee.name\" op=\"IN\">\n    <value>Foo</value>\n    <value>Bar</value>\n    <value>Baz</value>\n  </constraint>\n</query>";

describe('Query.fromXML', function() {
  describe('attempting to parse nonsense', function() {
    var attempt;
    attempt = function() {
      return Query.fromXML('foo bar baz');
    };
    return it('should raise an error', function() {
      return attempt.should.throwError(/Invalid/);
    });
  });
  describe('attempting to parse things that cause xmldom#40', function() {
    var attempt;
    attempt = function() {
      return Query.fromXML('<r');
    };
    return it('should raise an error, and not enter an infinite loop', function() {
      return attempt.should.throwError();
    });
  });
  describe('attempting to parse non-strings', function() {
    var attempt;
    attempt = function() {
      return Query.fromXML(new Object);
    };
    return it('should raise an error', function() {
      return attempt.should.throwError(/Expected/);
    });
  });
  describe('attempting to parse an empty string', function() {
    var attempt;
    attempt = function() {
      return Query.fromXML('');
    };
    return it('should raise an error', function() {
      return attempt.should.throwError(/Expected/);
    });
  });
  describe('attempting to parse a blank string', function() {
    var attempt;
    attempt = function() {
      return Query.fromXML('   ');
    };
    return it('should raise an error', function() {
      return attempt.should.throwError(/empty/);
    });
  });
  return describe('the result of parsing sensible input', function() {
    var q;
    q = Query.fromXML(xml);
    it('should have two elements in the view', function() {
      return q.view.length.should.equal(2);
    });
    it('should have the right sort-order', function() {
      q.sortOrder[0][0].should.equal('Employee.name');
      q.sortOrder[1][0].should.equal('Employee.fullTime');
      q.sortOrder[0][1].should.equal('ASC');
      return q.sortOrder[1][1].should.equal('DESC');
    });
    it('should have a sub-class constraint', function() {
      return q.constraints[0].should.eql({
        path: 'Employee.department.manager',
        type: 'CEO'
      });
    });
    it('should have the expected attribute constraint', function() {
      return q.constraints[1].should.eql({
        path: "Employee.department.name",
        op: "=",
        value: "Sales"
      });
    });
    it('should have a constraint with the expected values', function() {
      return q.constraints[2].values.should.eql(['Foo', 'Bar', 'Baz']);
    });
    it('should have three constraints', function() {
      return q.constraints.length.should.equal(3);
    });
    return describe('using this to instantiate a query', function() {
      var query;
      query = new Query(q);
      return it('should construct a query with the right sort-order', function() {
        query.sortOrder[0].path.should.equal('Employee.name');
        query.sortOrder[1].path.should.equal('Employee.fullTime');
        query.sortOrder[0].direction.should.equal('ASC');
        return query.sortOrder[1].direction.should.equal('DESC');
      });
    });
  });
});


},{"./data/model":64,"./lib/fixture":"V5MhzQ"}],57:[function(require,module,exports){
var EXPECTED_XML, Fixture, Model, Query, TESTMODEL, get, options;

TESTMODEL = require('./data/model').TESTMODEL;

Fixture = require('./lib/fixture');

Query = Fixture.Query, Model = Fixture.Model;

get = Fixture.funcutils.get;

options = {
  intermine: {
    view: ["Employee.name"],
    constraints: [
      {
        path: "Employee",
        op: "LOOKUP",
        value: "Bill",
        extraValue: "Sales"
      }
    ]
  }
};

EXPECTED_XML = "<query model=\"testmodel\" view=\"Employee.name\" >" + "<constraint path=\"Employee\" op=\"LOOKUP\" value=\"Bill\" extraValue=\"Sales\" />" + "</query>";

describe('Query', function() {
  return describe('lookup constraints with extra values', function() {
    var q, testmodel;
    testmodel = new Model(TESTMODEL.model);
    q = new Query(options.intermine);
    q.model = testmodel;
    return it('should serialize correctly', function() {
      return q.toXML().should.eql(EXPECTED_XML);
    });
  });
});


},{"./data/model":64,"./lib/fixture":"V5MhzQ"}],58:[function(require,module,exports){
var Fixture, eventually, prepare, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

describe('Equality', function() {
  var service;
  service = new Fixture().service;
  describe('Case insensitivity', function() {
    this.beforeAll(prepare(function() {
      return service.count({
        select: ['Employee.*'],
        where: {
          name: {
            '=': 'brenda'
          }
        }
      });
    }));
    return it('should find something', eventually(function(c) {
      return c.should.equal(1);
    }));
  });
  return describe('Case sensitivity', function() {
    this.beforeAll(prepare(function() {
      return service.count({
        select: ['Employee.*'],
        where: {
          name: {
            '==': 'brenda'
          }
        }
      });
    }));
    return it('should find something', eventually(function(c) {
      return c.should.equal(0);
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],59:[function(require,module,exports){
var Fixture, Promise, always, clear, eventually, invoke, prepare, report, _ref,
  __slice = [].slice;

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always, clear = _ref.clear, report = _ref.report;

Fixture = require('./lib/fixture');

Promise = require('promise');

invoke = Fixture.funcutils.invoke;

describe('Query#appendToList', function() {
  var clearList, name, olderEmployees, service, tags, youngerEmployees, _ref1;
  _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees, youngerEmployees = _ref1.youngerEmployees;
  name = 'temp-olders-append-to-list-target';
  tags = ['js', 'node', 'testing', 'mocha', 'append-to-list'];
  clearList = clear(service, name);
  this.slow(400);
  this.timeout(10000);
  this.afterAll(always(clearList));
  describe('target: List', function() {
    this.beforeAll(prepare(function() {
      return clearList().then(function() {
        return Promise.all([
          service.count(youngerEmployees), service.count(olderEmployees), service.query(youngerEmployees), service.query(olderEmployees).then(invoke('saveAsList', {
            name: name,
            tags: tags
          }))
        ]).then(function(_arg) {
          var oc, target, yc, yq;
          yc = _arg[0], oc = _arg[1], yq = _arg[2], target = _arg[3];
          return yq.appendToList(target).then(function(newState) {
            return [yc, oc, target, newState];
          });
        });
      });
    }));
    it('should actually add items to the list', eventually(function(_arg) {
      var oc, orig, _;
      _ = _arg[0], oc = _arg[1], orig = _arg[2];
      return orig.size.should.be.above(oc);
    }));
    it('should in fact add all the youngsters', eventually(function(_arg) {
      var oc, orig, yc;
      yc = _arg[0], oc = _arg[1], orig = _arg[2];
      return orig.size.should.equal(yc + oc);
    }));
    return it('should keep the input and output lists in sync', eventually(function(_arg) {
      var appended, orig, _, _i;
      _ = 3 <= _arg.length ? __slice.call(_arg, 0, _i = _arg.length - 2) : (_i = 0, []), orig = _arg[_i++], appended = _arg[_i++];
      return orig.size.should.equal(appended.size);
    }));
  });
  return describe('target: String', function() {
    this.beforeAll(prepare(function() {
      return clearList().then(function() {
        return Promise.all([
          service.count(youngerEmployees), service.count(olderEmployees), service.query(youngerEmployees), service.query(olderEmployees).then(function(q) {
            return q.saveAsList({
              name: name,
              tags: tags
            });
          })
        ]).then(function(_arg) {
          var oc, ol, yc, yq;
          yc = _arg[0], oc = _arg[1], yq = _arg[2], ol = _arg[3];
          return yq.appendToList(ol.name).then(function(al) {
            return [yc, oc, ol, al];
          });
        });
      });
    }));
    it('should have appropriate values to start with -yc', eventually(function(_arg) {
      var yc;
      yc = _arg[0];
      return yc.should.equal(85);
    }));
    it('should have appropriate values to start with -oc', eventually(function(_arg) {
      var oc, _;
      _ = _arg[0], oc = _arg[1];
      return oc.should.equal(46);
    }));
    it('should have appropriate values to start with -oc', eventually(function(_arg) {
      var ol, _, __;
      _ = _arg[0], __ = _arg[1], ol = _arg[2];
      return ol.size.should.equal(46);
    }));
    it('should actually add items to the list', eventually(function(_arg) {
      var list, oc, yc, _;
      yc = _arg[0], oc = _arg[1], _ = _arg[2], list = _arg[3];
      return list.size.should.be.above(oc);
    }));
    it('should in fact add all the youngsters', eventually(function(_arg) {
      var list, oc, yc, _;
      yc = _arg[0], oc = _arg[1], _ = _arg[2], list = _arg[3];
      return list.size.should.equal(yc + oc);
    }));
    return it('input and output lists should not be in sync', eventually(function(_arg) {
      var appended, oc, orig, yc;
      yc = _arg[0], oc = _arg[1], orig = _arg[2], appended = _arg[3];
      orig.size.should.equal(oc);
      return appended.size.should.equal(orig.size + yc);
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","promise":38}],60:[function(require,module,exports){
var Promise, Service, countRecords, eventually, invoke, prepare, should, shouldFail, utils, _ref, _ref1;

_ref = require('./lib/fixture'), Service = _ref.Service, utils = _ref.utils;

Promise = require('promise');

_ref1 = require('./lib/utils'), shouldFail = _ref1.shouldFail, prepare = _ref1.prepare, eventually = _ref1.eventually;

invoke = utils.invoke;

should = require('should');

countRecords = function(gff3) {
  var l;
  return ((function() {
    var _i, _len, _ref2, _results;
    _ref2 = gff3.split(/\n/);
    _results = [];
    for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
      l = _ref2[_i];
      if (l.length && !/^#/.test(l.trim())) {
        _results.push(l);
      }
    }
    return _results;
  })()).length;
};

describe('GFF3 Queries', function() {
  var service;
  this.timeout(10000);
  service = new Service({
    root: 'www.flymine.org/query'
  });
  describe('implicitly constrained', function() {
    var opts;
    opts = {
      from: 'Gene',
      select: ['symbol', 'pathways.name'],
      where: {
        symbol: ['eve', 'zen', 'bib', 'r', 'h']
      }
    };
    this.beforeAll(prepare(function() {
      return service.query(opts).then(function(q) {
        return Promise.all([
          q.summarise('symbol').then(function(_arg) {
            var stats;
            stats = _arg.stats;
            return stats;
          }), q.getGFF3()
        ]);
      });
    }));
    it('should find only two genes, due to the pathways', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return stats.uniqueValues.should.equal(2);
    }));
    it('should find only two gff3 record, due to the pathways', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return countRecords(gff3).should.equal(2);
    }));
    return describe('callback api', function() {
      return it('should work, just like promises do, but be more verbose', function(done) {
        return service.query(opts, function(err, query) {
          if (err != null) {
            return done(err);
          }
          return query.getGFF3(function(err, gff3) {
            var e;
            if (err != null) {
              return done(err);
            }
            try {
              countRecords(gff3).should.equal(2);
              return done();
            } catch (_error) {
              e = _error;
              return done(e);
            }
          });
        });
      });
    });
  });
  describe('outer joined', function() {
    var opts;
    opts = {
      from: 'Gene',
      select: ['symbol', 'pathways.name'],
      where: {
        symbol: ['eve', 'zen', 'bib', 'r', 'h']
      },
      joins: ['pathways']
    };
    this.beforeAll(prepare(function() {
      return service.query(opts).then(function(q) {
        return Promise.all([
          q.summarise('symbol').then(function(_arg) {
            var stats;
            stats = _arg.stats;
            return stats;
          }), q.getGFF3()
        ]);
      });
    }));
    it('should find 5 genes', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return stats.uniqueValues.should.equal(5);
    }));
    return it('should find 5 gff3 records', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return countRecords(gff3).should.equal(5);
    }));
  });
  describe('unconstrained', function() {
    var opts;
    opts = {
      from: 'Gene',
      select: ['symbol'],
      where: {
        symbol: ['eve', 'zen', 'bib', 'r', 'h']
      }
    };
    this.beforeAll(prepare(function() {
      return service.query(opts).then(function(q) {
        return Promise.all([
          q.summarise('symbol').then(function(_arg) {
            var stats;
            stats = _arg.stats;
            return stats;
          }), q.getGFF3()
        ]);
      });
    }));
    it('should find all genes', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return stats.uniqueValues.should.equal(5);
    }));
    return it('should find 5 gff3 records', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return countRecords(gff3).should.equal(5);
    }));
  });
  describe('with extra attributes', function() {
    var opts;
    opts = {
      from: 'Gene',
      select: ['symbol'],
      where: {
        symbol: ['eve', 'zen', 'bib', 'r', 'h']
      }
    };
    this.beforeAll(prepare(function() {
      var beta, gff3p, qp, statsp;
      beta = new Service({
        root: 'www.flymine.org/query'
      });
      qp = beta.query(opts);
      statsp = qp.then(function(q) {
        return q.summarise('symbol').then(function(_arg) {
          var stats;
          stats = _arg.stats;
          return stats;
        });
      });
      gff3p = qp.then(function(q) {
        return q.getGFF3({
          view: ['organism.name', 'length']
        });
      });
      return Promise.all([statsp, gff3p]);
    }));
    it('should find all genes', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return stats.uniqueValues.should.equal(5);
    }));
    it('should find 5 gff3 records', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return countRecords(gff3).should.equal(5);
    }));
    return it('the records should have the extra attributes', eventually(function(_arg) {
      var col9, gff3, line, stats, _i, _len, _ref2, _results;
      stats = _arg[0], gff3 = _arg[1];
      _ref2 = gff3.split("\n");
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        line = _ref2[_i];
        if (!(line.length && !/^#/.test(line))) {
          continue;
        }
        col9 = line.split(/\t/)[8];
        col9.should.match(/organism.name/);
        _results.push(col9.should.match(/length/));
      }
      return _results;
    }));
  });
  describe('with exons', function() {
    var opts;
    opts = {
      from: 'Gene',
      select: ['symbol', 'exons.symbol'],
      where: {
        symbol: ['eve', 'zen', 'bib', 'r', 'h']
      },
      joins: ['exons']
    };
    this.beforeAll(prepare(function() {
      return service.query(opts).then(function(q) {
        return Promise.all([
          q.summarise('symbol').then(function(_arg) {
            var stats;
            stats = _arg.stats;
            return stats;
          }), q.getGFF3()
        ]);
      });
    }));
    it('should find all genes', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return stats.uniqueValues.should.equal(5);
    }));
    return it('should find more than 5 gff3 records', eventually(function(_arg) {
      var gff3, stats;
      stats = _arg[0], gff3 = _arg[1];
      return countRecords(gff3).should.be.above(5);
    }));
  });
  return describe('bad request', function() {
    var opts;
    service = new Service({
      root: 'www.flymine.org/query',
      errorHandler: function() {}
    });
    opts = {
      from: 'Organism',
      select: ['name'],
      where: {
        taxonId: 7227
      }
    };
    it('should fail', shouldFail(function() {
      return service.query(opts).then(invoke('getGFF3'));
    }));
    return it('should supply an error message to callbacks', function(done) {
      return service.query(opts, function(err, query) {
        if (err != null) {
          return done(err);
        }
        return query.getGFF3(function(err, gff3) {
          var e;
          if (gff3) {
            return done(new Error("Expected failure, got: " + gff3));
          }
          try {
            err.should.match(/No columns/);
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","promise":38,"should":41}],61:[function(require,module,exports){
var Service, eventually, prepare, should, shouldHaveFailed, _ref;

Service = require('./lib/fixture').Service;

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

should = require('should');

shouldHaveFailed = function(done) {
  return function(o) {
    return done(new Error("Expected failure, got " + o));
  };
};

describe('parse failure', function() {
  var service;
  service = Service.connect({
    root: 'http://www.metabolicmine.org/the/return/of/meta'
  });
  return describe('Attempt to fetch the Model', function() {
    var promise;
    promise = service.fetchModel();
    it('should fail', function(done) {
      return promise.then(shouldHaveFailed(done), (function() {
        return done();
      }));
    });
    return it('should provide a reasonable message', function(done) {
      return promise.then(shouldHaveFailed(done), function(err) {
        var e;
        try {
          String(err).should.contain(service.root);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
});

describe('not available failure', function() {
  var service;
  service = Service.connect({
    root: 'http://www.metabolicmine2.org/the/return/of/meta'
  });
  return describe('Attempt to fetch the Model', function() {
    var promise;
    promise = service.fetchModel();
    it('should fail', function(done) {
      return promise.then(shouldHaveFailed(done), (function() {
        return done();
      }));
    });
    return it('should provide a reasonable message', function(done) {
      return promise.then(shouldHaveFailed(done), function(err) {
        var e;
        try {
          String(err).should.contain(service.root);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],62:[function(require,module,exports){
var Fixture, eventually, prepare, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

describe('Query', function() {
  var allEmployees, service, _ref1;
  _ref1 = new Fixture(), service = _ref1.service, allEmployees = _ref1.allEmployees;
  describe('#fetchCode', function() {
    this.beforeAll(prepare(function() {
      return service.query(allEmployees).then(function(q) {
        return q.fetchCode('py');
      });
    }));
    return it('should return some code', eventually(function(code) {
      return code.length.should.be.above(0);
    }));
  });
  return describe('#fetchCode(long-uri)', function() {
    var values, _i, _results;
    values = (function() {
      _results = [];
      for (_i = 0; _i <= 2000; _i++){ _results.push(_i); }
      return _results;
    }).apply(this);
    this.beforeAll(prepare(function() {
      return service.query(allEmployees).then(function(q) {
        q.addConstraint({
          path: 'age',
          op: 'ONE OF',
          values: values
        });
        return q.fetchCode('py');
      });
    }));
    return it('should return some code', eventually(function(code) {
      return code.length.should.be.above(1000);
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],63:[function(require,module,exports){
var Fixture, eventually, invoke, prepare, promising, shouldFail, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), promising = _ref.promising, prepare = _ref.prepare, eventually = _ref.eventually, shouldFail = _ref.shouldFail;

invoke = Fixture.utils.invoke;

describe('Service', function() {
  var allEmployees, olderEmployees, service, _ref1;
  _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees, allEmployees = _ref1.allEmployees;
  describe('#count()', function() {
    return it('should fail', shouldFail(service.count));
  });
  describe('#count(path)', function() {
    var pathCountTest,
      _this = this;
    pathCountTest = function(path, n, xs) {
      return describe(path, function() {
        this.beforeAll(prepare(function() {
          return service.count(path);
        }));
        return it("should find " + n + " " + xs, eventually(function(c) {
          return c.should.equal(n);
        }));
      });
    };
    pathCountTest('Employee', 132, 'employees');
    pathCountTest('Employee.id', 132, 'employees');
    pathCountTest('Employee.*', 132, 'employees');
    pathCountTest('Employee.fullTime', 2, 'times');
    pathCountTest('Department.employees', 132, 'employees');
    pathCountTest('Company.name', 7, 'names');
    return pathCountTest('Company', 7, 'companies');
  });
  return describe('#count(query)', function() {
    describe('promise API', function() {
      describe('the count of all employees', function() {
        this.beforeAll(prepare(function() {
          return service.count(allEmployees);
        }));
        return it('should equal 131', eventually(function(c) {
          return c.should.equal(131);
        }));
      });
      describe('the count of older employees', function() {
        this.beforeAll(prepare(function() {
          return service.count(olderEmployees);
        }));
        return it('should equal 46', eventually(function(c) {
          return c.should.equal(46);
        }));
      });
      return describe('using an instance of Query', function() {
        this.beforeAll(prepare(function() {
          return service.query(olderEmployees).then(service.count);
        }));
        return it('should still find 46 employees', eventually(function(c) {
          return c.should.equal(46);
        }));
      });
    });
    return describe('the callback API', function() {
      return it('should be more painful', function(done) {
        return service.count(olderEmployees, function(err, c) {
          var e;
          if (err != null) {
            return done(err);
          }
          try {
            c.should.equal(46);
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
    });
  });
});

describe('Query#count', function() {
  var allEmployees, count, olderEmployees, service, _ref1;
  _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees, allEmployees = _ref1.allEmployees;
  count = invoke('count');
  it('should find around 135 employees', promising(service.query(allEmployees).then(count), function(c) {
    return c.should.be.above(130).and.below(140);
  }));
  return it('should find 46 older employees', promising(service.query(olderEmployees).then(count), function(c) {
    return c.should.equal(46);
  }));
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],64:[function(require,module,exports){
exports.TESTMODEL = {"model":{
"name":"testmodel","classes":{"Broke":{"name":"Broke","extends":[],"isInterface":true,"attributes":{"debt":{"name":"debt","type":"int"},"interestRate":{"name":"interestRate","type":"double"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{"bank":{"name":"bank","referencedType":"Bank","reverseReference":"debtors"},"owedBy":{"name":"owedBy","referencedType":"Employable"}},"collections":{}},"Thing":{"name":"Thing","extends":[],"isInterface":true,"attributes":{"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{}},"Employable":{"name":"Employable","extends":["Thing"],"isInterface":true,"attributes":{"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{}},"HasAddress":{"name":"HasAddress","extends":[],"isInterface":true,"attributes":{"id":{"name":"id","type":"java.lang.Integer"}},"references":{"address":{"name":"address","referencedType":"Address"}},"collections":{}},"HasSecretarys":{"name":"HasSecretarys","extends":[],"isInterface":true,"attributes":{"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{"secretarys":{"name":"secretarys","referencedType":"Secretary"}}},"Contractor":{"name":"Contractor","extends":["Employable","ImportantPerson"],"isInterface":false,"attributes":{"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"},"seniority":{"name":"seniority","type":"java.lang.Integer"}},"references":{"personalAddress":{"name":"personalAddress","referencedType":"Address"},"businessAddress":{"name":"businessAddress","referencedType":"Address"}},"collections":{"companys":{"name":"companys","referencedType":"Company","reverseReference":"contractors"},"oldComs":{"name":"oldComs","referencedType":"Company","reverseReference":"oldContracts"}}},"Manager":{"name":"Manager","extends":["Employee","ImportantPerson"],"isInterface":false,"attributes":{"title":{"name":"title","type":"java.lang.String"},"fullTime":{"name":"fullTime","type":"boolean"},"age":{"name":"age","type":"int"},"end":{"name":"end","type":"java.lang.String"},"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"},"seniority":{"name":"seniority","type":"java.lang.Integer"}},"references":{"department":{"name":"department","referencedType":"Department","reverseReference":"employees"},"departmentThatRejectedMe":{"name":"departmentThatRejectedMe","referencedType":"Department","reverseReference":"rejectedEmployee"},"employmentPeriod":{"name":"employmentPeriod","referencedType":"EmploymentPeriod"},"address":{"name":"address","referencedType":"Address"}},"collections":{"simpleObjects":{"name":"simpleObjects","referencedType":"SimpleObject","reverseReference":"employee"}}},"Employee":{"name":"Employee","extends":["Employable","HasAddress"],"isInterface":false,"attributes":{"fullTime":{"name":"fullTime","type":"boolean"},"age":{"name":"age","type":"int"},"end":{"name":"end","type":"java.lang.String"},"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{"department":{"name":"department","referencedType":"Department","reverseReference":"employees"},"departmentThatRejectedMe":{"name":"departmentThatRejectedMe","referencedType":"Department","reverseReference":"rejectedEmployee"},"employmentPeriod":{"name":"employmentPeriod","referencedType":"EmploymentPeriod"},"address":{"name":"address","referencedType":"Address"}},"collections":{"simpleObjects":{"name":"simpleObjects","referencedType":"SimpleObject","reverseReference":"employee"}}},"Department":{"name":"Department","extends":["RandomInterface"],"isInterface":false,"attributes":{"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{"company":{"name":"company","referencedType":"Company","reverseReference":"departments"},"manager":{"name":"manager","referencedType":"Manager"}},"collections":{"employees":{"name":"employees","referencedType":"Employee","reverseReference":"department"},"rejectedEmployee":{"name":"rejectedEmployee","referencedType":"Employee","reverseReference":"departmentThatRejectedMe"}}},"Company":{"name":"Company","extends":["RandomInterface","HasAddress","HasSecretarys"],"isInterface":true,"attributes":{"name":{"name":"name","type":"java.lang.String"},"vatNumber":{"name":"vatNumber","type":"int"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{"CEO":{"name":"CEO","referencedType":"CEO","reverseReference":"company"},"bank":{"name":"bank","referencedType":"Bank","reverseReference":"corporateCustomers"},"address":{"name":"address","referencedType":"Address"}},"collections":{"departments":{"name":"departments","referencedType":"Department","reverseReference":"company"},"contractors":{"name":"contractors","referencedType":"Contractor","reverseReference":"companys"},"oldContracts":{"name":"oldContracts","referencedType":"Contractor","reverseReference":"oldComs"},"secretarys":{"name":"secretarys","referencedType":"Secretary"}}},"Address":{"name":"Address","extends":["Thing"],"isInterface":false,"attributes":{"address":{"name":"address","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{}},"RandomInterface":{"name":"RandomInterface","extends":[],"isInterface":true,"attributes":{"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{}},"CEO":{"name":"CEO","extends":["Manager","HasSecretarys"],"isInterface":false,"attributes":{"salary":{"name":"salary","type":"int"},"title":{"name":"title","type":"java.lang.String"},"fullTime":{"name":"fullTime","type":"boolean"},"age":{"name":"age","type":"int"},"end":{"name":"end","type":"java.lang.String"},"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"},"seniority":{"name":"seniority","type":"java.lang.Integer"}},"references":{"company":{"name":"company","referencedType":"Company","reverseReference":"CEO"},"department":{"name":"department","referencedType":"Department","reverseReference":"employees"},"departmentThatRejectedMe":{"name":"departmentThatRejectedMe","referencedType":"Department","reverseReference":"rejectedEmployee"},"employmentPeriod":{"name":"employmentPeriod","referencedType":"EmploymentPeriod"},"address":{"name":"address","referencedType":"Address"}},"collections":{"simpleObjects":{"name":"simpleObjects","referencedType":"SimpleObject","reverseReference":"employee"},"secretarys":{"name":"secretarys","referencedType":"Secretary"}}},"ImportantPerson":{"name":"ImportantPerson","extends":[],"isInterface":true,"attributes":{"seniority":{"name":"seniority","type":"java.lang.Integer"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{}},"Secretary":{"name":"Secretary","extends":[],"isInterface":false,"attributes":{"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{}},"Types":{"name":"Types","extends":[],"isInterface":false,"attributes":{"name":{"name":"name","type":"java.lang.String"},"booleanType":{"name":"booleanType","type":"boolean"},"floatType":{"name":"floatType","type":"float"},"doubleType":{"name":"doubleType","type":"double"},"shortType":{"name":"shortType","type":"short"},"intType":{"name":"intType","type":"int"},"longType":{"name":"longType","type":"long"},"booleanObjType":{"name":"booleanObjType","type":"java.lang.Boolean"},"floatObjType":{"name":"floatObjType","type":"java.lang.Float"},"doubleObjType":{"name":"doubleObjType","type":"java.lang.Double"},"shortObjType":{"name":"shortObjType","type":"java.lang.Short"},"intObjType":{"name":"intObjType","type":"java.lang.Integer"},"longObjType":{"name":"longObjType","type":"java.lang.Long"},"bigDecimalObjType":{"name":"bigDecimalObjType","type":"java.math.BigDecimal"},"dateObjType":{"name":"dateObjType","type":"java.util.Date"},"stringObjType":{"name":"stringObjType","type":"java.lang.String"},"clobObjType":{"name":"clobObjType","type":"org.intermine.objectstore.query.ClobAccess"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{}},"Bank":{"name":"Bank","extends":[],"isInterface":false,"attributes":{"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{"debtors":{"name":"debtors","referencedType":"Broke","reverseReference":"bank"},"corporateCustomers":{"name":"corporateCustomers","referencedType":"Company","reverseReference":"bank"}}},"SimpleObject":{"name":"SimpleObject","extends":["java.lang.Object"],"isInterface":false,"attributes":{"name":{"name":"name","type":"java.lang.String"}},"references":{"employee":{"name":"employee","referencedType":"Employee","reverseReference":"simpleObjects"}},"collections":{}},"EmploymentPeriod":{"name":"EmploymentPeriod","extends":[],"isInterface":false,"attributes":{"start":{"name":"start","type":"java.util.Date"},"end":{"name":"end","type":"java.util.Date"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{},"collections":{}},"Range":{"name":"Range","extends":[],"isInterface":false,"attributes":{"rangeStart":{"name":"rangeStart","type":"int"},"rangeEnd":{"name":"rangeEnd","type":"int"},"name":{"name":"name","type":"java.lang.String"},"id":{"name":"id","type":"java.lang.Integer"}},"references":{"parent":{"name":"parent","referencedType":"Company"}},"collections":{}}}
},"wasSuccessful":true,"error":null,"statusCode":200}

},{}],65:[function(require,module,exports){
module.exports={
    "1003692": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0004110",
            "symbol": "tin",
            "secondaryIdentifier": "CG7895"
        },
        "identifiers": {
            "tinman": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1005232": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0000099",
            "symbol": "ap",
            "secondaryIdentifier": "CG8376"
        },
        "identifiers": {
            "FBgn0000099": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1005584": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0000166",
            "symbol": "bcd",
            "secondaryIdentifier": "CG1034"
        },
        "identifiers": {
            "CG1034": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1006039": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0001150",
            "symbol": "gt",
            "secondaryIdentifier": "CG7952"
        },
        "identifiers": {
            "gt": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "1006967": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0003300",
            "symbol": "run",
            "secondaryIdentifier": "CG1849"
        },
        "identifiers": {
            "runt": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "1007192": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0000606",
            "symbol": "eve",
            "secondaryIdentifier": "CG2328"
        },
        "identifiers": {
            "CG2328": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1007568": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0003870",
            "symbol": "ttk",
            "secondaryIdentifier": "CG1856"
        },
        "identifiers": {
            "tramtrack": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "1008149": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0040765",
            "symbol": "luna",
            "secondaryIdentifier": "CG33473"
        },
        "identifiers": {
            "CG33473": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1012064": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0003866",
            "symbol": "tsh",
            "secondaryIdentifier": "CG1374"
        },
        "identifiers": {
            "CG1374": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1013634": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0003720",
            "symbol": "tll",
            "secondaryIdentifier": "CG1378"
        },
        "identifiers": {
            "tll": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1017495": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0000028",
            "symbol": "acj6",
            "secondaryIdentifier": "CG9151"
        },
        "identifiers": {
            "CG9151": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1019651": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0011655",
            "symbol": "Med",
            "secondaryIdentifier": "CG1775"
        },
        "identifiers": {
            "CG1775": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1020845": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0024250",
            "symbol": "brk",
            "secondaryIdentifier": "CG9653"
        },
        "identifiers": {
            "FBgn0024250": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1021556": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0041111",
            "symbol": "lilli",
            "secondaryIdentifier": "CG8817"
        },
        "identifiers": {
            "CG8817": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1022210": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0011766",
            "symbol": "E2f",
            "secondaryIdentifier": "CG6376"
        },
        "identifiers": {
            "E2f": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1023733": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0011648",
            "symbol": "Mad",
            "secondaryIdentifier": "CG12399"
        },
        "identifiers": {
            "Mad": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1029518": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0003460",
            "symbol": "so",
            "secondaryIdentifier": "CG11121"
        },
        "identifiers": {
            "so": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1033140": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0025800",
            "symbol": "Smox",
            "secondaryIdentifier": "CG2262"
        },
        "identifiers": {
            "CG2262": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1035180": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0001325",
            "symbol": "Kr",
            "secondaryIdentifier": "CG3340"
        },
        "identifiers": {
            "FBgn0001251": [
                "OTHER"
            ]
        },
        "type": "Gene"
    },
    "1036625": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0003430",
            "symbol": "slp1",
            "secondaryIdentifier": "CG16738"
        },
        "identifiers": {
            "CG16738": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1042703": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0001180",
            "symbol": "hb",
            "secondaryIdentifier": "CG9786"
        },
        "identifiers": {
            "CG9786": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1045695": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0010433",
            "symbol": "ato",
            "secondaryIdentifier": "CG7508"
        },
        "identifiers": {
            "FBgn0010433": [
                "MATCH"
            ],
            "ato": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1065292": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0004915",
            "symbol": "TfIIB",
            "secondaryIdentifier": "CG5193"
        },
        "identifiers": {
            "TfIIB": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1068009": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0000157",
            "symbol": "Dll",
            "secondaryIdentifier": "CG3629"
        },
        "identifiers": {
            "CG3629": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1077315": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0001077",
            "symbol": "ftz",
            "secondaryIdentifier": "CG2047"
        },
        "identifiers": {
            "ftz": [
                "MATCH"
            ]
        },
        "type": "Gene"
    },
    "1145128": {
        "summary": {
            "organism.name": "Drosophila melanogaster",
            "primaryIdentifier": "FBgn0003900",
            "symbol": "twi",
            "secondaryIdentifier": "CG2956"
        },
        "identifiers": {
            "TWIST_DROME": [
                "TYPE_CONVERTED"
            ]
        },
        "type": "Gene"
    },
    "6000138": {
        "summary": {
            "organism.name": "Drosophila pseudoobscura",
            "primaryIdentifier": "FBgn0075017",
            "symbol": "Dpse\\ttk",
            "secondaryIdentifier": "GA14992"
        },
        "identifiers": {
            "tramtrack": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "7000252": {
        "summary": {
            "organism.name": "Drosophila simulans",
            "primaryIdentifier": "FBgn0193021",
            "symbol": "Dsim\\ttk",
            "secondaryIdentifier": "GD21596"
        },
        "identifiers": {
            "tramtrack": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "7000255": {
        "summary": {
            "organism.name": "Drosophila yakuba",
            "primaryIdentifier": "FBgn0228787",
            "symbol": "Dyak\\ttk",
            "secondaryIdentifier": "GE10957"
        },
        "identifiers": {
            "tramtrack": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "7010773": {
        "summary": {
            "organism.name": "Drosophila simulans",
            "primaryIdentifier": "FBgn0016352",
            "symbol": "Dsim\\run",
            "secondaryIdentifier": "GD17500"
        },
        "identifiers": {
            "runt": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "7513758": {
        "summary": {
            "organism.name": "Drosophila erecta",
            "primaryIdentifier": "FBgn0085118",
            "symbol": "Dere\\run",
            "secondaryIdentifier": "GG19696"
        },
        "identifiers": {
            "runt": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "7878354": {
        "summary": {
            "organism.name": "Drosophila virilis",
            "primaryIdentifier": "FBgn0013920",
            "symbol": "Dvir\\run",
            "secondaryIdentifier": "GJ19252"
        },
        "identifiers": {
            "runt": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "7918344": {
        "summary": {
            "organism.name": "Drosophila yakuba",
            "primaryIdentifier": "FBgn0084618",
            "symbol": "Dyak\\run",
            "secondaryIdentifier": "GE17894"
        },
        "identifiers": {
            "runt": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    },
    "17023535": {
        "summary": {
            "organism.name": "Mus musculus",
            "primaryIdentifier": "MGI:95866",
            "symbol": "gt",
            "secondaryIdentifier": null
        },
        "identifiers": {
            "gt": [
                "DUPLICATE"
            ]
        },
        "type": "Gene"
    }
}

},{}],66:[function(require,module,exports){
var Fixture, SLOW, always, eventually, prepare, should, there_is_one_and_it_is_vikram, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always;

should = require('should');

SLOW = 200;

there_is_one_and_it_is_vikram = function(results) {
  results.length.should.equal(1);
  return results[0].identifier.should.equal('Vikram');
};

describe('Service', function() {
  var olderEmployees, service, _ref1;
  this.slow(SLOW);
  _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees;
  describe('#fetchWidgets', function() {
    this.beforeAll(prepare(service.fetchWidgets));
    return it('gets a list of the available widgets', eventually(function(widgets) {
      var w;
      should.exist(widgets);
      widgets.length.should.be.above(1);
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = widgets.length; _i < _len; _i++) {
          w = widgets[_i];
          if (w.name === 'contractor_enrichment') {
            _results.push(w);
          }
        }
        return _results;
      })()).length.should.equal(1);
    }));
  });
  describe('#fetchWidgetMap', function() {
    this.beforeAll(prepare(service.fetchWidgetMap));
    return it('gets a mapping from name to widget', eventually(function(widgets) {
      should.exist(widgets.contractor_enrichment);
      return widgets.contractor_enrichment.widgetType.should.equal('enrichment');
    }));
  });
  describe('#enrichment', function() {
    this.beforeAll(prepare(function() {
      return service.enrichment({
        list: 'My-Favourite-Employees',
        widget: 'contractor_enrichment',
        maxp: 1
      });
    }));
    return it('performs an enrichment calculation', eventually(there_is_one_and_it_is_vikram));
  });
  return describe('#enrichment with callback', function() {
    return it('performs an enrichment calculation with a callback', function(done) {
      var opts;
      opts = {
        list: 'My-Favourite-Employees',
        widget: 'contractor_enrichment',
        maxp: 1
      };
      return service.enrichment(opts, function(err, results) {
        var e;
        if (err != null) {
          return done(err);
        }
        try {
          there_is_one_and_it_is_vikram(results);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
});

describe('Query', function() {
  var olderEmployees, service, _ref1;
  this.slow(SLOW);
  _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees;
  return describe('#enrichment', function() {
    this.beforeAll(prepare(function() {
      return service.fetchList('My-Favourite-Employees').then(function(l) {
        return l.enrichment({
          widget: 'contractor_enrichment',
          maxp: 1
        });
      });
    }));
    return it('performs an enrichment calculation', eventually(there_is_one_and_it_is_vikram));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],67:[function(require,module,exports){
var Fixture, defer, eventually, findEmployee, get, prepare, report, _ref, _ref1;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), report = _ref.report, eventually = _ref.eventually, prepare = _ref.prepare;

_ref1 = Fixture.funcutils, defer = _ref1.defer, get = _ref1.get;

findEmployee = function(service, q) {
  return service.rows(q).then(function(rows) {
    return rows[0][0];
  }).then(function(id) {
    return service.findById('Employee', id);
  });
};

describe('lookup', function() {
  var service;
  service = new Fixture().service;
  return describe('Looking for David', function() {
    describe('using the promises API', function() {
      this.beforeAll(prepare(function() {
        return service.lookup('Employee', 'David Brent');
      }));
      it('should find someone with the right name', eventually(function(_arg) {
        var david;
        david = _arg[0];
        return david.name.should.equal('David Brent');
      }));
      it('should find someone in the right department', eventually(function(_arg) {
        var david;
        david = _arg[0];
        return david.department.name.should.equal('Sales');
      }));
      it('should find someone 41 years of age', eventually(function(_arg) {
        var david;
        david = _arg[0];
        return david.age.should.equal(41);
      }));
      it('should find a full-time worker', eventually(function(_arg) {
        var david;
        david = _arg[0];
        return david.fullTime.should.be["false"];
      }));
      return it('should find a manager', eventually(function(_arg) {
        var david;
        david = _arg[0];
        return david['class'].should.equal('Manager');
      }));
    });
    return describe('using the call-back API', function() {
      return it('should find someone with the right name and age.', function(done) {
        return service.lookup('Employee', 'David Brent', function(err, found) {
          var david, e;
          if (err != null) {
            done(err);
          }
          try {
            david = found[0];
            david.name.should.equal('David Brent');
            david.age.should.equal(41);
            return done();
          } catch (_error) {
            e = _error;
            return done(new Error(e));
          }
        });
      });
    });
  });
});

describe('find', function() {
  var service;
  service = new Fixture().service;
  return describe('Looking for David', function() {
    describe('using the promises API', function() {
      this.beforeAll(prepare(function() {
        return service.find('Employee', 'David Brent');
      }));
      it('should find someone with the right name', eventually(function(david) {
        return david.name.should.equal('David Brent');
      }));
      it('should find someone in the right department', eventually(function(david) {
        return david.department.name.should.equal('Sales');
      }));
      it('should find someone 41 years of age', eventually(function(david) {
        return david.age.should.equal(41);
      }));
      it('should find a full-time worker', eventually(function(david) {
        return david.fullTime.should.be["false"];
      }));
      return it('should find a manager', eventually(function(david) {
        return david['class'].should.equal('Manager');
      }));
    });
    return describe('using the call-back API', function() {
      return it('should find someone with the right name and age.', function(done) {
        return service.find('Employee', 'David Brent', function(err, david) {
          var e;
          if (err != null) {
            done(err);
          }
          try {
            david.name.should.equal('David Brent');
            david.age.should.equal(41);
            return done();
          } catch (_error) {
            e = _error;
            return done(new Error(e));
          }
        });
      });
    });
  });
});

describe('Service#findById', function() {
  var service;
  service = new Fixture().service;
  describe('Looking for David', function() {
    var q;
    q = {
      select: ['Employee.id'],
      where: {
        name: 'David Brent'
      }
    };
    describe('using the promises API', function() {
      this.beforeAll(function(done) {
        return report(done, this.promise = findEmployee(service, q));
      });
      it('should find someone with the right name', eventually(function(david) {
        return david.name.should.equal('David Brent');
      }));
      it('should find someone in the right department', eventually(function(david) {
        return david.department.name.should.equal('Sales');
      }));
      it('should find someone 41 years of age', eventually(function(david) {
        return david.age.should.equal(41);
      }));
      it('should find a full-time worker', eventually(function(david) {
        return david.fullTime.should.be["false"];
      }));
      return it('should find a manager', eventually(function(david) {
        return david['class'].should.equal('Manager');
      }));
    });
    return describe('using the call-back API', function() {
      this.beforeAll(function(done) {
        return report(done, this.promise = service.rows(q).then(function(rows) {
          return rows[0][0];
        }));
      });
      return it('should find someone with the right name and age.', eventually(function(id) {
        var promise, reject, resolve, _ref2;
        _ref2 = defer(), promise = _ref2.promise, resolve = _ref2.resolve, reject = _ref2.reject;
        service.findById('Employee', id, function(err, david) {
          var e;
          if (err != null) {
            reject(err);
          }
          try {
            david.name.should.equal('David Brent');
            david.age.should.equal(41);
            return resolve();
          } catch (_error) {
            e = _error;
            return reject(new Error(e));
          }
        });
        return promise;
      }));
    });
  });
  return describe('Looking for B1', function() {
    var q;
    q = {
      select: ['Employee.id'],
      where: {
        name: 'EmployeeB1'
      }
    };
    this.beforeAll(function(done) {
      return report(done, this.promise = findEmployee(service, q));
    });
    it('should find someone with the right name', eventually(function(david) {
      return david.name.should.equal('EmployeeB1');
    }));
    it('should find someone in the right department', eventually(function(david) {
      return david.department.name.should.equal('DepartmentB1');
    }));
    it('should find someone 40 years of age', eventually(function(david) {
      return david.age.should.equal(40);
    }));
    it('should find a full-time worker', eventually(function(david) {
      return david.fullTime.should.be["true"];
    }));
    return it('should find a manager', eventually(function(david) {
      return david['class'].should.equal('CEO');
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],68:[function(require,module,exports){
var Fixture, always, eventually, prepare, should, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare, always = _ref.always;

should = require('should');

describe('Query', function() {
  return describe('#getOuterJoin(path)', function() {
    var service;
    service = new Fixture().service;
    this.beforeAll(prepare(function() {
      return service.query({
        select: ['name'],
        from: 'Employee',
        joins: ['department', 'department.manager']
      });
    }));
    it('should find the outer join of department', eventually(function(q) {
      return q.getOuterJoin('department').should.equal('Employee.department');
    }));
    it('should find the outer join of department.name', eventually(function(q) {
      return q.getOuterJoin('department.name').should.equal('Employee.department');
    }));
    it('should find the outer join of department.manager', eventually(function(q) {
      return q.getOuterJoin('department.manager').should.equal('Employee.department.manager');
    }));
    it('should find the outer join of department.manager.name', eventually(function(q) {
      return q.getOuterJoin('department.manager.name').should.equal('Employee.department.manager');
    }));
    return it('should not find any outer join for address', eventually(function(q) {
      return should.not.exist(q.getOuterJoin('address'));
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],69:[function(require,module,exports){
var Fixture, always, eventually, get, invoke, prepare, toIds, toQ, _ref, _ref1;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare, always = _ref.always;

_ref1 = Fixture.funcutils, get = _ref1.get, invoke = _ref1.invoke;

toQ = function(ids) {
  var query;
  return query = {
    model: {
      "name": "testmodel"
    },
    select: ["Employee.name", "Employee.age", "Employee.department.name"],
    where: [
      {
        "path": "Employee",
        "op": "IN",
        "code": "A",
        "ids": ids
      }
    ]
  };
};

toIds = invoke('map', get('objectId'));

describe('Query', function() {
  var olderEmployees, service, _ref2;
  _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
  return describe('ID constraints', function() {
    this.beforeAll(prepare(function() {
      return service.records(olderEmployees).then(toIds).then(toQ).then(service.rows);
    }));
    it('should fetch the 46 older employees', eventually(function(rows) {
      return rows.length.should.equal(46);
    }));
    return it('should contain information about Malcolm', eventually(function(rows) {
      return rows.map(get(0)).should.include('Malcolm');
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],70:[function(require,module,exports){
var process=require("__browserify_process");var Fixture, OLD_ID_RES_FORMAT, always, cleanSlate, cleanUp, clear, eventually, fold, get, idresolution, invoke, prepare, should, shouldFail, testIDResolutionAgainst, _ref, _ref1;

Fixture = require('./lib/fixture');

if (process.env.IMJS_COV) {
  idresolution = require('../../build-cov/id-resolution-job');
} else {
  idresolution = require('../../build/id-resolution-job');
}

OLD_ID_RES_FORMAT = require('./data/old-id-resolution-format.json');

_ref = require('./lib/utils'), cleanSlate = _ref.cleanSlate, prepare = _ref.prepare, always = _ref.always, clear = _ref.clear, eventually = _ref.eventually, shouldFail = _ref.shouldFail;

_ref1 = Fixture.funcutils, fold = _ref1.fold, get = _ref1.get, invoke = _ref1.invoke;

should = require('should');

describe('IdResults', function() {
  var data, issue, n, result, _i, _len, _ref2, _results;
  data = OLD_ID_RES_FORMAT;
  result = new idresolution.IdResults(data);
  n = Object.keys(data).length;
  it('should have several matches', function() {
    result.getMatches().length.should.equal(n);
    result.getMatchIds().length.should.equal(n);
    return result.allMatchIds().length.should.equal(n);
  });
  it('should have fewer good matches', function() {
    result.goodMatchIds().length.should.be.below(n);
    result.getMatches('MATCH').length.should.be.below(n);
    result.getMatchIds('MATCH').length.should.be.below(n);
    result.getMatches('MATCH').length.should.be.above(0);
    result.getMatchIds('MATCH').length.should.be.above(0);
    return result.goodMatchIds().length.should.be.above(0);
  });
  _ref2 = ['DUPLICATE', 'OTHER', 'TYPE_CONVERTED'];
  _results = [];
  for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
    issue = _ref2[_i];
    _results.push(it("should have some " + (issue.toLowerCase()) + "s", function() {
      result.getMatches(issue).length.should.be.above(0);
      result.getMatchIds(issue).length.should.be.above(0);
      result.getMatches(issue).length.should.be.below(n);
      result.getMatchIds(issue).length.should.be.below(n);
      return result.getMatchIds(issue).length.should.not.equal(result.goodMatchIds().length);
    }));
  }
  return _results;
});

/*
describe 'CategoryResults', ->

  fixture = fs.readFileSync "#{ __dirname }/data/category-id-resolution-format.json", 'utf8'
  data = JSON.parse fixture
  result = new idresolution.CategoryResults data
  n = Object.keys(data).length

  it 'should have several matches', ->

    result.getMatches().length.should.equal n
    result.getMatchIds().length.should.equal n
    result.allMatchIds().length.should.equal n

  it 'should have fewer good matches', ->
    result.goodMatchIds().length.should.be.below n
    result.getMatches('MATCH').length.should.be.below n
    result.getMatchIds('MATCH').length.should.be.below n
    result.getMatches('MATCH').length.should.be.above 0
    result.getMatchIds('MATCH').length.should.be.above 0
    result.goodMatchIds().length.should.be.above 0

  for issue in ['DUPLICATE', 'OTHER', 'TYPE_CONVERTED']
    it "should have some #{ issue.toLowerCase() }s", ->
      result.getMatches(issue).length.should.be.above 0
      result.getMatchIds(issue).length.should.be.above 0
      result.getMatches(issue).length.should.be.below n
      result.getMatchIds(issue).length.should.be.below n
      result.getMatchIds(issue).length.should.not.equal result.goodMatchIds().length
*/


cleanUp = function(done) {
  var pass;
  pass = function() {
    return done();
  };
  return this.promise.then(invoke('del')).then(pass, pass);
};

testIDResolutionAgainst = function(service, extraTests) {
  var type;
  if (extraTests == null) {
    extraTests = {};
  }
  type = 'Employee';
  describe('#resolveIds()', function() {
    return it('should fail', shouldFail(service.resolveIds));
  });
  describe('#resolveIds(job)', function() {
    var identifiers;
    identifiers = ['anne', 'brenda', 'carol', 'Foo Bar', 'fatou'];
    this.beforeAll(prepare(function() {
      return service.resolveIds({
        identifiers: identifiers,
        type: type
      });
    }));
    this.afterAll(cleanUp);
    it('should produce a job', eventually(should.exist));
    it('should get resolved', eventually(function(job) {
      return job.wait();
    }));
    it('should report stats', eventually(function(job) {
      return job.wait().then(function(results) {
        var stats;
        stats = results.getStats();
        should.exist(stats);
        stats.should.have.properties('objects', 'identifiers');
        stats.identifiers.matches.should.equal(4);
        stats.identifiers.issues.should.equal(0);
        stats.objects.matches.should.equal(4);
        return stats.objects.issues.should.equal(0);
      });
    }));
    it('should find four employees', eventually(function(job) {
      return job.poll().then(function(results) {
        return results.allMatchIds().length.should.equal(4);
      });
    }));
    it('should find four good employees', eventually(function(job) {
      return job.poll().then(function(results) {
        return results.goodMatchIds().length.should.equal(4);
      });
    }));
    it('should find four employee ids, which can be used', eventually(function(job) {
      var sumAges;
      sumAges = function(results) {
        var q;
        q = {
          select: ['Employee.age'],
          where: {
            id: results.allMatchIds()
          }
        };
        return service.values(q).then(fold(function(a, b) {
          return a + b;
        }));
      };
      return job.wait().then(sumAges).then(function(total) {
        return total.should.equal(215);
      });
    }));
    return typeof extraTests['#resolveIds(job)'] === "function" ? extraTests['#resolveIds(job)']() : void 0;
  });
  describe('#resolveIds(convertedTypes)', function() {
    var identifiers;
    identifiers = ['Sales'];
    this.beforeAll(prepare(function() {
      return service.resolveIds({
        identifiers: identifiers,
        type: type
      });
    }));
    this.afterAll(cleanUp);
    it('should produce a job', eventually(should.exist));
    it('should get resolved', eventually(function(job) {
      return job.wait();
    }));
    it('should find several employees:allMatchIds', eventually(function(job) {
      return job.poll().then(function(results) {
        results.allMatchIds().should.have.lengthOf(18);
        return results.getMatchIds().should.have.lengthOf(18);
      });
    }));
    return it('should find zero good employees', eventually(function(job) {
      return job.poll().then(function(results) {
        results.getStats('objects').matches.should.equal(0);
        results.getStats('identifiers').matches.should.equal(0);
        results.goodMatchIds().should.have.lengthOf(0);
        return results.getMatchIds('MATCH').should.have.lengthOf(0);
      });
    }));
  });
  return describe('#resolveIds(caseSensitiveJob)', function() {
    var caseSensitive, identifiers;
    identifiers = ['anne', 'Brenda', 'Carol', 'Foo Bar', 'Fatou'];
    caseSensitive = true;
    this.beforeAll(prepare(function() {
      return service.resolveIds({
        identifiers: identifiers,
        type: type,
        caseSensitive: caseSensitive
      });
    }));
    this.afterAll(cleanUp);
    it('should produce a job', eventually(should.exist));
    it('should get resolved', eventually(function(job) {
      return job.poll();
    }));
    it('should find three employees', eventually(function(job) {
      return job.poll().then(function(results) {
        return results.allMatchIds().length.should.equal(3);
      });
    }));
    return it('should increase its backoff on each poll', eventually(function(job) {
      return job.poll().then(function(results) {
        return job.decay.should.be.above(50);
      });
    }));
  });
};

describe('Service', function() {
  describe('current', function() {
    var service;
    service = new Fixture().service;
    return testIDResolutionAgainst(service, {
      '#resolveIds(job)': function() {
        return it('should find one unresolved identifier', eventually(function(job) {
          return job.wait().then(function(results) {
            results.unresolved.length.should.equal(1);
            return results.stats.identifiers.notFound.should.equal(1);
          });
        }));
      },
      '#resolveIds(convertedTypes)': function() {
        it('should find several employees:all', eventually(function(job) {
          return job.poll().then(function(results) {
            return results.stats.objects.all.should.equal(18);
          });
        }));
        return it('should find several employees:issues', eventually(function(job) {
          return job.poll().then(function(results) {
            return results.stats.objects.issues.should.equal(18);
          });
        }));
      }
    });
  });
  return describe('legacy', function() {
    var legacy;
    legacy = new Fixture().legacy;
    return testIDResolutionAgainst(legacy);
  });
});


},{"../../build-cov/id-resolution-job":2,"../../build/id-resolution-job":18,"./data/old-id-resolution-format.json":65,"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","__browserify_process":35,"should":41}],71:[function(require,module,exports){
var Fixture, eventually, normalise, prepare, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

normalise = function(s) {
  return s.replace(/\s+/gm, ' ').replace(/>\s*</gm, '><');
};

describe('Relevance of joins', function() {
  var service;
  service = new Fixture().service;
  describe('a query with irrelevant joins', function() {
    this.beforeAll(prepare(function() {
      return service.query({
        select: ['name'],
        from: 'Employee',
        joins: ['department']
      });
    }));
    it('should not include the irrelvant join in the output XML', eventually(function(q) {
      var expected, xml;
      expected = "<query model=\"testmodel\" view=\"Employee.name\" ></query>";
      xml = normalise(q.toXML());
      return xml.should.equal(expected);
    }));
    return it('should still have those joins though', eventually(function(q) {
      return q.isOuterJoined('department').should.be["true"];
    }));
  });
  return describe('a query with relevant joins', function() {
    this.beforeAll(prepare(function() {
      return service.query({
        select: ['name', 'department.name'],
        from: 'Employee',
        joins: ['department']
      });
    }));
    it('should not include the irrelvant join in the output XML', eventually(function(q) {
      var expected, xml;
      expected = normalise("<query model=\"testmodel\" view=\"Employee.name Employee.department.name\" >\n  <join path=\"Employee.department\" style=\"OUTER\"/>\n</query>");
      xml = normalise(q.toXML());
      return xml.should.equal(expected);
    }));
    return it('should still have those joins though', eventually(function(q) {
      return q.isOuterJoined('department').should.be["true"];
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],72:[function(require,module,exports){
var Service, eventually, prepare, should, shouldFail, _ref;

Service = require('./lib/fixture').Service;

_ref = require('./lib/utils'), shouldFail = _ref.shouldFail, prepare = _ref.prepare, eventually = _ref.eventually;

should = require('should');

describe('legacy service', function() {
  var service;
  service = Service.connect({
    root: 'http://www.metabolicmine.org/beta'
  });
  describe('Model', function() {
    this.beforeAll(prepare(function() {
      return service.fetchModel();
    }));
    return it('should be sensible', eventually(function(model) {
      var path;
      path = model.makePath('Organism.name');
      should.exist(path);
      path.isAttribute().should.be["true"];
      return path.getType().should.equal('String');
    }));
  });
  describe('Value Requests', function() {
    this.beforeAll(prepare(function() {
      return service.values({
        select: ['Organism.name']
      });
    }));
    return it('should return good data', eventually(function(creatures) {
      should.exist(creatures);
      return creatures.should.contain('Homo sapiens');
    }));
  });
  describe('fetch lists', function() {
    this.beforeAll(prepare(function() {
      return service.fetchLists();
    }));
    return it('should get a bunch of lists', eventually(function(lists) {
      should.exist(lists);
      return lists.length.should.be.above(0);
    }));
  });
  describe('find list', function() {
    this.beforeAll(prepare(function() {
      return service.fetchLists().then(function(_arg) {
        var list;
        list = _arg[0];
        return service.fetchList(list.name);
      });
    }));
    return it('should find a list', eventually(function(list) {
      should.exist(list);
      list.name.should.be.ok;
      return list.size.should.be.above(0);
    }));
  });
  return describe('finding non-existent list', function() {
    return it('should fail', shouldFail(function() {
      return service.fetchList('non-existent-list');
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],"./fixture":[function(require,module,exports){
module.exports=require('V5MhzQ');
},{}],"V5MhzQ":[function(require,module,exports){
var process=require("__browserify_process");var Fixture, Model, Query, Service, args, funcutils, legacy, _ref, _ref1, _ref2, _ref3;

if (process.env.IMJS_COV) {
  funcutils = require("../../../build-cov/util");
  _ref = require('../../../build-cov/service'), Service = _ref.Service, Query = _ref.Query, Model = _ref.Model;
} else {
  _ref1 = require('../../../build/service'), Service = _ref1.Service, Query = _ref1.Query, Model = _ref1.Model;
  funcutils = require("../../../build/util");
}

args = {
  root: (_ref2 = process.env.TESTMODEL_URL) != null ? _ref2 : 'localhost:8080/intermine-test',
  token: 'test-user-token'
};

legacy = {
  root: (_ref3 = process.env.LEGACY_URL) != null ? _ref3 : 'localhost:8080/legacy-test',
  token: 'test-user-token'
};

if (process.env.DEBUG) {
  console.log("Testing against " + args.root);
}

Fixture = (function() {
  function Fixture() {
    var _ref4;
    _ref4 = [args, legacy].map(Service.connect), this.service = _ref4[0], this.legacy = _ref4[1];
    this.allEmployees = {
      select: ['*'],
      from: 'Employee'
    };
    this.badQuery = {
      select: ['name'],
      from: 'Employee',
      where: {
        id: 'foo'
      }
    };
    this.olderEmployees = {
      select: ['*'],
      from: 'Employee',
      where: {
        age: {
          gt: 50
        }
      }
    };
    this.youngerEmployees = {
      select: ['*'],
      from: 'Employee',
      where: {
        age: {
          le: 50
        }
      }
    };
  }

  return Fixture;

})();

Fixture.funcutils = funcutils;

Fixture.utils = funcutils;

Fixture.Query = Query;

Fixture.Model = Model;

Fixture.Service = Service;

module.exports = Fixture;


},{"../../../build-cov/service":8,"../../../build-cov/util":11,"../../../build/service":24,"../../../build/util":27,"__browserify_process":35}],"enjK+c":[function(require,module,exports){
var Promise, after, always, cleanSlate, clear, error, eventually, invoke, needs, prepare, promising, report, shouldBeRejected, shouldFail, _ref,
  __slice = [].slice;

Promise = require('promise');

_ref = require('./fixture').funcutils, error = _ref.error, invoke = _ref.invoke;

clear = function(service, name) {
  return function() {
    return new Promise(function(resolve, reject) {
      var eh, replaceErrorHandler;
      eh = service.errorHandler;
      service.errorHandler = function() {};
      replaceErrorHandler = function() {
        service.errorHandler = eh;
        return resolve();
      };
      return service.fetchList(name).then(invoke('del')).then(replaceErrorHandler, replaceErrorHandler);
    });
  };
};

cleanSlate = function(service) {
  return always(function() {
    return service.fetchLists().then(function(lists) {
      var l;
      return after((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lists.length; _i < _len; _i++) {
          l = lists[_i];
          if (l.hasTag('test')) {
            _results.push(l.del());
          }
        }
        return _results;
      })());
    });
  });
};

after = function(promises) {
  if (promises != null ? promises.length : void 0) {
    return Promise.all(promises);
  } else {
    return Promise.from(true);
  }
};

report = function(done, promise) {
  return promise.done((function() {
    return done();
  }), done);
};

prepare = function(promiser) {
  return function(done) {
    return report(done, this.promise = promiser());
  };
};

eventually = function(test) {
  return function(done) {
    return report(done, this.promise.then(test));
  };
};

promising = function(p, test) {
  return function(done) {
    return report(done, p.then(test));
  };
};

always = function(fn) {
  return function(done) {
    return fn().then((function() {
      return done();
    }), (function() {
      return done();
    }));
  };
};

shouldFail = function(fn) {
  return shouldBeRejected(fn());
};

shouldBeRejected = function(promise) {
  return function(done) {
    var onErr, onSucc;
    onErr = function() {
      return done();
    };
    onSucc = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return done(new Error("Expected failure, got: [" + (args.join(', ')) + "]"));
    };
    return promise.then(onSucc, onErr);
  };
};

needs = function(exp) {
  return function(service) {
    return function(fn) {
      return prepare(function() {
        return service.fetchVersion().then(function(actual) {
          if (actual >= exp) {
            return fn(service);
          } else {
            return error("Service at " + actual + ", must be >= " + exp);
          }
        });
      });
    };
  };
};

module.exports = {
  cleanSlate: cleanSlate,
  after: after,
  clear: clear,
  report: report,
  eventually: eventually,
  promising: promising,
  prepare: prepare,
  always: always,
  shouldFail: shouldFail,
  shouldBeRejected: shouldBeRejected,
  needs: needs
};


},{"./fixture":"V5MhzQ","promise":38}],"./lib/utils":[function(require,module,exports){
module.exports=require('enjK+c');
},{}],77:[function(require,module,exports){
var Fixture, always, cleanSlate, clear, eventually, get, invoke, namePrefix, prepare, should, shouldFail, tags, _ref, _ref1,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), cleanSlate = _ref.cleanSlate, prepare = _ref.prepare, always = _ref.always, clear = _ref.clear, eventually = _ref.eventually, shouldFail = _ref.shouldFail;

_ref1 = Fixture.funcutils, get = _ref1.get, invoke = _ref1.invoke;

should = require('should');

tags = ['js', 'testing', 'mocha', 'imjs'];

namePrefix = 'temp-testing-list-operations-';

describe('Service', function() {
  var service;
  service = new Fixture().service;
  service.errorHandler = function() {};
  this.slow(500);
  this.beforeAll(cleanSlate(service));
  describe('#complement()', function() {
    return it('should fail', shouldFail(service.complement));
  });
  describe('#complement(opts)', function() {
    var clearUp, expectedMember, opts;
    opts = {
      from: 'some favs-some unknowns',
      exclude: 'My-Favourite-Employees',
      tags: tags,
      name: 'List created from subtraction'
    };
    expectedMember = 'Brenda';
    clearUp = clear(service, opts.name);
    this.beforeAll(prepare(function() {
      return clearUp().then(function() {
        return service.complement(opts);
      });
    }));
    this.afterAll(always(clearUp));
    it('should have succeeded', eventually(function() {
      return true;
    }));
    it('should yield a list', eventually(function(list) {
      return should.exist(list);
    }));
    it('should have the right name', eventually(function(list) {
      return list.name.should.equal(opts.name);
    }));
    it('should have the right number of members', eventually(function(list) {
      return list.size.should.equal(2);
    }));
    it('should have the correct tags', eventually(function(list) {
      var t, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        _results.push(list.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
    return it("should contain " + expectedMember, eventually(function(list) {
      return list.contents().then(function(members) {
        var m;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = members.length; _i < _len; _i++) {
            m = members[_i];
            _results.push(m.name);
          }
          return _results;
        })()).should.include(expectedMember);
      });
    }));
  });
  describe('#complement(opts) {Array of list names}', function() {
    var clearUp, expectedMember, opts;
    opts = {
      from: ['some favs-some unknowns', 'Umlaut holders'],
      exclude: ['My-Favourite-Employees', 'The great unknowns'],
      tags: tags,
      name: 'List created from subtraction of arrays of names'
    };
    expectedMember = 'Frank Möllers';
    clearUp = clear(service, opts.name);
    this.beforeAll(prepare(function() {
      return clearUp().then(function() {
        return service.complement(opts);
      });
    }));
    this.afterAll(always(clearUp));
    it('should have succeeded', eventually(function() {
      return true;
    }));
    it('should yield a list', eventually(function(list) {
      return should.exist(list);
    }));
    it('should have the right name', eventually(function(list) {
      return list.name.should.equal(opts.name);
    }));
    it('should have the right number of members', eventually(function(list) {
      return list.size.should.equal(2);
    }));
    it('should have the correct tags', eventually(function(list) {
      var t, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        _results.push(list.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
    return it("should contain " + expectedMember, eventually(function(list) {
      return list.contents().then(function(members) {
        var m;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = members.length; _i < _len; _i++) {
            m = members[_i];
            _results.push(m.name);
          }
          return _results;
        })()).should.include(expectedMember);
      });
    }));
  });
  describe('#complement(opts) {Array of Lists}', function() {
    var clearUp, exclude, expectedMember, from, opts, setup;
    from = ['some favs-some unknowns', 'Umlaut holders'];
    exclude = ['My-Favourite-Employees', 'The great unknowns'];
    opts = {
      tags: tags,
      name: 'List created from subtraction of arrays of names'
    };
    expectedMember = 'Frank Möllers';
    clearUp = clear(service, opts.name);
    setup = function(lists) {
      var l;
      opts.from = (function() {
        var _i, _len, _ref2, _results;
        _results = [];
        for (_i = 0, _len = lists.length; _i < _len; _i++) {
          l = lists[_i];
          if (_ref2 = l.name, __indexOf.call(from, _ref2) >= 0) {
            _results.push(l);
          }
        }
        return _results;
      })();
      opts.exclude = (function() {
        var _i, _len, _ref2, _results;
        _results = [];
        for (_i = 0, _len = lists.length; _i < _len; _i++) {
          l = lists[_i];
          if (_ref2 = l.name, __indexOf.call(exclude, _ref2) >= 0) {
            _results.push(l);
          }
        }
        return _results;
      })();
      return service.complement(opts);
    };
    this.beforeAll(prepare(function() {
      return clearUp().then(function() {
        return service.fetchLists();
      }).then(setup);
    }));
    this.afterAll(always(clearUp));
    it('should have succeeded', eventually(function() {
      return true;
    }));
    it('should yield a list', eventually(function(list) {
      return should.exist(list);
    }));
    it('should have the right name', eventually(function(list) {
      return list.name.should.equal(opts.name);
    }));
    it('should have the right number of members', eventually(function(list) {
      return list.size.should.equal(2);
    }));
    it('should have the correct tags', eventually(function(list) {
      var t, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        _results.push(list.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
    return it("should contain " + expectedMember, eventually(function(list) {
      return list.contents().then(function(members) {
        var m;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = members.length; _i < _len; _i++) {
            m = members[_i];
            _results.push(m.name);
          }
          return _results;
        })()).should.include(expectedMember);
      });
    }));
  });
  return describe('#complement(opts, cb)', function() {
    var clearUp, opts;
    opts = {
      from: ['some favs-some unknowns', 'Umlaut holders'],
      exclude: ['My-Favourite-Employees', 'The great unknowns'],
      tags: tags,
      name: 'List created from subtraction of arrays of names'
    };
    clearUp = clear(service, opts.name);
    this.beforeAll(prepare(clearUp));
    this.afterAll(always(clearUp));
    return it('should support the callback API', function(done) {
      return service.complement(opts, function(err, list) {
        var e, t, _i, _len;
        if (err != null) {
          return done(err);
        }
        try {
          should.exist(list);
          list.name.should.equal(opts.name);
          list.size.should.equal(2);
          for (_i = 0, _len = tags.length; _i < _len; _i++) {
            t = tags[_i];
            list.hasTag(t).should.be["true"];
          }
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],78:[function(require,module,exports){
var Fixture, after, always, clear, eventually, invoke, prepare, should, success, _ref, _ref1;

_ref = require('./lib/utils'), prepare = _ref.prepare, after = _ref.after, eventually = _ref.eventually, always = _ref.always, clear = _ref.clear;

should = require('should');

Fixture = require('./lib/fixture');

_ref1 = Fixture.funcutils, invoke = _ref1.invoke, success = _ref1.success;

describe('List', function() {
  var service;
  service = new Fixture().service;
  this.beforeAll(always(function() {
    return service.fetchLists().then(function(lists) {
      var l;
      return after((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lists.length; _i < _len; _i++) {
          l = lists[_i];
          if (l.name.match(/_copy/) || l.hasTag('copy')) {
            _results.push(l.del());
          }
        }
        return _results;
      })());
    });
  }));
  this.slow(400);
  describe('#copy()', function() {
    var temp;
    temp = null;
    this.beforeAll(prepare(function() {
      return temp = service.fetchList('My-Favourite-Employees').then(function(l) {
        return l.copy();
      });
    }));
    this.afterAll(always(function() {
      if (temp != null) {
        return temp.then(function(l) {
          return l.del();
        });
      } else {
        return success();
      }
    }));
    it('should produce a copy', eventually(function(copy) {
      return should.exist(copy);
    }));
    it('should have the same number of members', eventually(function(copy) {
      return copy.size.should.equal(4);
    }));
    return it('should have a different name', eventually(function(copy) {
      return copy.name.should.not.equal('My-Favourite-Employees');
    }));
  });
  describe('#copy({tags})', function() {
    var args, temp;
    temp = null;
    args = {
      tags: ['temp', 'testing', 'node', 'mocha', 'copy']
    };
    this.beforeAll(prepare(function() {
      return temp = service.fetchList('My-Favourite-Employees').then(function(l) {
        return l.copy(args);
      });
    }));
    this.afterAll(always(function() {
      if (temp != null) {
        return temp.then(function(l) {
          return l.del();
        });
      } else {
        return success();
      }
    }));
    it('should produce a copy', eventually(function(copy) {
      return should.exist(copy);
    }));
    it('should have the same number of members', eventually(function(copy) {
      return copy.size.should.equal(4);
    }));
    it('should have a different name', eventually(function(copy) {
      return copy.name.should.not.equal('My-Favourite-Employees');
    }));
    return it('should have all the tags we added', eventually(function(copy) {
      var t, _i, _len, _ref2, _results;
      _ref2 = args.tags;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        t = _ref2[_i];
        _results.push(copy.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
  });
  describe('#copy({name, tags})', function() {
    var args, cleanUp;
    args = {
      name: 'temp-copy-of-favs',
      tags: ['temp', 'testing', 'node', 'mocha', 'copy']
    };
    cleanUp = clear(service, args.name);
    this.beforeAll(prepare(function() {
      return cleanUp().then(function() {
        return service.fetchList('My-Favourite-Employees').then(function(l) {
          return l.copy(args);
        });
      });
    }));
    this.afterAll(always(cleanUp));
    it('should produce a copy', eventually(function(copy) {
      return should.exist(copy);
    }));
    it('should have the same number of members', eventually(function(copy) {
      return copy.size.should.equal(4);
    }));
    it('should have a different name', eventually(function(copy) {
      return copy.name.should.not.equal('My-Favourite-Employees');
    }));
    it('should have all the tags we added', eventually(function(copy) {
      var t, _i, _len, _ref2, _results;
      _ref2 = args.tags;
      _results = [];
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        t = _ref2[_i];
        _results.push(copy.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
    return it('should in fact have the name we gave it', eventually(function(copy) {
      return copy.name.should.equal(args.name);
    }));
  });
  describe('#copy(name)', function() {
    var cleanUp, name;
    name = 'temp-copy-of-favs';
    cleanUp = clear(service, name);
    this.beforeAll(prepare(function() {
      return cleanUp().then(function() {
        return service.fetchList('My-Favourite-Employees').then(function(l) {
          return l.copy(name);
        });
      });
    }));
    this.afterAll(always(cleanUp));
    it('should produce a copy', eventually(function(copy) {
      return should.exist(copy);
    }));
    it('should have the same number of members', eventually(function(copy) {
      return copy.size.should.equal(4);
    }));
    it('should have a different name', eventually(function(copy) {
      return copy.name.should.not.equal('My-Favourite-Employees');
    }));
    return it('should in fact have the name we gave it', eventually(function(copy) {
      return copy.name.should.equal(name);
    }));
  });
  describe('#copy(name, cb)', function() {
    var cleanUp, name;
    name = 'temp-copy-of-favs-with-cb';
    cleanUp = clear(service, name);
    this.beforeAll(prepare(cleanUp));
    this.afterAll(always(cleanUp));
    return it('should make a list with the right name and size', function(done) {
      var testCopy;
      testCopy = invoke('copy', name, function(err, copy) {
        var e;
        if (err != null) {
          return done(err);
        }
        try {
          should.exist(copy);
          copy.size.should.equal(4);
          copy.name.should.not.equal('My-Favourite-Employees');
          copy.name.should.equal(name);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
      return service.fetchList('My-Favourite-Employees').done(testCopy, done);
    });
  });
  describe('#copy({name, tags}, cb)', function() {
    var args, cleanUp;
    args = {
      name: 'temp-copy-of-favs',
      tags: ['temp', 'testing', 'node', 'mocha', 'copy']
    };
    cleanUp = clear(service, args.name);
    this.beforeAll(prepare(cleanUp));
    this.afterAll(always(cleanUp));
    return it('should make a list with the right name and size', function(done) {
      var testCopy;
      testCopy = invoke('copy', args, function(err, copy) {
        var e, t, _i, _len, _ref2;
        if (err != null) {
          return done(err);
        }
        try {
          should.exist(copy);
          copy.size.should.equal(4);
          copy.name.should.not.equal('My-Favourite-Employees');
          copy.name.should.equal(args.name);
          _ref2 = args.tags;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            t = _ref2[_i];
            copy.hasTag(t).should.be["true"];
          }
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
      return service.fetchList('My-Favourite-Employees').done(testCopy, done);
    });
  });
  return describe('#copy(cb)', function() {
    var made;
    made = {};
    this.afterAll(always(function() {
      if (made.name != null) {
        return service.fetchList(made.name).then(invoke('del'));
      } else {
        return success();
      }
    }));
    return it('should make a list with the right name and size', function(done) {
      var testCopy;
      testCopy = invoke('copy', function(err, copy) {
        var e;
        if (err != null) {
          return done(err);
        }
        try {
          should.exist(copy);
          made.name = copy.name;
          copy.size.should.equal(4);
          copy.name.should.not.equal('My-Favourite-Employees');
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
      return service.fetchList('My-Favourite-Employees').done(testCopy, done);
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],79:[function(require,module,exports){
var Fixture, always, clear, eventually, get, invoke, listOpTest, namePrefix, prepare, testTags, _ref, _ref1;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, always = _ref.always, clear = _ref.clear, eventually = _ref.eventually;

_ref1 = Fixture.funcutils, get = _ref1.get, invoke = _ref1.invoke;

testTags = ['js', 'testing', 'mocha', 'imjs', '__folder__:test'];

namePrefix = 'temp-testing-list-operations-';

listOpTest = function(_arg) {
  var args, clearList, expectedMember, lists, method, service, size;
  method = _arg.method, expectedMember = _arg.expectedMember, lists = _arg.lists, size = _arg.size;
  service = new Fixture().service;
  args = {
    tags: [method].concat(testTags),
    name: namePrefix + method,
    lists: lists
  };
  clearList = clear(service, args.name);
  return describe("a list created by " + method, function() {
    describe('using the promise api', function() {
      var gotInputs;
      gotInputs = args.lists.map(service.fetchList);
      this.slow(400);
      this.afterAll(always(clearList));
      this.beforeAll(prepare(function() {
        return clearList().then(function() {
          return service[method](args);
        });
      }));
      it("should have " + size + " members", eventually(function(list) {
        return list.size.should.equal(size);
      }));
      it("should be called " + args.name, eventually(function(list) {
        return list.name.should.equal(args.name);
      }));
      it("should contain " + expectedMember, eventually(function(list) {
        return list.contents().then(function(contents) {
          var x;
          return ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = contents.length; _i < _len; _i++) {
              x = contents[_i];
              _results.push(x.name);
            }
            return _results;
          })()).should.include(expectedMember);
        });
      }));
      it('should have the test tags', eventually(function(list) {
        var t, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = testTags.length; _i < _len; _i++) {
          t = testTags[_i];
          _results.push(list.hasTag(t).should.be["true"]);
        }
        return _results;
      }));
      return it('should be in the test folder', eventually(function(list) {
        return list.folders.should.include('test');
      }));
    });
    return describe('using the callback api', function() {
      this.slow(400);
      this.afterAll(always(clearList));
      this.beforeAll(always(clearList));
      return it('should have the right size, name, and all the tags we specified', function(done) {
        return service[method](args, function(err, list) {
          var e, t, _i, _len;
          if (err != null) {
            return done(err);
          }
          try {
            list.size.should.equal(size);
            list.name.should.equal(args.name);
            for (_i = 0, _len = testTags.length; _i < _len; _i++) {
              t = testTags[_i];
              list.hasTag(t).should.be["true"];
            }
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
    });
  });
};

describe('List Operations', function() {
  listOpTest({
    method: 'intersect',
    expectedMember: 'David Brent',
    size: 2,
    lists: ['My-Favourite-Employees', 'some favs-some unknowns-some umlauts']
  });
  listOpTest({
    method: 'union',
    expectedMember: 'David Brent',
    size: 6,
    lists: ['My-Favourite-Employees', 'Umlaut holders']
  });
  listOpTest({
    method: 'merge',
    expectedMember: 'David Brent',
    size: 6,
    lists: ['My-Favourite-Employees', 'Umlaut holders']
  });
  return listOpTest({
    method: 'diff',
    expectedMember: 'Brenda',
    size: 4,
    lists: ['The great unknowns', 'some favs-some unknowns-some umlauts']
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],80:[function(require,module,exports){
var Fixture, always, clear, curry, eventually, invoke, prepare, sequence, should, success, _ref, _ref1;

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always, clear = _ref.clear;

should = require('should');

Fixture = require('./lib/fixture');

_ref1 = Fixture.funcutils, success = _ref1.success, sequence = _ref1.sequence, curry = _ref1.curry, invoke = _ref1.invoke;

describe('List', function() {
  var FAVS, remove, service, tags;
  service = new Fixture().service;
  remove = curry(clear, service);
  FAVS = 'My-Favourite-Employees';
  tags = ['temp', 'testing', 'node', 'mocha', 'rename'];
  this.slow(500);
  describe('#rename(name)', function() {
    var cleanUp, name, newName;
    name = 'temp-copy-of-favs-rename';
    newName = 'temp-renamed';
    cleanUp = function() {
      return sequence(remove(name), remove(newName));
    };
    this.afterAll(always(cleanUp));
    this.beforeAll(prepare(function() {
      return cleanUp().then(function() {
        return service.fetchList(FAVS).then(invoke('copy', {
          tags: tags,
          name: name
        })).then(function(copy) {
          return copy.rename(newName);
        });
      });
    }));
    it('should exist', eventually(function(list) {
      return should.exist(list);
    }));
    it('should be called ' + newName, eventually(function(list) {
      return list.name.should.equal(newName);
    }));
    return it('should have 4 members', eventually(function(list) {
      return list.size.should.equal(4);
    }));
  });
  return describe('#rename(name, cb)', function() {
    var cleanup, name, newName;
    name = 'temp-copy-of-favs-rename-w-cb';
    newName = 'temp-renamed';
    cleanup = function() {
      return sequence(remove(name), remove(newName));
    };
    this.beforeAll(prepare(cleanup));
    this.afterAll(always(cleanup));
    return it('should support the callback API', function(done) {
      var test;
      test = function(copy) {
        return copy.rename(newName, function(err, renamed) {
          var e;
          if (err != null) {
            return done(err);
          }
          try {
            copy.name.should.equal(newName);
            copy.size.should.equal(4);
            should.exist(renamed);
            renamed.name.should.equal(newName);
            renamed.size.should.equal(4);
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      };
      return service.fetchList(FAVS).then(invoke('copy', {
        tags: tags,
        name: name
      })).done(test, done);
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],81:[function(require,module,exports){
var Fixture, always, eventually, prepare, should, _ref;

_ref = require('./lib/utils'), always = _ref.always, prepare = _ref.prepare, eventually = _ref.eventually;

should = require('should');

Fixture = require('./lib/fixture');

describe('List', function() {
  var origList, service;
  service = new Fixture().service;
  origList = 'My-Favourite-Employees';
  describe('#fetchTags()', function() {
    this.beforeAll(prepare(function() {
      return service.fetchList(origList).then(function(l) {
        return l.fetchTags();
      });
    }));
    return it('should start by finding no tags', eventually(function(tags) {
      return tags.length.should.equal(0);
    }));
  });
  describe('#addTags(tags)', function() {
    var list, tags;
    tags = ['test', 'mocha', 'addTags'];
    list = null;
    this.beforeAll(prepare(function() {
      return service.fetchList(origList).then(function(l) {
        list = l;
        return l.addTags(tags);
      });
    }));
    this.afterAll(always(function() {
      return service.fetchList(origList).then(function(l) {
        return l.removeTags(tags);
      });
    }));
    it('should yield three tags', eventually(function(ret) {
      return should.exist(ret);
    }));
    it('should yield three tags', eventually(function(ret) {
      return ret.length.should.equal(3);
    }));
    it('should yield the tags themselves', eventually(function(ret) {
      return ret.should.include('test');
    }));
    return it('should have updated the list itself', eventually(function(ret) {
      return list.tags.should.eql(ret);
    }));
  });
  describe('#fetchTags() after update', function() {
    var list, tags;
    tags = ['test', 'mocha', 'addTags'];
    list = null;
    this.beforeAll(prepare(function() {
      return service.fetchList(origList).then(function(l) {
        list = l;
        return l.addTags(tags).then(function() {
          return l.fetchTags();
        });
      });
    }));
    this.afterAll(always(function() {
      return service.fetchList(origList).then(function(l) {
        return l.removeTags(tags);
      });
    }));
    it('should yield three tags', eventually(function(ret) {
      return ret.length.should.equal(3);
    }));
    it('should yield the tags themselves', eventually(function(ret) {
      return ret.should.include('test');
    }));
    return it('should have updated the list itself', eventually(function(ret) {
      return list.tags.should.eql(ret);
    }));
  });
  return describe('#removeTags(tags)', function() {
    var tags;
    tags = ['test', 'mocha', 'removeTags', 'toRemove'];
    this.beforeAll(prepare(function() {
      return service.fetchList(origList).then(function(l) {
        return l.addTags(tags).then(function() {
          return l.removeTags('toRemove');
        });
      });
    }));
    this.afterAll(always(function() {
      return service.fetchList(origList).then(function(l) {
        return l.removeTags(tags);
      });
    }));
    it('should yield three tags', eventually(function(ret) {
      return ret.length.should.equal(3);
    }));
    it('should yield the tags themselves', eventually(function(ret) {
      ret.should.include('test');
      return ret.should.include('removeTags');
    }));
    return it('should no longer include the removed tag', eventually(function(ret) {
      return ret.should.not.include('toRemove');
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],82:[function(require,module,exports){
var Fixture, IDENTIFIERS, always, cleanSlate, clear, eventually, prepare, should, shouldFail, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), cleanSlate = _ref.cleanSlate, prepare = _ref.prepare, always = _ref.always, clear = _ref.clear, eventually = _ref.eventually, shouldFail = _ref.shouldFail;

should = require('should');

IDENTIFIERS = "anne, \"brenda\"\ncarol\n\"David Brent\" Edgar\nrubbishy identifiers\nFatou";

describe('Service', function() {
  var service;
  service = new Fixture().service;
  this.beforeAll(cleanSlate(service));
  this.slow(500);
  describe('#createList()', function() {
    return it('should fail', shouldFail(service.createList));
  });
  describe('#createList(opts, ids)', function() {
    var cleanUp, opts;
    opts = {
      name: 'temp-list-uploaded',
      type: 'Employee',
      description: 'A list created to test the list upload mechanism',
      tags: ['temp', 'imjs', 'test', 'node']
    };
    cleanUp = clear(service, opts.name);
    this.beforeAll(prepare(function() {
      return cleanUp().then(function() {
        return service.createList(opts, IDENTIFIERS);
      });
    }));
    this.afterAll(always(cleanUp));
    it('should have succeeded', eventually(function() {
      return true;
    }));
    it('should yield a list', eventually(should.exist));
    it('should have the right name', eventually(function(list) {
      return list.name.should.equal(opts.name);
    }));
    it('should have the right number of members', eventually(function(list) {
      return list.size.should.equal(5);
    }));
    return it('should have the right tags', eventually(function(list) {
      var t, _i, _len, _ref1, _results;
      _ref1 = opts.tags;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        t = _ref1[_i];
        _results.push(list.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
  });
  return describe('#createList(opts-id-array, ids)', function() {
    var cleanUp, ids, opts;
    ids = ["anne", "brenda", "carol", "David Brent", "Edgar", "rubbishy", "identifiers", "Fatou"];
    opts = {
      name: 'temp-list-uploaded',
      type: 'Employee',
      description: 'A list created to test the list upload mechanism',
      tags: ['temp', 'imjs', 'test', 'node']
    };
    cleanUp = clear(service, opts.name);
    this.beforeAll(prepare(function() {
      return cleanUp().then(function() {
        return service.createList(opts, ids);
      });
    }));
    this.afterAll(always(cleanUp));
    it('should have succeeded', eventually(function() {
      return true;
    }));
    it('should yield a list', eventually(should.exist));
    it('should have the right name', eventually(function(list) {
      return list.name.should.equal(opts.name);
    }));
    it('should have the right number of members', eventually(function(list) {
      return list.size.should.equal(5);
    }));
    return it('should have the right tags', eventually(function(list) {
      var t, _i, _len, _ref1, _results;
      _ref1 = opts.tags;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        t = _ref1[_i];
        _results.push(list.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],83:[function(require,module,exports){
var Fixture, cleanSlate, eventually, get, prepare, report, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, report = _ref.report, eventually = _ref.eventually, cleanSlate = _ref.cleanSlate;

get = Fixture.funcutils.get;

describe('Service#fetchListsContaining', function() {
  var service;
  service = new Fixture().service;
  this.beforeAll(cleanSlate(service));
  describe('searching for public ids', function() {
    this.beforeAll(prepare(function() {
      return service.fetchListsContaining({
        type: 'Employee',
        publicId: 'Brenda'
      });
    }));
    it('should find the right number of lists', eventually(function(ls) {
      return ls.length.should.equal(2);
    }));
    return it('should find "the great unknowns"', eventually(function(ls) {
      var l;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = ls.length; _i < _len; _i++) {
          l = ls[_i];
          _results.push(l.name);
        }
        return _results;
      })()).should.include('The great unknowns');
    }));
  });
  describe('searching with the callback api', function() {
    return it('should still work', function(done) {
      var options;
      options = {
        type: 'Employee',
        publicId: 'Brenda'
      };
      return service.fetchListsContaining(options, function(err, lists) {
        var e, l;
        if (err != null) {
          return done(err);
        }
        try {
          lists.length.should.equal(2);
          ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = lists.length; _i < _len; _i++) {
              l = lists[_i];
              _results.push(l.name);
            }
            return _results;
          })()).should.include('The great unknowns');
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  return describe('searching for internal ids', function() {
    this.beforeAll(prepare(function() {
      var q;
      q = {
        select: ['Employee.id'],
        where: {
          name: 'David Brent'
        }
      };
      return service.values(q).then(get(0)).then(function(id) {
        return service.fetchListsContaining({
          id: id
        });
      });
    }));
    it('should find the right number of lists', eventually(function(ls) {
      return ls.length.should.equal(3);
    }));
    return it('should find "My-Favourite-Employees"', eventually(function(ls) {
      var l;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = ls.length; _i < _len; _i++) {
          l = ls[_i];
          _results.push(l.name);
        }
        return _results;
      })()).should.include('My-Favourite-Employees');
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],84:[function(require,module,exports){
var Fixture, eventually, prepare, should, _ref;

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

should = require('should');

Fixture = require('./lib/fixture');

describe('Service', function() {
  var service;
  service = new Fixture().service;
  describe('#fetchLists()', function() {
    this.beforeAll(prepare(function() {
      return service.fetchLists();
    }));
    it('should find at least one list', eventually(function(lists) {
      return lists.length.should.be.above(0);
    }));
    return it('should contain "My-Favourite-Employees"', eventually(function(lists) {
      var l;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = lists.length; _i < _len; _i++) {
          l = lists[_i];
          _results.push(l.name);
        }
        return _results;
      })()).should.include('My-Favourite-Employees');
    }));
  });
  describe('#fetchLists (err, list) ->', function() {
    return it('should find "My-Favourite-Employees"', function(done) {
      return service.fetchLists(function(err, lists) {
        var e, l;
        if (err != null) {
          return done(err);
        }
        try {
          ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = lists.length; _i < _len; _i++) {
              l = lists[_i];
              _results.push(l.name);
            }
            return _results;
          })()).should.include('My-Favourite-Employees');
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  describe('#findLists name', function() {
    this.beforeAll(prepare(function() {
      return service.findLists('My-Favourite-Employees');
    }));
    it('should find one list', eventually(function(lists) {
      return lists.length.should.equal(1);
    }));
    it('should find the right list', eventually(function(_arg) {
      var list;
      list = _arg[0];
      return list.name.should.equal('My-Favourite-Employees');
    }));
    return it('should have 4 members', eventually(function(_arg) {
      var list;
      list = _arg[0];
      return list.size.should.equal(4);
    }));
  });
  describe('#findLists name, (err, lists) ->', function() {
    return it('should find the right list', function(done) {
      return service.findLists('My-Favourite-Employees', function(err, lists) {
        var e;
        if (err != null) {
          return done(err);
        }
        try {
          lists.length.should.equal(1);
          lists[0].size.should.equal(4);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  describe('#fetchList()', function() {
    this.beforeAll(prepare(function() {
      return service.fetchList('My-Favourite-Employees');
    }));
    it('should find that list', eventually(function(list) {
      return should.exist(list);
    }));
    it('should find the right list', eventually(function(list) {
      return list.name.should.equal('My-Favourite-Employees');
    }));
    it('should have 4 members', eventually(function(list) {
      return list.size.should.equal(4);
    }));
    return it('should contain David', eventually(function(list) {
      return list.contents().then(function(members) {
        var m;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = members.length; _i < _len; _i++) {
            m = members[_i];
            _results.push(m.name);
          }
          return _results;
        })()).should.include('David Brent');
      });
    }));
  });
  return describe('#fetchList (err, list) ->', function() {
    return it('should find "My-Favourite-Employees"', function(done) {
      return service.fetchList('My-Favourite-Employees', function(err, list) {
        var e;
        if (err != null) {
          done(err);
        }
        try {
          should.exist(list);
          list.name.should.equal('My-Favourite-Employees');
          list.size.should.equal(4);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],85:[function(require,module,exports){
var Deferred, Fixture, error, eventually, invoke, prepare, serviceIs13, should, success, _ref, _ref1,
  __slice = [].slice;

Deferred = require('underscore.deferred').Deferred;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

_ref1 = Fixture.funcutils, invoke = _ref1.invoke, success = _ref1.success, error = _ref1.error;

should = require('should');

serviceIs13 = function(service) {
  return service.fetchVersion().then(function(v) {
    if (v >= 13) {
      return success(service);
    } else {
      return error('Service must be at version 13');
    }
  });
};

describe('Query', function() {
  describe('summary of a path with nulls', function() {
    var allEmployees, service, _ref2;
    _ref2 = new Fixture(), service = _ref2.service, allEmployees = _ref2.allEmployees;
    this.beforeEach(prepare(function() {
      return serviceIs13(service).then(function(s) {
        return s.query(allEmployees).then(invoke('summarise', 'end'));
      });
    }));
    return it('should find lots of nulls', eventually(function(_arg) {
      var rest, top, _ref3;
      _ref3 = _arg.results, top = _ref3[0], rest = 2 <= _ref3.length ? __slice.call(_ref3, 1) : [];
      return should.not.exist(top.item);
    }));
  });
  describe('Now restricting to nulls with multi-value', function() {
    var allEmployees, service, _ref2;
    _ref2 = new Fixture(), service = _ref2.service, allEmployees = _ref2.allEmployees;
    allEmployees.where = {
      end: {
        'ONE OF': [null, 0, 8]
      }
    };
    this.beforeEach(prepare(function() {
      return serviceIs13(service).then(function(s) {
        return s.query(allEmployees).then(invoke('summarise', 'end'));
      });
    }));
    it('should find lots of nulls', eventually(function(_arg) {
      var rest, top, _ref3;
      _ref3 = _arg.results, top = _ref3[0], rest = 2 <= _ref3.length ? __slice.call(_ref3, 1) : [];
      return should.not.exist(top.item);
    }));
    return it('should find what we asked for', eventually(function(_arg) {
      var results;
      results = _arg.results;
      return results.length.should.equal(3);
    }));
  });
  return describe('Now restricting to non-nulls with multi-value constraints', function() {
    var allEmployees, service, _ref2;
    _ref2 = new Fixture(), service = _ref2.service, allEmployees = _ref2.allEmployees;
    allEmployees.where = {
      end: {
        'NONE OF': [null, 0, 8]
      }
    };
    this.beforeEach(prepare(function() {
      return serviceIs13(service).then(function(s) {
        return s.query(allEmployees).then(invoke('summarise', 'end'));
      });
    }));
    it('should not find any nulls', eventually(function(_arg) {
      var results, x, _i, _len, _results;
      results = _arg.results;
      _results = [];
      for (_i = 0, _len = results.length; _i < _len; _i++) {
        x = results[_i];
        _results.push(should.exist(x.item));
      }
      return _results;
    }));
    return it('should find something though', eventually(function(_arg) {
      var results;
      results = _arg.results;
      return results.length.should.be.above(0);
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41,"underscore.deferred":43}],86:[function(require,module,exports){
var Fixture, always, eventually, prepare, should, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always;

should = require('should');

describe('Query', function() {
  var expected;
  expected = ["Tatjana Berkel", "Jennifer Schirrmann", "Herr Fritsche", "Lars Lehnhoff", "Josef M\u00FCller", "Nyota N'ynagasongwa", "Herr Grahms", "Frank Montenbruck", "Andreas Hermann", "Jochen Sch\u00FCler"];
  describe('#next', function() {
    var olderEmployees, service, _ref1;
    _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees;
    olderEmployees.limit = 10;
    olderEmployees.start = 0;
    this.beforeAll(prepare(function() {
      return service.query(olderEmployees).then(function(q) {
        return q.next();
      });
    }));
    it('gets the query to retrieve the next page of results', eventually(function(nextQuery) {
      return nextQuery.start.should.equal(10);
    }));
    return it('should fetch the appropriate page of results', eventually(function(nq) {
      return nq.records().then(function(emps) {
        var e;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = emps.length; _i < _len; _i++) {
            e = emps[_i];
            _results.push(e.name);
          }
          return _results;
        })()).should.eql(expected);
      });
    }));
  });
  return describe('#previous', function() {
    var olderEmployees, service, _ref1;
    _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees;
    olderEmployees.limit = 10;
    olderEmployees.start = 20;
    this.beforeAll(prepare(function() {
      return service.query(olderEmployees).then(function(q) {
        return q.previous();
      });
    }));
    it('gets the query to retrieve the previous page of results', eventually(function(previousQuery) {
      return previousQuery.start.should.equal(10);
    }));
    return it('should fetch the appropriate page of results', eventually(function(q) {
      return q.records().then(function(emps) {
        var e;
        return ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = emps.length; _i < _len; _i++) {
            e = emps[_i];
            _results.push(e.name);
          }
          return _results;
        })()).should.eql(expected);
      });
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],87:[function(require,module,exports){
var Fixture, always, cleanSlate, clear, eventually, prepare, should, shouldFail, workerNames, workingBosses, _ref, _ref1;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), cleanSlate = _ref.cleanSlate, prepare = _ref.prepare, always = _ref.always, clear = _ref.clear, eventually = _ref.eventually, shouldFail = _ref.shouldFail;

_ref1 = require('./lib/utils'), prepare = _ref1.prepare, eventually = _ref1.eventually, always = _ref1.always;

should = require('should');

workerNames = 'Department.employees.name';

workingBosses = {
  'Department.employees': 'CEO'
};

describe('Service', function() {
  var service;
  service = new Fixture().service;
  describe('#pathValues()', function() {
    return it('should fail', shouldFail(service.pathValues));
  });
  describe('#values()', function() {
    return it('should fail', shouldFail(service.values));
  });
  describe('#pathValues("Foo.bar")', function() {
    return it('should fail', shouldFail(function() {
      return service.pathValues('Foo.bar');
    }));
  });
  describe('#pathValues("Company.name")', function() {
    this.beforeAll(prepare(function() {
      return service.pathValues('Company.name');
    }));
    it('should get a list of seven values', eventually(function(values) {
      return values.length.should.equal(7);
    }));
    return it('should include Wernham-Hogg', eventually(function(values) {
      var v;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          v = values[_i];
          _results.push(v.value);
        }
        return _results;
      })()).should.include('Wernham-Hogg');
    }));
  });
  describe('#pathValues("Company.name", cb)', function() {
    return it('should find WH in amongst the 7 companies', function(done) {
      return service.pathValues("Company.name", function(err, values) {
        var e, v;
        if (err != null) {
          return done(err);
        }
        try {
          values.length.should.equal(7);
          ((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = values.length; _i < _len; _i++) {
              v = values[_i];
              _results.push(v.value);
            }
            return _results;
          })()).should.include('Wernham-Hogg');
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  describe('#pathValues(Path("Company.name"))', function() {
    this.beforeAll(prepare(function() {
      return service.fetchModel().then(function(m) {
        return service.pathValues(m.makePath('Company.name'));
      });
    }));
    it('should get a list of seven values', eventually(function(values) {
      return values.length.should.equal(7);
    }));
    return it('should include Wernham-Hogg', eventually(function(values) {
      var v;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          v = values[_i];
          _results.push(v.value);
        }
        return _results;
      })()).should.include('Wernham-Hogg');
    }));
  });
  describe('#pathValues("Department.employees.name")', function() {
    this.beforeAll(prepare(function() {
      return service.pathValues(workerNames);
    }));
    it('should get a list of 132 values', eventually(function(values) {
      return values.length.should.equal(132);
    }));
    return it('should include David-Brent', eventually(function(values) {
      var v;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          v = values[_i];
          _results.push(v.value);
        }
        return _results;
      })()).should.include('David Brent');
    }));
  });
  describe('#pathValues("Department.employees.name")', function() {
    this.beforeAll(prepare(function() {
      return service.fetchModel().then(function(m) {
        return service.pathValues(m.makePath('Department.employees.name'));
      });
    }));
    it('should get a list of 132 values', eventually(function(values) {}));
    return it('should include David-Brent', eventually(function(values) {
      var v;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          v = values[_i];
          _results.push(v.value);
        }
        return _results;
      })()).should.include('David Brent');
    }));
  });
  describe('#pathValues("Department.employees.name", {"Department.employees": "CEO"})', function() {
    this.beforeAll(prepare(function() {
      return service.pathValues(workerNames, workingBosses);
    }));
    it('should get a list of six values', eventually(function(values) {
      return values.length.should.equal(6);
    }));
    it('should not include David-Brent', eventually(function(values) {
      var v;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          v = values[_i];
          _results.push(v.value);
        }
        return _results;
      })()).should.not.include('David Brent');
    }));
    return it("should include B'wah Hah Hah", eventually(function(values) {
      var v;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          v = values[_i];
          _results.push(v.value);
        }
        return _results;
      })()).should.include("Charles Miner");
    }));
  });
  describe('#pathValues("Department.employees.name", {"Department.employees": "CEO"}, cb)', function() {
    return it('should find 6 CEOs, including Charles Miner', function(done) {
      return service.pathValues(workerNames, workingBosses, function(e, vs) {
        var err, names, v;
        if (e != null) {
          return done(e);
        }
        try {
          vs.length.should.equal(6);
          names = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = vs.length; _i < _len; _i++) {
              v = vs[_i];
              _results.push(v.value);
            }
            return _results;
          })();
          names.should.not.include('David Brent');
          names.should.include("Charles Miner");
          return done();
        } catch (_error) {
          err = _error;
          return done(err);
        }
      });
    });
  });
  describe('#pathValues(Path("Department.employees.name", {"Department.employees": "CEO"}))', function() {
    this.beforeAll(prepare(function() {
      return service.fetchModel().then(function(m) {
        return service.pathValues(m.makePath(workerNames, workingBosses));
      });
    }));
    it('should get a list of six values', eventually(function(values) {
      return values.length.should.equal(6);
    }));
    it('should not include David-Brent', eventually(function(values) {
      var v;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          v = values[_i];
          _results.push(v.value);
        }
        return _results;
      })()).should.not.include('David Brent');
    }));
    return it("should include B'wah Hah Hah", eventually(function(values) {
      var v;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = values.length; _i < _len; _i++) {
          v = values[_i];
          _results.push(v.value);
        }
        return _results;
      })()).should.include("Charles Miner");
    }));
  });
  describe('#values("Department.employees.name", {"Department.employees": "CEO"})', function() {
    this.beforeAll(prepare(function() {
      return service.values(workerNames, workingBosses);
    }));
    it('should get a list of six values', eventually(function(values) {
      return values.length.should.equal(6);
    }));
    it('should not include David-Brent', eventually(function(values) {
      return values.should.not.include('David Brent');
    }));
    return it("should include B'wah Hah Hah", eventually(function(values) {
      return values.should.include("Charles Miner");
    }));
  });
  return describe('#values(Path("Department.employees.name", {"Department.employees": "CEO"}))', function() {
    this.beforeAll(prepare(function() {
      return service.fetchModel().then(function(m) {
        return service.values(m.makePath(workerNames, workingBosses));
      });
    }));
    it('should get a list of six values', eventually(function(values) {
      return values.length.should.equal(6);
    }));
    it('should not include David-Brent', eventually(function(values) {
      return values.should.not.include('David Brent');
    }));
    return it("should include B'wah Hah Hah", eventually(function(values) {
      return values.should.include("Charles Miner");
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],88:[function(require,module,exports){
var Fixture, Promise, always, atV, eventually, invoke, needs, once, prepare, should, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), needs = _ref.needs, prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always;

should = require('should');

Promise = require('promise');

invoke = Fixture.funcutils.invoke;

once = Promise.all;

atV = needs(12);

describe('Query', function() {
  return describe('qids', function() {
    var allEmployees, fetchId, meetsReqs, olderEmployees, service, _ref1;
    _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees, allEmployees = _ref1.allEmployees;
    meetsReqs = atV(service);
    fetchId = function(q) {
      return service.query(q).then(invoke('fetchQID'));
    };
    describe('Getting an id', function() {
      this.beforeAll(meetsReqs(function() {
        return fetchId(olderEmployees);
      }));
      return it('should yield an id', eventually(function(id) {
        return should.exist(id);
      }));
    });
    describe('Getting an id for the same query twice, same object', function() {
      this.beforeAll(meetsReqs(function() {
        return service.query(olderEmployees).then(function(q) {
          return once(q.fetchQID(), q.fetchQID());
        });
      }));
      return it('should have fetched the same id twice', eventually(function(_arg) {
        var a, b;
        a = _arg[0], b = _arg[1];
        return a.should.equal(b);
      }));
    });
    describe('Getting an id for the same query twice, different objects', function() {
      this.beforeAll(meetsReqs(function() {
        return once(fetchId(olderEmployees), fetchId(olderEmployees));
      }));
      return it('should have fetched the same id twice', eventually(function(_arg) {
        var a, b;
        a = _arg[0], b = _arg[1];
        return a.should.equal(b);
      }));
    });
    return describe('Getting an id for a different query should result in a different id', function() {
      this.beforeAll(meetsReqs(function() {
        return once(fetchId(olderEmployees), fetchId(allEmployees));
      }));
      return it('should have fetched two different ids', eventually(function(_arg) {
        var a, b;
        a = _arg[0], b = _arg[1];
        return a.should.not.equal(b);
      }));
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","promise":38,"should":41}],89:[function(require,module,exports){
var Fixture, always, clear, eventually, prepare, report, _ref;

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always, clear = _ref.clear, report = _ref.report;

Fixture = require('./lib/fixture');

describe('Query#isRelevant', function() {
  var service, youngerEmployees, _ref1;
  _ref1 = new Fixture(), service = _ref1.service, youngerEmployees = _ref1.youngerEmployees;
  this.beforeAll(prepare(function() {
    return service.query(youngerEmployees);
  }));
  it('should find Employee.address relevant', eventually(function(q) {
    return q.isRelevant('address').should.be["true"];
  }));
  it('should find Employee.age relevant', eventually(function(q) {
    return q.isRelevant('age').should.be["true"];
  }));
  it('should find Employee.end relevant', eventually(function(q) {
    return q.isRelevant('end').should.be["true"];
  }));
  it('should find Employee.department.manager relevant', eventually(function(q) {
    return q.isRelevant('department.manager').should.be["true"];
  }));
  return it('should not find Employee.department.company.CEO relevant', eventually(function(q) {
    return q.isRelevant('department.company.CEO').should.not.be["true"];
  }));
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],90:[function(require,module,exports){
var Fixture, Model, Query, TESTMODEL, any, should, _ref;

Fixture = require('./lib/fixture');

should = require('should');

TESTMODEL = require('./data/model').TESTMODEL;

Query = Fixture.Query, Model = Fixture.Model, (_ref = Fixture.utils, any = _ref.any);

describe('Query#getPossiblePaths', function() {
  describe('The possible paths of a query rooted at Company, default depth', function() {
    var model, paths, query;
    model = Model.load(TESTMODEL.model);
    query = new Query({
      model: model,
      root: 'Company'
    });
    paths = query.getPossiblePaths();
    it('should be an array of strings', function() {
      var path, _i, _len, _results;
      paths.should.be.an.Array;
      _results = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        _results.push(path.should.be.a.String);
      }
      return _results;
    });
    it('should only include valid paths', function() {
      var path, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        _results.push(should.exist(query.makePath(path).getType));
      }
      return _results;
    });
    it('should include Company.department.employees.name', function() {
      return paths.should.include('Company.departments.employees.name');
    });
    it('should include Company.oldContracts.companys.address', function() {
      return paths.should.include('Company.oldContracts.companys.address');
    });
    return it('should not include very deep paths', function() {
      return paths.should.not.include('Company.departments.manager.department.employees.address.address');
    });
  });
  return describe('The possible paths of a query rooted at Company, extra deep', function() {
    var model, paths, query;
    model = Model.load(TESTMODEL.model);
    query = new Query({
      model: model,
      root: 'Company'
    });
    paths = query.getPossiblePaths(6);
    it('should include very deep paths', function() {
      return paths.should.include('Company.departments.manager.department.employees.address.address');
    });
    return it('should not include silly paths', function() {
      return paths.should.not.include('Company.foo.bar.quux');
    });
  });
});

describe('Query#canHaveMultipleValues', function() {
  describe('A path that cannot have multiple values', function() {
    var model, path, query;
    model = Model.load(TESTMODEL.model);
    query = new Query({
      model: model,
      root: 'Employee'
    });
    path = 'department.company.name';
    return it('should not be able to have multiple values', function() {
      return query.canHaveMultipleValues(path).should.not.be["true"];
    });
  });
  return describe('A path that can have multiple values', function() {
    var model, path, query;
    model = Model.load(TESTMODEL.model);
    query = new Query({
      model: model,
      root: 'Company'
    });
    path = 'departments.employees.name';
    return it('should be able to have multiple values', function() {
      return query.canHaveMultipleValues(path).should.be["true"];
    });
  });
});

describe('Query#getQueryNodes', function() {
  return describe('The nodes of a query', function() {
    var includesPath, model, query, queryNodes, root, select, where;
    model = Model.load(TESTMODEL.model);
    root = 'Employee';
    select = ['name', 'department.name'];
    where = {
      'address.address': 'foo',
      'department.manager': {
        "in": 'bad-manager-list'
      }
    };
    query = new Query({
      model: model,
      root: root,
      select: select,
      where: where
    });
    includesPath = function(xs, path) {
      return any(xs, function(x) {
        return String(x) === path;
      });
    };
    queryNodes = query.getQueryNodes();
    it('should be an array', function() {
      return queryNodes.should.be.an.Array;
    });
    it('should be an array of PathInfo instances', function() {
      var n, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = queryNodes.length; _i < _len; _i++) {
        n = queryNodes[_i];
        _results.push(should.exist(n.getType));
      }
      return _results;
    });
    it('should not include any attributes', function() {
      var n, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = queryNodes.length; _i < _len; _i++) {
        n = queryNodes[_i];
        _results.push(n.isAttribute().should.not.be["true"]);
      }
      return _results;
    });
    it('should include the nodes in the view', function() {
      var path, _i, _len, _ref1, _results;
      _ref1 = ['Employee', 'Employee.department'];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        path = _ref1[_i];
        _results.push(includesPath(queryNodes, path).should.be["true"]);
      }
      return _results;
    });
    it('should include the nodes in the constraints', function() {
      var path, _i, _len, _ref1, _results;
      _ref1 = ['Employee.address', 'Employee.department.manager'];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        path = _ref1[_i];
        _results.push(includesPath(queryNodes, path).should.be["true"]);
      }
      return _results;
    });
    return it('should not include nodes not in the query', function() {
      return includesPath(queryNodes, 'Employee.department.company').should.not.be["true"];
    });
  });
});

describe('Query#isOuterJoin', function() {
  var joins, model, query, root, select, where;
  model = Model.load(TESTMODEL.model);
  root = 'Employee';
  select = ['name', 'department.name'];
  where = {
    'address.address': 'foo',
    'department.manager': {
      "in": 'bad-manager-list'
    }
  };
  joins = ['address'];
  query = new Query({
    model: model,
    root: root,
    select: select,
    where: where,
    joins: joins
  });
  describe('An outer-joined path', function() {
    var path;
    path = 'Employee.address';
    return it('should be considered to be outer joined', function() {
      return query.isOuterJoin(path).should.be["true"];
    });
  });
  describe('A non-outer joined path', function() {
    var path;
    path = 'Employee.department';
    return it('should not be considered to be outer joined', function() {
      return query.isOuterJoin(path).should.not.be["true"];
    });
  });
  return describe('attempting to get information about a nonsense path', function() {
    var attempt;
    attempt = function() {
      return query.isOuterJoin('foo');
    };
    it('should throw an error', function() {
      return attempt.should.not.throwError();
    });
    return it('should however return false', function() {
      return attempt().should.not.be["true"];
    });
  });
});


},{"./data/model":64,"./lib/fixture":"V5MhzQ","should":41}],91:[function(require,module,exports){
var Fixture, Promise, always, clear, eventually, makeTheList, prepare, report, set, should, tags, _ref;

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always, clear = _ref.clear, report = _ref.report;

should = require('should');

Promise = require('promise');

Fixture = require('./lib/fixture');

set = Fixture.funcutils.set;

tags = ['js', 'node', 'testing', 'mocha', 'save-as-list'];

makeTheList = function(s, name, opts) {
  return prepare(function() {
    return clear(s, name)().then(function() {
      return Promise.all([
        s.query(opts).then(function(q) {
          return q.saveAsList({
            name: name,
            tags: tags
          });
        }), s.count(opts)
      ]);
    });
  });
};

describe('Query#saveAsList', function() {
  var olderEmployees, service, youngerEmployees, _ref1;
  _ref1 = new Fixture(), service = _ref1.service, olderEmployees = _ref1.olderEmployees, youngerEmployees = _ref1.youngerEmployees;
  this.slow(400);
  describe('saving older employees', function() {
    var name;
    name = 'temp-olders-from-query';
    this.afterAll(always(clear(service, name)));
    this.beforeAll(makeTheList(service, name, olderEmployees));
    it('should exist', eventually(function(_arg) {
      var list;
      list = _arg[0];
      return should.exist(list);
    }));
    it("should be called '" + name + "'", eventually(function(_arg) {
      var list;
      list = _arg[0];
      return list.name.should.equal(name);
    }));
    it('should contain as many members as the count suggests', eventually(function(_arg) {
      var count, list;
      list = _arg[0], count = _arg[1];
      return list.size.should.equal(count);
    }));
    return it("should be marked for death", eventually(function(_arg) {
      var list, t, _i, _len, _results;
      list = _arg[0];
      _results = [];
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        _results.push(list.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
  });
  return describe('saving younger employees', function() {
    var name;
    name = 'temp-youngers-from-query';
    this.afterAll(always(clear(service, name)));
    this.beforeAll(makeTheList(service, name, youngerEmployees));
    it('should exist', eventually(function(list) {
      return should.exist(list);
    }));
    it("should be called '" + name + "'", eventually(function(_arg) {
      var list;
      list = _arg[0];
      return list.name.should.equal(name);
    }));
    it('should contain as many members as the count suggests', eventually(function(_arg) {
      var count, list;
      list = _arg[0], count = _arg[1];
      return list.size.should.equal(count);
    }));
    return it("should be marked for death", eventually(function(_arg) {
      var list, t, _i, _len, _results;
      list = _arg[0];
      _results = [];
      for (_i = 0, _len = tags.length; _i < _len; _i++) {
        t = tags[_i];
        _results.push(list.hasTag(t).should.be["true"]);
      }
      return _results;
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","promise":38,"should":41}],92:[function(require,module,exports){
var Fixture, Model, Query, TESTMODEL, eventually, prepare, _ref, _ref1;

_ref = Fixture = require('./lib/fixture'), Query = _ref.Query, Model = _ref.Model;

_ref1 = require('./lib/utils'), eventually = _ref1.eventually, prepare = _ref1.prepare;

TESTMODEL = require('./data/model').TESTMODEL;

describe('Query#select', function() {
  var m, q;
  m = new Model(TESTMODEL.model);
  q = null;
  this.beforeEach(function() {
    return q = new Query({
      model: m,
      root: 'Employee',
      select: ['name', 'department.name'],
      orderBy: ['department.name', 'age']
    });
  });
  it('should initially have the right sort order', function() {
    var direction, path, _ref2;
    _ref2 = q.sortOrder[0], path = _ref2.path, direction = _ref2.direction;
    path.should.eql('Employee.department.name');
    direction.should.eql('ASC');
    return q.sortOrder.length.should.eql(2);
  });
  it('should update the sort order when changing the select list', function() {
    var direction, path, _ref2;
    q.select(['name', 'address.address']);
    _ref2 = q.sortOrder[0], path = _ref2.path, direction = _ref2.direction;
    path.should.eql('Employee.age');
    direction.should.eql('ASC');
    return q.sortOrder.length.should.eql(1);
  });
  return it('should also update the sort order when changing the select list when cloned', function() {
    var direction, p, path, _ref2, _ref3, _ref4;
    p = q.clone();
    _ref2 = p.sortOrder[0], path = _ref2.path, direction = _ref2.direction;
    path.should.eql('Employee.department.name');
    direction.should.eql('ASC');
    p.sortOrder.length.should.eql(2);
    p.select(['name', 'address.address']);
    _ref3 = q.sortOrder[0], path = _ref3.path, direction = _ref3.direction;
    path.should.eql('Employee.department.name');
    direction.should.eql('ASC');
    q.sortOrder.length.should.eql(2);
    _ref4 = p.sortOrder[0], path = _ref4.path, direction = _ref4.direction;
    path.should.eql('Employee.age');
    direction.should.eql('ASC');
    return p.sortOrder.length.should.eql(1);
  });
});


},{"./data/model":64,"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],93:[function(require,module,exports){
var Fixture, Model, Query, TESTMODEL, eventually, prepare, _ref, _ref1;

_ref = Fixture = require('./lib/fixture'), Query = _ref.Query, Model = _ref.Model;

_ref1 = require('./lib/utils'), eventually = _ref1.eventually, prepare = _ref1.prepare;

TESTMODEL = require('./data/model').TESTMODEL;

describe('Query#select', function() {
  var q;
  q = null;
  this.beforeEach(function() {
    return q = new Query({
      model: new Model(TESTMODEL.model),
      root: 'Employee',
      select: ['name', 'department.manager.company.name'],
      where: {
        'department.manager': {
          isa: 'CEO'
        }
      }
    });
  });
  it('should have a type constraint on the department manager', function() {
    var path, type, _ref2;
    _ref2 = q.constraints[0], path = _ref2.path, type = _ref2.type;
    path.should.eql('Employee.department.manager');
    return type.should.eql('CEO');
  });
  it('means that we can resolve paths correctly', function() {
    var name;
    name = q.getType('department.manager').name;
    return name.should.eql('CEO');
  });
  it('agrees that department.managers are in the query', function() {
    return q.isInQuery(q.constraints[0].path).should.be["true"];
  });
  it('agrees that department.managers are not relevant', function() {
    return q.isRelevant(q.constraints[0].path).should.not.be["true"];
  });
  it('emits the type constraints in XML', function() {
    var xml;
    xml = q.toXML();
    return xml.should.match(/CEO/);
  });
  it('doesn\'t stop working when we make the constraint irrelevant', function() {
    var name;
    q.select(['name', 'age']);
    name = q.getType('department.manager').name;
    return name.should.eql('CEO');
  });
  it('doesn\'t emit irrelevant type constraints in XML', function() {
    var xml;
    xml = q.select(['name', 'age']).toXML();
    return xml.should.not.match(/CEO/);
  });
  return it('should emit the type constraint again once it becomes relevant', function() {
    var xml;
    xml = q.select(['name', 'age']).select(['name', 'department.manager.age']).toXML();
    return xml.should.match(/CEO/);
  });
});


},{"./data/model":64,"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],94:[function(require,module,exports){
var Fixture, ageQuery, agesAreAllPositiveNumbers, agesSumToExpectedTotal, defer, eventually, get, invoke, olderEmployees, prepare, service, sum, test, _ref, _ref1, _ref2;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

_ref1 = Fixture.funcutils, get = _ref1.get, invoke = _ref1.invoke, defer = _ref1.defer;

sum = function(xs) {
  return xs.reduce(function(a, b) {
    return a + b;
  });
};

agesAreAllPositiveNumbers = eventually(function(ages) {
  var age, _i, _len, _results;
  _results = [];
  for (_i = 0, _len = ages.length; _i < _len; _i++) {
    age = ages[_i];
    _results.push(age.should.be.above(0));
  }
  return _results;
});

agesSumToExpectedTotal = eventually(function(ages) {
  return sum(ages).should.equal(2688);
});

test = function(desc, prep) {
  return describe(desc, function() {
    this.beforeAll(prepare(prep));
    it('should retrieve a list of ages', agesAreAllPositiveNumbers);
    return it('should sum to 2688', agesSumToExpectedTotal);
  });
};

_ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;

ageQuery = {
  select: ['age'],
  from: 'Employee',
  where: olderEmployees.where
};

describe('Query', function() {
  return test('#values', function() {
    return service.query(ageQuery).then(invoke('values'));
  });
});

describe('Service', function() {
  return describe('#values', function() {
    test('for queries', function() {
      return service.query(ageQuery).then(service.values);
    });
    test('for queries with callbacks', function() {
      return service.query(ageQuery).then(function(q) {
        var d;
        d = defer();
        service.values(q, function(err, ages) {
          if (err != null) {
            d.reject(err);
          }
          return d.resolve(ages);
        });
        return d.promise;
      });
    });
    test('for query parameters', function() {
      return service.values(ageQuery);
    });
    test('for query parameters with callbacks', function() {
      var d;
      d = defer();
      service.values(ageQuery, function(err, ages) {
        if (err != null) {
          d.reject(err);
        }
        return d.resolve(ages);
      });
      return d.promise;
    });
    describe('for string paths', function() {
      this.beforeAll(prepare(function() {
        return service.values('Company.name');
      }));
      it('should find all the companies', eventually(function(companies) {
        return companies.should.have.a.lengthOf(7);
      }));
      return it('should find Wernham-Hogg', eventually(function(companies) {
        return companies.should.contain('Wernham-Hogg');
      }));
    });
    return describe('for object paths', function() {
      this.beforeAll(prepare(function() {
        return service.fetchModel().then(invoke('makePath', 'Company.name')).then(service.values);
      }));
      it('should find all the companies', eventually(function(companies) {
        return companies.should.have.a.lengthOf(7);
      }));
      return it('should find Wernham-Hogg', eventually(function(companies) {
        return companies.should.contain('Wernham-Hogg');
      }));
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],95:[function(require,module,exports){
var Fixture, after, eventually, prepare, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare, after = _ref.after;

describe('Query', function() {
  return describe('with-subclasses', function() {
    var service;
    service = (new Fixture).service;
    describe('running a subclass query', function() {
      this.beforeAll(prepare(function() {
        return service.count({
          from: 'Department',
          select: ['employees.name'],
          where: {
            'employees': {
              isa: 'CEO'
            }
          }
        });
      }));
      return it('should find six ceos who work in departments', eventually(function(c) {
        return c.should.equal(6);
      }));
    });
    return describe('running a multi-type query', function() {
      var ceos, contractors, union;
      ceos = {
        from: 'CEO',
        select: ['name']
      };
      contractors = {
        from: 'Contractor',
        select: ['name']
      };
      union = {
        from: 'Employable',
        select: ['name'],
        where: {
          'Employable': {
            isa: ['Contractor', 'CEO']
          }
        }
      };
      this.beforeAll(prepare(function() {
        var q;
        return after((function() {
          var _i, _len, _ref1, _results;
          _ref1 = [ceos, contractors, union];
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            q = _ref1[_i];
            _results.push(service.count(q));
          }
          return _results;
        })());
      }));
      it('ceos + contractors should = union', eventually(function(_arg) {
        var a, b, c;
        a = _arg[0], b = _arg[1], c = _arg[2];
        return (a + b).should.equal(c);
      }));
      return it('should find 15 contractors or ceos', eventually(function(_arg) {
        var a, b, c;
        a = _arg[0], b = _arg[1], c = _arg[2];
        return c.should.equal(15);
      }));
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],96:[function(require,module,exports){
var Fixture, eventually, prepare, report, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, report = _ref.report, eventually = _ref.eventually;

describe('Service#search', function() {
  var service;
  service = new Fixture().service;
  describe('using the promise API', function() {
    describe('to look for everything', function() {
      this.beforeAll(prepare(function() {
        return service.search();
      }));
      it('should find at least 100 things', eventually(function(_arg) {
        var results;
        results = _arg.results;
        return results.length.should.be.above(99);
      }));
      return it('should find some banks', eventually(function(_arg) {
        var facets;
        facets = _arg.facets;
        return facets.Category.Bank.should.equal(5);
      }));
    });
    describe('to look for David', function() {
      this.beforeAll(prepare(function() {
        return service.search('david');
      }));
      it('should find david and his department', eventually(function(_arg) {
        var results;
        results = _arg.results;
        return results.length.should.equal(2);
      }));
      it('should find one department', eventually(function(_arg) {
        var facets;
        facets = _arg.facets;
        return facets.Category.Department.should.equal(1);
      }));
      return it('should find one manager', eventually(function(_arg) {
        var facets;
        facets = _arg.facets;
        return facets.Category.Manager.should.equal(1);
      }));
    });
    describe('to look for David, with a request object', function() {
      this.beforeAll(prepare(function() {
        return service.search({
          q: 'david'
        });
      }));
      it('should find david and his department', eventually(function(_arg) {
        var results;
        results = _arg.results;
        return results.length.should.equal(2);
      }));
      it('should find one department', eventually(function(_arg) {
        var facets;
        facets = _arg.facets;
        return facets.Category.Department.should.equal(1);
      }));
      return it('should find one manager', eventually(function(_arg) {
        var facets;
        facets = _arg.facets;
        return facets.Category.Manager.should.equal(1);
      }));
    });
    return describe('searcing by a specific type', function() {
      this.beforeAll(prepare(function() {
        return service.search({
          q: 'david',
          Category: 'Department'
        });
      }));
      it("should find david's department", eventually(function(_arg) {
        var results;
        results = _arg.results;
        return results.length.should.equal(1);
      }));
      it('should find one department', eventually(function(_arg) {
        var facets;
        facets = _arg.facets;
        return facets.Category.Department.should.equal(1);
      }));
      return it('should not find any managers', eventually(function(_arg) {
        var facets, should;
        facets = _arg.facets;
        should = require('should');
        return should.not.exist(facets.Category.Manager);
      }));
    });
  });
  return describe('using the callback API', function() {
    describe('to look for everything', function() {
      return it('should find at least 100 things, and some banks', function(done) {
        return service.search(function(err, resp) {
          var e;
          if (err != null) {
            return done(err);
          }
          try {
            resp.results.length.should.be.above(99);
            resp.facets.Category.Bank.should.equal(5);
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
    });
    describe('to look for David', function() {
      return it('should find david and his department', function(done) {
        return service.search('david', function(err, _arg) {
          var e, facets, results, _ref1;
          _ref1 = _arg != null ? _arg : {}, results = _ref1.results, facets = _ref1.facets;
          if (err != null) {
            return done(err);
          }
          try {
            results.length.should.equal(2);
            facets.Category.Department.should.equal(1);
            facets.Category.Manager.should.equal(1);
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
    });
    return describe('searching by a specific type', function() {
      return it("should find david's department, and no managers", function(done) {
        return service.search({
          q: 'david',
          Category: 'Department'
        }, function(err, _arg) {
          var e, facets, results, should, _ref1;
          _ref1 = _arg != null ? _arg : {}, results = _ref1.results, facets = _ref1.facets;
          if (err != null) {
            return done(err);
          }
          try {
            results.length.should.equal(1);
            facets.Category.Department.should.equal(1);
            should = require('should');
            should.not.exist(facets.Category.Manager);
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],97:[function(require,module,exports){
var Counter, Fixture, SLOW, always, checkEmployees, defer, eventually, invoke, prepare, should, shouldBeRejected, _ref, _ref1,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, always = _ref.always, shouldBeRejected = _ref.shouldBeRejected;

should = require('should');

_ref1 = Fixture.funcutils, defer = _ref1.defer, invoke = _ref1.invoke;

Counter = (function() {
  Counter.prototype.n = 0;

  Counter.prototype.total = 0;

  function Counter(expN, expT, resolve, reject) {
    this.expN = expN;
    this.expT = expT;
    this.resolve = resolve;
    this.reject = reject;
    this.check = __bind(this.check, this);
    this.count = __bind(this.count, this);
  }

  Counter.prototype.count = function(emp) {
    this.n = this.n + 1;
    return this.total = this.total + emp.age;
  };

  Counter.prototype.check = function() {
    var e;
    try {
      this.n.should.equal(this.expN);
      this.total.should.equal(this.expT);
      return this.resolve();
    } catch (_error) {
      e = _error;
      return this.reject(e);
    }
  };

  return Counter;

})();

Counter.forOldEmployees = function(done) {
  var promise, reject, resolve, _ref2;
  _ref2 = defer(), promise = _ref2.promise, resolve = _ref2.resolve, reject = _ref2.reject;
  promise.then((function() {
    return done();
  }), (function(e) {
    return done(e);
  }));
  return new Counter(46, 2688, resolve, reject);
};

SLOW = 100;

checkEmployees = function(employees) {
  var e;
  should.exist(employees);
  employees.length.should.equal(46);
  return ((function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = employees.length; _i < _len; _i++) {
      e = employees[_i];
      _results.push(e.age);
    }
    return _results;
  })()).reduce(function(x, y) {
    return x + y;
  }).should.equal(2688);
};

describe('Service', function() {
  var olderEmployees;
  this.slow(SLOW);
  olderEmployees = new Fixture().olderEmployees;
  olderEmployees.select.push('age');
  describe('#records', function() {
    var service;
    service = new Fixture().service;
    this.beforeAll(prepare(function() {
      return service.records(olderEmployees);
    }));
    return it('promises to return a list of employee records', eventually(checkEmployees));
  });
  describe('bad requests to #records', function() {
    var badQuery, querying, service, _ref2;
    _ref2 = new Fixture(), service = _ref2.service, badQuery = _ref2.badQuery;
    service.errorHandler = null;
    querying = service.records(badQuery);
    return it('should fail', shouldBeRejected(querying));
  });
  return describe('#records with callbacks', function() {
    describe('good requests', function() {
      var service;
      service = new Fixture().service;
      return it('yields a list of employee records', function(done) {
        return service.records(olderEmployees, function(err, employees) {
          var e;
          if (err != null) {
            return done(err);
          }
          try {
            checkEmployees(employees);
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
    });
    return describe('bad requests', function() {
      var badQuery, service, _ref2;
      _ref2 = new Fixture(), badQuery = _ref2.badQuery, service = _ref2.service;
      return it('yields errors in as the first parameter to the callback', function(done) {
        var eh;
        eh = service.errorHandler;
        service.errorHandler = function() {};
        return service.records(badQuery, function(err, emps) {
          service.errorHandler = eh;
          if (err == null) {
            done("Expected error - got " + emps);
          }
          return done();
        });
      });
    });
  });
});

describe('Service#eachRecord', function() {
  var olderEmployees, query, service, _ref2;
  _ref2 = new Fixture(), olderEmployees = _ref2.olderEmployees, service = _ref2.service;
  query = {
    select: ['age'],
    from: 'Employee',
    where: olderEmployees.where
  };
  describe('Params', function() {
    it('can yield each employee, using params', function(done) {
      var check, count, reject, _ref3;
      _ref3 = Counter.forOldEmployees(done), reject = _ref3.reject, check = _ref3.check, count = _ref3.count;
      return service.eachRecord(query, {}, count, reject, check);
    });
    it('can yield each employee, without needing a page, using params', function(done) {
      var check, count, reject, _ref3;
      _ref3 = Counter.forOldEmployees(done), reject = _ref3.reject, check = _ref3.check, count = _ref3.count;
      return service.eachRecord(query, count, reject, check);
    });
    return it('can yield a stream of employees, using params', function(done) {
      var check, count, reject, _ref3;
      _ref3 = Counter.forOldEmployees(done), reject = _ref3.reject, check = _ref3.check, count = _ref3.count;
      return service.eachRecord(query).done(function(stream) {
        stream.on('data', count);
        stream.on('end', check);
        return stream.on('error', reject);
      });
    });
  });
  return describe('Query', function() {
    it('can yield each employee, all parameters', function(done) {
      var check, count, reject, _ref3;
      _ref3 = Counter.forOldEmployees(done), reject = _ref3.reject, check = _ref3.check, count = _ref3.count;
      return service.query(query).done(function(q) {
        return service.eachRecord(q, {}, count, reject, check);
      });
    });
    it('can yield each employee, without needing a page', function(done) {
      var check, count, reject, testQuery, _ref3;
      _ref3 = Counter.forOldEmployees(done), reject = _ref3.reject, check = _ref3.check, count = _ref3.count;
      testQuery = function(q) {
        return service.eachRecord(q, count, reject, check);
      };
      return service.query(query).done(testQuery);
    });
    return it('can yield a stream of employees, no callbacks', function(done) {
      var check, count, reject, testQuery, testStream, _ref3;
      _ref3 = Counter.forOldEmployees(done), reject = _ref3.reject, check = _ref3.check, count = _ref3.count;
      testStream = function(stream) {
        stream.on('data', count);
        stream.on('end', check);
        return stream.on('error', reject);
      };
      testQuery = function(q) {
        return service.eachRecord(q).then(testStream, reject);
      };
      return service.query(query).then(testQuery, reject);
    });
  });
});

describe('Query#eachRecord', function() {
  var olderEmployees, query, service, _ref2;
  _ref2 = new Fixture(), olderEmployees = _ref2.olderEmployees, service = _ref2.service;
  query = {
    select: ['Employee.age'],
    where: olderEmployees.where
  };
  this.beforeAll(prepare(function() {
    return service.query(query).then(invoke('eachRecord'));
  }));
  return it('promises to return a stream over the employees', eventually(function(stream) {
    var n, promise, reject, resolve, sum, _ref3;
    _ref3 = defer(), promise = _ref3.promise, resolve = _ref3.resolve, reject = _ref3.reject;
    n = sum = 0;
    stream.on('error', reject);
    stream.on('data', function(e) {
      n++;
      return sum += e.age;
    });
    return stream.on('end', function() {
      var e;
      try {
        n.should.equal(46);
        sum.should.equal(2688);
        return resolve();
      } catch (_error) {
        e = _error;
        return reject(e);
      }
    });
  }));
});

describe('Query', function() {
  var olderEmployees, service, _ref2;
  _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
  olderEmployees.select.push('age');
  describe('#records', function() {
    this.beforeAll(prepare(function() {
      return service.query(olderEmployees).then(function(q) {
        return q.records();
      });
    }));
    return it('promises to return a list of employee records', eventually(checkEmployees));
  });
  return describe('#records with callbacks', function() {
    return it('yields a list of employees', function(done) {
      var testEmps;
      testEmps = invoke('records', function(err, employees) {
        var e;
        if (err != null) {
          return done(err);
        }
        try {
          checkEmployees(employees);
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
      return service.query(olderEmployees).done(testEmps, done);
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],98:[function(require,module,exports){
var Fixture, always, eventually, prepare, should, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), always = _ref.always, prepare = _ref.prepare, eventually = _ref.eventually;

should = require('should');

describe('Service#register', function() {
  var password, removeMrFoo, service, username;
  username = 'mr foo';
  password = 'pæssw0rd';
  service = (new Fixture).service;
  service.errorHandler = function() {};
  removeMrFoo = function() {
    return service.login(username, password).then(function(fooService) {
      var p;
      p = fooService.getDeregistrationToken();
      return p.then(function(token) {
        return fooService.deregister(token.uuid);
      });
    });
  };
  this.beforeAll(always(removeMrFoo));
  describe('registering a new user', function() {
    this.beforeAll(prepare(function() {
      return service.register(username, password);
    }));
    this.afterAll(always(removeMrFoo));
    return it('should be able to register a new user', eventually(function(s) {
      return s.fetchUser().then(function(user) {
        return user.username.should.eql(username);
      });
    }));
  });
  return describe('deregistering a user', function() {
    this.beforeAll(prepare(function() {
      return service.register(username, password);
    }));
    this.afterAll(always(removeMrFoo));
    return it('should be able to deregister a user', eventually(function(s) {
      var accessToken, checkTokenAndDeregister, tokP;
      accessToken = s.token;
      tokP = s.getDeregistrationToken();
      checkTokenAndDeregister = function(token) {
        token.secondsRemaining.should.be.above(0);
        return s.deregister(token.uuid);
      };
      return tokP.then(checkTokenAndDeregister).then(function() {
        return s.fetchUser();
      }).then((function() {
        throw new Error("Token is still valid");
      }), (function(err) {
        return err.should.match(new RegExp(accessToken));
      }));
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],99:[function(require,module,exports){
var Fixture, constraints, defer, eventually, prepare, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare;

defer = Fixture.utils.defer;

constraints = [
  {
    path: 'Employee.department.manager',
    type: 'CEO'
  }, {
    path: 'Employee.name',
    op: '=',
    value: 'methuselah'
  }, {
    path: 'Employee.age',
    op: '>',
    value: 1000
  }, {
    path: 'Employee.end',
    op: 'IS NULL'
  }, {
    path: 'Employee.department.name',
    op: 'ONE OF',
    values: ['Sales', 'Accounting']
  }
];

describe('Query', function() {
  var service;
  service = (new Fixture).service;
  this.beforeEach(prepare(function() {
    return service.query({
      select: ['name'],
      from: 'Employee',
      where: constraints
    });
  }));
  describe('#removeConstraint(con)', function() {
    return it('should be able to remove a constraint', eventually(function(q) {
      var changes, n, x, _i, _len;
      changes = 0;
      q.on('change:constraints', function() {
        return changes++;
      });
      n = constraints.length;
      q.constraints.length.should.equal(n);
      for (_i = 0, _len = constraints.length; _i < _len; _i++) {
        x = constraints[_i];
        q.removeConstraint(x);
        q.constraints.length.should.equal(--n);
      }
      return changes.should.equal(constraints.length);
    }));
  });
  return describe('removed:constraint event', function() {
    return it('should be triggered when constraints are removed', eventually(function(q) {
      var promise, reject, resolve, _ref1;
      _ref1 = defer(), promise = _ref1.promise, resolve = _ref1.resolve, reject = _ref1.reject;
      q.on('removed:constraint', function(c) {
        var e;
        try {
          return resolve(c.should.eql(constraints[1]));
        } catch (_error) {
          e = _error;
          return reject();
        }
      });
      q.removeConstraint(constraints[1]);
      reject("Event not fired");
      return promise;
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c"}],100:[function(require,module,exports){
var Counter, Fixture, SLOW, defer, eventually, flatMap, get, invoke, invokeWith, prepare, should, shouldFail, sumRows, test, _ref, _ref1,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __slice = [].slice;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually, shouldFail = _ref.shouldFail;

_ref1 = Fixture.funcutils, invokeWith = _ref1.invokeWith, invoke = _ref1.invoke, defer = _ref1.defer, get = _ref1.get, flatMap = _ref1.flatMap;

should = require('should');

Counter = (function() {
  Counter.prototype.n = 0;

  Counter.prototype.total = 0;

  function Counter(expN, expT, done) {
    var promise, _ref2;
    this.expN = expN;
    this.expT = expT;
    this.check = __bind(this.check, this);
    this.count = __bind(this.count, this);
    _ref2 = defer(), promise = _ref2.promise, this.reject = _ref2.reject, this.resolve = _ref2.resolve;
    promise.then((function() {
      return done();
    }), done);
  }

  Counter.prototype.count = function(row) {
    this.n++;
    return this.total += row[0];
  };

  Counter.prototype.check = function() {
    var e;
    try {
      this.n.should.equal(this.expN);
      this.total.should.equal(this.expT);
      return this.resolve();
    } catch (_error) {
      e = _error;
      return this.reject(e);
    }
  };

  Counter.prototype.callbacks = function() {
    return [this.count, this.reject, this.check];
  };

  return Counter;

})();

Counter.forOlderEmployees = function(done) {
  var c;
  c = new Counter(46, 2688, done);
  return c.callbacks();
};

SLOW = 100;

sumRows = flatMap(get(0));

test = function(done) {
  return function(rows) {
    var e;
    try {
      rows.should.have.lengthOf(46);
      sumRows(rows).should.equal(2688);
      return done();
    } catch (_error) {
      e = _error;
      return done(e);
    }
  };
};

describe('Query', function() {
  var olderEmployees, query, service, _ref2;
  this.slow(SLOW);
  _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
  query = {
    select: ['age'],
    from: 'Employee',
    where: olderEmployees.where
  };
  describe('#rows()', function() {
    it('should return 46 rows, with a sum of 2688', function(done) {
      return service.query(query).then(invoke('rows')).then(test(done), done);
    });
    return it('should return 46 rows, with a sum of 2688, and work with callbacks', function(done) {
      var check, rowTest;
      check = test(done);
      rowTest = invoke('rows', function(err, rows) {
        if (err != null) {
          return done(err);
        }
        return check(rows);
      });
      return service.query(query).then(rowTest, done);
    });
  });
  return describe('#eachRow', function() {
    it('should allow iteration per item', function(done) {
      var cbs;
      cbs = Counter.forOlderEmployees(done);
      return service.query(query).done(invokeWith('eachRow', cbs));
    });
    it('should allow iteration per item with a single callback', function(done) {
      var count, end, error, testQuery, testStream, _ref3;
      _ref3 = Counter.forOlderEmployees(done), count = _ref3[0], error = _ref3[1], end = _ref3[2];
      testStream = function(stream) {
        stream.on('error', error);
        return stream.on('end', end);
      };
      testQuery = function(q) {
        return q.eachRow(count).then(testStream, error);
      };
      return service.query(query).then(testQuery, error);
    });
    return it('should allow iteration with promises', function(done) {
      var attach, count, end, error, _ref3;
      _ref3 = Counter.forOlderEmployees(done), count = _ref3[0], error = _ref3[1], end = _ref3[2];
      attach = function(stream) {
        stream.on('data', count);
        stream.on('error', error);
        return stream.on('end', end);
      };
      return service.query(query).then(invoke('eachRow')).then(attach, error);
    });
  });
});

describe('Service', function() {
  this.slow(SLOW);
  describe('#rows()', function() {
    describe('good requests', function() {
      var olderEmployees, query, service, _ref2;
      _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
      query = {
        select: ['age'],
        from: 'Employee',
        where: olderEmployees.where
      };
      it('accepts a query options object, and can run it as it would a query', function(done) {
        var check;
        check = test(done);
        return service.rows(query).done(check, done);
      });
      return it('accepts a query options object, and can run it, accepting callbacks', function(done) {
        var check;
        check = test(done);
        return service.rows(query, function(err, rows) {
          if (err != null) {
            return done(err);
          }
          return check(rows);
        });
      });
    });
    describe('very short timeouts', function() {
      var olderEmployees, service, _ref2;
      _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
      return it('should fail', shouldFail(function() {
        return service.rows(olderEmployees, {
          timeout: 1
        });
      }));
    });
    describe('reasonable timeouts', function() {
      var olderEmployees, query, service, _ref2;
      _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
      query = {
        select: ['age'],
        from: 'Employee',
        where: olderEmployees.where
      };
      return it('should succeed and get results', function(done) {
        var check;
        check = test(done);
        return service.rows(query, {
          timeout: 2000
        }).done(check, done);
      });
    });
    return describe('bad requests', function() {
      var badQuery, service, _ref2;
      _ref2 = new Fixture(), service = _ref2.service, badQuery = _ref2.badQuery;
      service.errorHandler = null;
      it('should return a failed promise', shouldFail(function() {
        return service.rows(badQuery);
      }));
      return it('should yield an error as the first parameter to the callback', function(done) {
        return service.rows(badQuery, function(err, rows) {
          if (err == null) {
            return done(new Error("Expected error, but got " + rows + " instead"));
          }
          return done();
        });
      });
    });
  });
  return describe('#eachRow()', function() {
    describe('good requests', function() {
      var olderEmployees, query, service, _ref2;
      _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
      query = {
        select: ['age'],
        from: 'Employee',
        where: olderEmployees.where
      };
      it('can run a query and yield each row', function(done) {
        var cbs;
        cbs = Counter.forOlderEmployees(done);
        return service.query(query).done(function(q) {
          return service.eachRow.apply(service, [q, {}].concat(__slice.call(cbs)));
        });
      });
      it('can run a query and yield each row, and does not need a page', function(done) {
        var cbs;
        cbs = Counter.forOlderEmployees(done);
        return service.query(query).done(function(q) {
          return service.eachRow.apply(service, [q].concat(__slice.call(cbs)));
        });
      });
      it('accepts a query options object and can run it as a query, callbacks', function(done) {
        var cbs;
        cbs = Counter.forOlderEmployees(done);
        return service.eachRow.apply(service, [query, {}].concat(__slice.call(cbs)));
      });
      it('accepts a query options object and can run it as a query, callbacks, no page', function(done) {
        var cbs;
        cbs = Counter.forOlderEmployees(done);
        return service.eachRow.apply(service, [query].concat(__slice.call(cbs)));
      });
      it('accepts a query options object and can run it as it would a query, callback', function(done) {
        var count, end, error, _ref3;
        _ref3 = Counter.forOlderEmployees(done), count = _ref3[0], error = _ref3[1], end = _ref3[2];
        return service.eachRow(query, count).done(function(stream) {
          stream.on('error', error);
          stream.on('end', end);
          return stream.resume();
        });
      });
      return it('accepts a query options object and can run it as it would a query, promise', function(done) {
        var count, end, error, _ref3;
        _ref3 = Counter.forOlderEmployees(done), count = _ref3[0], error = _ref3[1], end = _ref3[2];
        return service.eachRow(query).done(function(stream) {
          stream.on('data', count);
          stream.on('error', error);
          stream.on('end', end);
          return stream.resume();
        });
      });
    });
    return describe('bad requests', function() {
      var badQuery, request, service, _ref2;
      this.slow(3000);
      this.timeout(10000);
      _ref2 = new Fixture(), service = _ref2.service, badQuery = _ref2.badQuery;
      service.errorHandler = null;
      request = function() {
        return service.eachRow(badQuery);
      };
      it('should return a failed promise', shouldFail(request));
      it('should report the status code of a bad query', function(done) {
        var failed;
        failed = service.eachRow(badQuery);
        failed.then(function(res) {
          return done(new Error("Should have failed"));
        });
        return failed.then(null, function(status) {
          var e;
          try {
            status.should.match(/400/);
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
      return it('should trigger the error handler provided', function(done) {
        var onEnd, onError, onRow, reportNoError, state;
        state = {};
        reportNoError = function() {
          if (state.error == null) {
            return done(new Error("Reached end without error"));
          }
        };
        onRow = function(row) {
          return done(new Error("Expected failure, got " + row));
        };
        onError = function(e) {
          var err;
          state.error = e;
          if (state.to) {
            cancelTimeout(state.to);
          }
          try {
            e.should.match(/XML/);
            return done();
          } catch (_error) {
            err = _error;
            return done(err);
          }
        };
        onEnd = function() {
          return state.to = setTimeout(reportNoError, 100);
        };
        return service.eachRow(badQuery, onRow, onError, onEnd);
      });
    });
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],101:[function(require,module,exports){
var Fixture, is_usable, resolves, should;

Fixture = require('./lib/fixture');

should = require('should');

is_usable = function(value) {
  return function() {
    should.exist(value);
    return value.should.have.property('then');
  };
};

resolves = function(promise) {
  return function(done) {
    promise.then(null, done);
    return promise.then(function() {
      true.should.be.ok;
      return done();
    });
  };
};

describe('Static service properties:', function() {
  var service;
  service = new Fixture().service;
  describe('the version', function() {
    var promise;
    promise = service.fetchVersion();
    it('should return a usable value', is_usable(promise));
    it('should resolve successfully', resolves(promise));
    it('should yield a positive value', function(done) {
      promise.then(function(v) {
        v.should.be.above(0);
        return done();
      });
      return promise.then(null, done);
    });
    return it('should support callbacks', function(done) {
      return service.fetchVersion(function(err, v) {
        var e;
        if (err != null) {
          return done(err);
        }
        try {
          if (v != null) {
            v.should.be.above(0);
          }
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  describe('the release', function() {
    var promise;
    promise = service.fetchRelease();
    it('should return a usable value', is_usable(promise));
    it('should resolve successfully', resolves(promise));
    it('should equal "test"', function(done) {
      return promise.then(function(r) {
        return r.should.equal('test');
      }).then((function() {
        return done();
      }), done);
    });
    return it('should support callbacks', function(done) {
      return service.fetchRelease(function(err, r) {
        var e;
        if (err != null) {
          return done(err);
        }
        try {
          r.should.equal('test');
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  describe('the classkeys', function() {
    var promise;
    promise = service.fetchClassKeys();
    it('should return a usable value', is_usable(promise));
    it('should resolve successfully', resolves(promise));
    it('should have the classes property', function(done) {
      return promise.then(function(ck) {
        return ck.should.have.property('Employee');
      }).then((function() {
        return done();
      }), done);
    });
    it('should have a keys for employee', function(done) {
      return promise.then(function(ck) {
        return ck.Employee.should.have.lengthOf(1);
      }).then((function() {
        return done();
      }), done);
    });
    return it('should support callbacks', function(done) {
      return service.fetchRelease(function(err, ck) {
        var e;
        if (err != null) {
          return done(err);
        }
        try {
          if (typeof m !== "undefined" && m !== null) {
            ck.should.have.property('classes');
          }
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  describe('the model', function() {
    var promise;
    promise = service.fetchModel();
    it('should return a usable value', is_usable(promise));
    it('should resolve successfully', resolves(promise));
    it('should have the classes property', function(done) {
      promise.then(function(m) {
        m.should.have.property('classes');
        return done();
      });
      return promise.then(null, done);
    });
    it('should have a positive number of classes', function(done) {
      promise.then(null, done);
      return promise.then(function(m) {
        var v, _;
        ((function() {
          var _ref, _results;
          _ref = m.classes;
          _results = [];
          for (_ in _ref) {
            v = _ref[_];
            _results.push(v);
          }
          return _results;
        })()).length.should.be.ok;
        return done();
      });
    });
    return it('should support callbacks', function(done) {
      return service.fetchModel(function(err, m) {
        if (m != null) {
          m.should.have.property('classes');
        }
        return done(err);
      });
    });
  });
  return describe('the summary fields', function() {
    var expected, promise;
    expected = ["Employee.name", "Employee.department.name", "Employee.department.manager.name", "Employee.department.company.name", "Employee.fullTime", "Employee.address.address"];
    promise = service.fetchSummaryFields();
    it('should return a usable value', is_usable(promise));
    it('should resolve successfully', resolves(promise));
    it('should have fields for Employee', function(done) {
      promise.then(null, done);
      return promise.then(function(sfs) {
        sfs.should.have.property('Employee');
        return done();
      });
    });
    it('should have the expected fields for Employee', function(done) {
      promise.then(null, done);
      return promise.then(function(sfs) {
        sfs.Employee.should.eql(expected);
        return done();
      });
    });
    return it('should support callbacks', function(done) {
      promise.then(null, done);
      return service.fetchSummaryFields(function(err, sfs) {
        if (sfs != null) {
          sfs.should.have.property('Employee');
        }
        return done(err);
      });
    });
  });
});


},{"./lib/fixture":"V5MhzQ","should":41}],102:[function(require,module,exports){
var process=require("__browserify_process");var Fixture, Service, eventually, parallel, prepare, should, _ref;

if (process.env.IMJS_COV) {
  Service = require('../../build-cov/service').Service;
} else {
  Service = require('../../build/service').Service;
}

should = require('should');

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

parallel = Fixture.utils.parallel;

describe('Service', function() {
  describe('new Service', function() {
    it('should make a new service', function() {
      var service;
      service = new Service({
        root: 'foo'
      });
      should.exist(service);
      return service.should.be.an.instanceOf(Service);
    });
    it('should require at least a root property', function() {
      return (function() {
        return new Service;
      }).should["throw"]();
    });
    it('should not alter complete root urls', function() {
      var service;
      service = new Service({
        root: 'http://localhost/intermine-test/service/'
      });
      return service.root.should.equal('http://localhost/intermine-test/service/');
    });
    it('should ensure root urls have a trailing slash', function() {
      var service;
      service = new Service({
        root: 'http://localhost/intermine-test/service'
      });
      return service.root.should.equal('http://localhost/intermine-test/service/');
    });
    return it('should deal with minimal root urls', function() {
      var service;
      service = new Service({
        root: 'localhost/intermine-test'
      });
      return service.root.should.equal('http://localhost/intermine-test/service/');
    });
  });
  describe('.connect', function() {
    it('should serve as an alias for "new Service"', function() {
      var service;
      service = Service.connect({
        root: 'localhost/intermine-test'
      });
      should.exist(service);
      service.should.be.an.instanceOf(Service);
      return service.root.should.equal('http://localhost/intermine-test/service/');
    });
    return it('should check the arguments', function() {
      return (function() {
        return Service.connect();
      }).should["throw"](/Invalid/);
    });
  });
  return describe('caching', function() {
    describe('useCache', function() {
      var service;
      service = (new Fixture).service;
      this.beforeEach(prepare(service.fetchSummaryFields));
      it('should be true', function() {
        return service.useCache.should.be["true"];
      });
      return it('should should mean things like the summary fields are cached', eventually(function(fa) {
        return Service.connect(service).fetchSummaryFields().then(function(fb) {
          return fb.should.equal(fa);
        });
      }));
    });
    return describe('flushCaches', function() {
      var service;
      service = (new Fixture).service;
      this.beforeEach(prepare(service.fetchSummaryFields));
      this.afterEach(Service.flushCaches);
      return it('should mean we get fresh objects', eventually(function(fa) {
        Service.flushCaches();
        return Service.connect(service).fetchSummaryFields().then(function(fb) {
          return fb.should.not.equal(fa);
        });
      }));
    });
  });
});


},{"../../build-cov/service":8,"../../build/service":24,"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","__browserify_process":35,"should":41}],103:[function(require,module,exports){
var Deferred, Fixture, eventually, flatMap, get, invoke, prepare, sumCounts, _ref, _ref1;

Deferred = require('underscore.deferred').Deferred;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), prepare = _ref.prepare, eventually = _ref.eventually;

_ref1 = Fixture.funcutils, invoke = _ref1.invoke, get = _ref1.get, flatMap = _ref1.flatMap;

sumCounts = flatMap(get('count'));

describe('Query', function() {
  describe('summary of numeric path', function() {
    var olderEmployees, service, _ref2;
    _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
    this.beforeEach(prepare(function() {
      return service.query(olderEmployees).then(invoke('summarise', 'age'));
    }));
    it('should have fewer than 21 buckets', eventually(function(_arg) {
      var results;
      results = _arg.results;
      return results.length.should.be.below(21);
    }));
    it('should include all the results of the query', eventually(function(_arg) {
      var results;
      results = _arg.results;
      return sumCounts(results).should.equal(46);
    }));
    it('should have a suitable max value', eventually(function(_arg) {
      var stats;
      stats = _arg.stats;
      return stats.max.should.be.below(100);
    }));
    it('should have a suitable min value', eventually(function(_arg) {
      var stats;
      stats = _arg.stats;
      return stats.min.should.be.above(49);
    }));
    return it('should have a suitable total', eventually(function(_arg) {
      var results, stats;
      results = _arg.results, stats = _arg.stats;
      return results.length.should.be.below(stats.uniqueValues);
    }));
  });
  describe('American English alias', function() {
    var olderEmployees, service, _ref2;
    _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
    this.beforeEach(prepare(function() {
      return service.query(olderEmployees).then(invoke('summarize', 'age'));
    }));
    return it('should include all the results of the query', eventually(function(_arg) {
      var results;
      results = _arg.results;
      return sumCounts(results).should.equal(46);
    }));
  });
  return describe('summary of string path', function() {
    var olderEmployees, service, _ref2;
    _ref2 = new Fixture(), service = _ref2.service, olderEmployees = _ref2.olderEmployees;
    this.beforeEach(prepare(function() {
      return service.query(olderEmployees).then(invoke('summarise', 'department.company.name'));
    }));
    it('should have fewer than 21 buckets', eventually(function(_arg) {
      var results;
      results = _arg.results;
      return results.length.should.equal(6);
    }));
    it('should include all the results of the query', eventually(function(_arg) {
      var results;
      results = _arg.results;
      return sumCounts(results).should.equal(46);
    }));
    it('should contain the company names as the bucket labels', eventually(function(_arg) {
      var results, x;
      results = _arg.results;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = results.length; _i < _len; _i++) {
          x = results[_i];
          _results.push(x.item);
        }
        return _results;
      })()).should.include('Wernham-Hogg');
    }));
    return it('should have a suitable total', eventually(function(_arg) {
      var stats;
      stats = _arg.stats;
      return stats.uniqueValues.should.equal(6);
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","underscore.deferred":43}],104:[function(require,module,exports){
var Fixture, always, eventually, invoke, prepare, should, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare, always = _ref.always;

invoke = Fixture.funcutils.invoke;

should = require('should');

describe('Service', function() {
  var service;
  service = new Fixture().service;
  return describe('#manageUserPreferences', function() {
    var clearPref;
    clearPref = always(function() {
      return service.manageUserPreferences('DELETE', {
        key: 'testpref'
      });
    });
    describe('promise api', function() {
      this.beforeEach(clearPref);
      this.afterEach(clearPref);
      describe('getting preferences', function() {
        this.beforeEach(prepare(function() {
          return service.manageUserPreferences('GET');
        }));
        return it('should get an object, with no value for testpref', eventually(function(prefs) {
          return should.not.exist(prefs.testpref);
        }));
      });
      return describe('setting pref', function() {
        this.beforeEach(prepare(function() {
          return service.manageUserPreferences('POST', {
            testpref: 'foo'
          });
        }));
        return it('should find the prefs set correctly', eventually(function(prefs) {
          return prefs.testpref.should.equal('foo');
        }));
      });
    });
    return describe('callback api', function() {
      this.beforeEach(clearPref);
      this.afterEach(clearPref);
      describe('getting preferences', function() {
        return it('should get an object, with no value for testpref', function(done) {
          return service.manageUserPreferences('GET', null, function(err, prefs) {
            var e;
            if (err != null) {
              return done(err);
            }
            try {
              should.not.exist(prefs.testpref);
              return done();
            } catch (_error) {
              e = _error;
              return done(e);
            }
          });
        });
      });
      return describe('setting pref', function() {
        return it('should find the prefs set correctly', function(done) {
          return service.manageUserPreferences('POST', {
            testpref: 'foo'
          }, function(err, prefs) {
            var e;
            if (err != null) {
              return done(err);
            }
            try {
              prefs.testpref.should.equal('foo');
              return done();
            } catch (_error) {
              e = _error;
              return done(e);
            }
          });
        });
      });
    });
  });
});

describe('User: single preference management', function() {
  var clearPref, service, singleTest;
  service = new Fixture().service;
  clearPref = invoke('clearPreference', 'testpref');
  this.afterEach(always(function() {
    return service.fetchUser().then(clearPref);
  }));
  singleTest = function(setter) {
    return function() {
      this.beforeEach(prepare(function() {
        return service.fetchUser().then(setter);
      }));
      return it('should have the right prefs set', eventually(function(prefs) {
        prefs.should.have.property('testpref');
        return prefs.testpref.should.equal('TestPrefVal');
      }));
    };
  };
  describe('#setPreference(key: val)', singleTest(function(user) {
    return user.setPreference({
      testpref: 'TestPrefVal'
    });
  }));
  describe('#setPreference(key, val)', singleTest(function(user) {
    return user.setPreference('testpref', 'TestPrefVal');
  }));
  describe('#setPreference([[key, val]])', singleTest(function(user) {
    return user.setPreference([['testpref', 'TestPrefVal']]);
  }));
  return describe('#clearPreference(key)', function() {
    this.beforeEach(prepare(function() {
      return service.fetchUser().then(clearPref);
    }));
    return it('should have the right prefs set', eventually(function(prefs) {
      return prefs.should.not.have.property('testpref');
    }));
  });
});

describe('User: preference management with callbacks', function() {
  var checkPrefs, clearPref, service;
  service = new Fixture().service;
  clearPref = invoke('clearPreference', 'testpref');
  this.afterEach(always(function() {
    return service.fetchUser().then(clearPref);
  }));
  checkPrefs = function(done) {
    return function(err, prefs) {
      var e;
      if (err != null) {
        return done(err);
      }
      try {
        prefs.should.have.property('testpref');
        prefs.testpref.should.equal('TestPrefVal');
        return done();
      } catch (_error) {
        e = _error;
        return done(e);
      }
    };
  };
  describe('#setPreference(key: val)', function(done) {
    return service.whoami(function(err, user) {
      if (err != null) {
        return done(err);
      }
      return user.setPreference({
        testpref: 'TestPrefVal'
      }, checkPrefs(done));
    });
  });
  describe('#setPreference(key, val)', function(done) {
    return service.whoami(function(err, user) {
      if (err != null) {
        return done(err);
      }
      return user.setPreference('testpref', 'TestPrefVal', checkPrefs(done));
    });
  });
  describe('#setPreference([[key, val]])', function(done) {
    return service.whoami(function(err, user) {
      if (err != null) {
        return done(err);
      }
      return user.setPreference([['testpref', 'TestPrefVal']], checkPrefs(done));
    });
  });
  return describe('#clearPreference(key)', function() {
    this.beforeEach(prepare(function() {
      return service.fetchUser().then(clearPref);
    }));
    return it('should have the right prefs set', eventually(function(prefs) {
      return service.whoami(function(err, user) {
        if (err != null) {
          return done(err);
        }
        return user.clearPreference('testpref', function(err, done) {
          var e;
          if (err != null) {
            return err;
          }
          try {
            prefs.should.not.have.property('testpref');
            return done();
          } catch (_error) {
            e = _error;
            return done(e);
          }
        });
      });
    }));
  });
});

describe('User: multiple preference management', function() {
  var clearPrefs, multiTest, service, set;
  service = new Fixture().service;
  set = 'setPreferences';
  clearPrefs = function(user) {
    return user.clearPreference('testpref-a').then(function() {
      return user.clearPreference('testpref-b');
    });
  };
  this.afterEach(always(function() {
    return service.fetchUser().then(clearPrefs);
  }));
  multiTest = function(setter) {
    return function() {
      this.beforeEach(prepare(function() {
        return service.fetchUser().then(setter);
      }));
      return it('should have both preferences set', eventually(function(prefs) {
        prefs.should.have.property('testpref-a', 'VAL1');
        return prefs.should.have.property('testpref-b', 'VAL2');
      }));
    };
  };
  describe('#setPreferences({a: val1, b: val2})', multiTest(invoke(set, {
    'testpref-a': 'VAL1',
    'testpref-b': 'VAL2'
  })));
  return describe('#setPreferences([[a, val1], [b, val2]])', multiTest(invoke(set, [['testpref-a', 'VAL1'], ['testpref-b', 'VAL2']])));
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}],105:[function(require,module,exports){
var Fixture, always, eventually, prepare, should, _ref;

Fixture = require('./lib/fixture');

_ref = require('./lib/utils'), eventually = _ref.eventually, prepare = _ref.prepare, always = _ref.always;

should = require('should');

describe('Service', function() {
  var service;
  this.slow(5000);
  service = new Fixture().service;
  describe('#whoami()', function() {
    this.beforeAll(prepare(service.whoami));
    it('should yield a user', eventually(function(user) {
      return should.exist(user);
    }));
    return it('should yield the representation of the test user', eventually(function(user) {
      return user.username.should.equal('intermine-test-user');
    }));
  });
  describe('#whoami(cb)', function() {
    return it('should support the callback API', function(done) {
      return service.whoami(function(err, user) {
        var e;
        if (err != null) {
          done(err);
        }
        try {
          user.username.should.equal('intermine-test-user');
          return done();
        } catch (_error) {
          e = _error;
          return done(e);
        }
      });
    });
  });
  return describe('#fetchUser()', function() {
    this.beforeAll(prepare(service.fetchUser));
    it('should yield a user', eventually(function(user) {
      return should.exist(user);
    }));
    return it('should yield the representation of the test user', eventually(function(user) {
      return user.username.should.equal('intermine-test-user');
    }));
  });
});


},{"./lib/fixture":"V5MhzQ","./lib/utils":"enjK+c","should":41}]},{},[45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,66,67,68,69,70,71,72,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105])
;